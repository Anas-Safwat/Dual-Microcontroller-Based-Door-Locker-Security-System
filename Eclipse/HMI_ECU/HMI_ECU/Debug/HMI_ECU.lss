
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  000042ee  00004382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080015a  0080015a  0000447c  2**0
                  ALLOC
  3 .stab         00003888  00000000  00000000  0000447c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001739  00000000  00000000  00007d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000943d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000957d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000096ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c221  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_4>
      14:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_9>
      28:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_10>
      2c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 13 	call	0x2708	; 0x2708 <main>
      8a:	0c 94 75 21 	jmp	0x42ea	; 0x42ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e4       	ldi	r26, 0x43	; 67
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e4       	ldi	r24, 0x43	; 67
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 21 	jmp	0x420a	; 0x420a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 21 	jmp	0x424a	; 0x424a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*
 * Description :
 * Initialize the UART device based on the configuration structure.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24

    /* Enable RX and TX, configure UCSZ2 for data size */
    UCSRB = (1 << RXEN) | (1 << TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
    if (Config_Ptr->bit_data == UART_9_BIT)
     b6a:	eb 81       	ldd	r30, Y+3	; 0x03
     b6c:	fc 81       	ldd	r31, Y+4	; 0x04
     b6e:	80 81       	ld	r24, Z
     b70:	87 30       	cpi	r24, 0x07	; 7
     b72:	39 f4       	brne	.+14     	; 0xb82 <UART_init+0x3c>
    {
        UCSRB |= (1 << UCSZ2); /* Enable 9-bit mode */
     b74:	aa e2       	ldi	r26, 0x2A	; 42
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ea e2       	ldi	r30, 0x2A	; 42
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	84 60       	ori	r24, 0x04	; 4
     b80:	8c 93       	st	X, r24
    }

    /* Configure frame format: data bits, parity, stop bits */
    UCSRC = (1 << URSEL) | (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);
     b82:	a0 e4       	ldi	r26, 0x40	; 64
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	82 95       	swap	r24
     b92:	92 95       	swap	r25
     b94:	90 7f       	andi	r25, 0xF0	; 240
     b96:	98 27       	eor	r25, r24
     b98:	80 7f       	andi	r24, 0xF0	; 240
     b9a:	98 27       	eor	r25, r24
     b9c:	28 2f       	mov	r18, r24
     b9e:	20 68       	ori	r18, 0x80	; 128
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 2b       	or	r24, r18
     bb8:	8c 93       	st	X, r24
    if (Config_Ptr->bit_data == UART_5_BIT) {
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 81       	ld	r24, Z
     bc0:	88 23       	and	r24, r24
     bc2:	a1 f0       	breq	.+40     	; 0xbec <UART_init+0xa6>
        /* No bits needed, already default */
    } else if (Config_Ptr->bit_data <= UART_8_BIT) {
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	80 81       	ld	r24, Z
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	78 f4       	brcc	.+30     	; 0xbec <UART_init+0xa6>
        UCSRC |= ((Config_Ptr->bit_data - UART_5_BIT) << UCSZ0);
     bce:	a0 e4       	ldi	r26, 0x40	; 64
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	28 2f       	mov	r18, r24
     bda:	eb 81       	ldd	r30, Y+3	; 0x03
     bdc:	fc 81       	ldd	r31, Y+4	; 0x04
     bde:	80 81       	ld	r24, Z
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	82 2b       	or	r24, r18
     bea:	8c 93       	st	X, r24
    }

    /* Calculate and set baud rate */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     bec:	eb 81       	ldd	r30, Y+3	; 0x03
     bee:	fc 81       	ldd	r31, Y+4	; 0x04
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	94 81       	ldd	r25, Z+4	; 0x04
     bf4:	a5 81       	ldd	r26, Z+5	; 0x05
     bf6:	b6 81       	ldd	r27, Z+6	; 0x06
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	aa 1f       	adc	r26, r26
     c0e:	bb 1f       	adc	r27, r27
     c10:	9c 01       	movw	r18, r24
     c12:	ad 01       	movw	r20, r26
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	92 e1       	ldi	r25, 0x12	; 18
     c18:	aa e7       	ldi	r26, 0x7A	; 122
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__udivmodsi4>
     c24:	da 01       	movw	r26, r20
     c26:	c9 01       	movw	r24, r18
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
    UBRRH = ubrr_value >> 8;
     c2e:	e0 e4       	ldi	r30, 0x40	; 64
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	89 2f       	mov	r24, r25
     c38:	99 27       	eor	r25, r25
     c3a:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
     c3c:	e9 e2       	ldi	r30, 0x29	; 41
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	80 83       	st	Z, r24
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <UART_sendByte>:
/*
 * Description :
 * Send byte through UART.
 */
void UART_sendByte(const uint8 data)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c5e:	eb e2       	ldi	r30, 0x2B	; 43
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	80 72       	andi	r24, 0x20	; 32
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	b9 f3       	breq	.-18     	; 0xc5e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c70:	ec e2       	ldi	r30, 0x2C	; 44
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <UART_receiveByte>:
/*
 * Description :
 * Receive byte from UART.
 */
uint8 UART_receiveByte(void)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c88:	eb e2       	ldi	r30, 0x2B	; 43
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	dc f7       	brge	.-10     	; 0xc88 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <UART_sendString>:
/*
 * Description :
 * Send a string through UART.
 */
void UART_sendString(const uint8 *Str)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_sendString+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cae:	19 82       	std	Y+1, r1	; 0x01
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	fc 01       	movw	r30, r24
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	80 81       	ld	r24, Z
     cc4:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
		i++;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	9b 81       	ldd	r25, Y+3	; 0x03
     cd8:	fc 01       	movw	r30, r24
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	80 81       	ld	r24, Z
     ce0:	88 23       	and	r24, r24
     ce2:	39 f7       	brne	.-50     	; 0xcb2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <UART_receiveString>:
/*
 * Description :
 * Receive a string through UART until '#' character.
 */
void UART_receiveString(uint8 *Str)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <UART_receiveString+0xa>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d04:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	8c 01       	movw	r16, r24
     d12:	02 0f       	add	r16, r18
     d14:	13 1f       	adc	r17, r19
     d16:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 83       	st	Z, r24
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	8c 01       	movw	r16, r24
     d32:	02 0f       	add	r16, r18
     d34:	13 1f       	adc	r17, r19
     d36:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	fc 01       	movw	r30, r24
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	80 81       	ld	r24, Z
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	31 f7       	brne	.-52     	; 0xd20 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	10 82       	st	Z, r1
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <Timer_init>:
static volatile void (*g_timer0CallbackPtr)(void) = NULL_PTR;
static volatile void (*g_timer1CallbackPtr)(void) = NULL_PTR;
static volatile void (*g_timer2CallbackPtr)(void) = NULL_PTR;

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <Timer_init+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <Timer_init+0x8>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
    switch(Config_Ptr->timer_ID)
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3c 83       	std	Y+4, r19	; 0x04
     d92:	2b 83       	std	Y+3, r18	; 0x03
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <Timer_init+0x2a>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <Timer_init+0xb0>
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <Timer_init+0x36>
     daa:	79 c0       	rjmp	.+242    	; 0xe9e <Timer_init+0x128>
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	09 f0       	breq	.+2      	; 0xdb6 <Timer_init+0x40>
     db4:	ab c0       	rjmp	.+342    	; 0xf0c <Timer_init+0x196>
    {
        case TIMER0_ID:
            /* Set initial value */
            TCNT0 = Config_Ptr->timer_initialValue;
     db6:	a2 e5       	ldi	r26, 0x52	; 82
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	86 81       	ldd	r24, Z+6	; 0x06
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	59 f4       	brne	.+22     	; 0xde4 <Timer_init+0x6e>
                OCR0 = Config_Ptr->timer_compareMatchValue; /* Set compare match value */
     dce:	ac e5       	ldi	r26, 0x5C	; 92
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	8c 93       	st	X, r24
                TCCR0 = (1<<WGM01); /* Set to CTC mode */
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	80 83       	st	Z, r24
            }
            /* Set clock prescaler */
            TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	98 2f       	mov	r25, r24
     df0:	98 7f       	andi	r25, 0xF8	; 248
     df2:	e9 81       	ldd	r30, Y+1	; 0x01
     df4:	fa 81       	ldd	r31, Y+2	; 0x02
     df6:	85 81       	ldd	r24, Z+5	; 0x05
     df8:	89 2b       	or	r24, r25
     dfa:	8c 93       	st	X, r24
            /* Enable interrupt */
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	86 81       	ldd	r24, Z+6	; 0x06
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	41 f4       	brne	.+16     	; 0xe16 <Timer_init+0xa0>
                SET_BIT(TIMSK, OCIE0); /* Enable Timer0 Compare Interrupt */
     e06:	a9 e5       	ldi	r26, 0x59	; 89
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e9 e5       	ldi	r30, 0x59	; 89
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	8c 93       	st	X, r24
     e14:	7b c0       	rjmp	.+246    	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE0); /* Enable Timer0 Overflow Interrupt */
     e16:	a9 e5       	ldi	r26, 0x59	; 89
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e9 e5       	ldi	r30, 0x59	; 89
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	8c 93       	st	X, r24
     e24:	73 c0       	rjmp	.+230    	; 0xf0c <Timer_init+0x196>
            }
            break;
        case TIMER1_ID:
            /* Set initial value */
            TCNT1 = Config_Ptr->timer_initialValue;
     e26:	ac e4       	ldi	r26, 0x4C	; 76
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     e38:	e9 81       	ldd	r30, Y+1	; 0x01
     e3a:	fa 81       	ldd	r31, Y+2	; 0x02
     e3c:	86 81       	ldd	r24, Z+6	; 0x06
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	69 f4       	brne	.+26     	; 0xe5c <Timer_init+0xe6>
                OCR1A = Config_Ptr->timer_compareMatchValue;
     e42:	aa e4       	ldi	r26, 0x4A	; 74
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
                TCCR1A = (1<<WGM12); /* Set to CTC mode */
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	88 e0       	ldi	r24, 0x08	; 8
     e5a:	80 83       	st	Z, r24
            }
            TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
     e5c:	ae e4       	ldi	r26, 0x4E	; 78
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ee e4       	ldi	r30, 0x4E	; 78
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	98 2f       	mov	r25, r24
     e68:	98 7f       	andi	r25, 0xF8	; 248
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	85 81       	ldd	r24, Z+5	; 0x05
     e70:	89 2b       	or	r24, r25
     e72:	8c 93       	st	X, r24
            /* Enable interrupt */
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	86 81       	ldd	r24, Z+6	; 0x06
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	41 f4       	brne	.+16     	; 0xe8e <Timer_init+0x118>
                SET_BIT(TIMSK, OCIE1A);
     e7e:	a9 e5       	ldi	r26, 0x59	; 89
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e9 e5       	ldi	r30, 0x59	; 89
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	8c 93       	st	X, r24
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE1);
     e8e:	a9 e5       	ldi	r26, 0x59	; 89
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e9 e5       	ldi	r30, 0x59	; 89
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	8c 93       	st	X, r24
     e9c:	37 c0       	rjmp	.+110    	; 0xf0c <Timer_init+0x196>
            }
            break;
        case TIMER2_ID:
            TCNT2 = Config_Ptr->timer_initialValue;
     e9e:	a4 e4       	ldi	r26, 0x44	; 68
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e9 81       	ldd	r30, Y+1	; 0x01
     ea4:	fa 81       	ldd	r31, Y+2	; 0x02
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	86 81       	ldd	r24, Z+6	; 0x06
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	59 f4       	brne	.+22     	; 0xecc <Timer_init+0x156>
                OCR2 = Config_Ptr->timer_compareMatchValue;
     eb6:	a3 e4       	ldi	r26, 0x43	; 67
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	8c 93       	st	X, r24
                TCCR2 = (1<<WGM21);
     ec4:	e5 e4       	ldi	r30, 0x45	; 69
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	80 83       	st	Z, r24
            }
            TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock);
     ecc:	a5 e4       	ldi	r26, 0x45	; 69
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e4       	ldi	r30, 0x45	; 69
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	98 2f       	mov	r25, r24
     ed8:	98 7f       	andi	r25, 0xF8	; 248
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	85 81       	ldd	r24, Z+5	; 0x05
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	86 81       	ldd	r24, Z+6	; 0x06
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	41 f4       	brne	.+16     	; 0xefe <Timer_init+0x188>
                SET_BIT(TIMSK, OCIE2);
     eee:	a9 e5       	ldi	r26, 0x59	; 89
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e9 e5       	ldi	r30, 0x59	; 89
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	8c 93       	st	X, r24
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE2);
     efe:	a9 e5       	ldi	r26, 0x59	; 89
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e9 e5       	ldi	r30, 0x59	; 89
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	8c 93       	st	X, r24
            }
            break;
    }
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <Timer_deInit>:

void Timer_deInit(uint8 timer_ID)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <Timer_deInit+0x6>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_ID)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3b 83       	std	Y+3, r19	; 0x03
     f30:	2a 83       	std	Y+2, r18	; 0x02
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	d9 f0       	breq	.+54     	; 0xf72 <Timer_deInit+0x58>
     f3c:	2a 81       	ldd	r18, Y+2	; 0x02
     f3e:	3b 81       	ldd	r19, Y+3	; 0x03
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	59 f1       	breq	.+86     	; 0xf9c <Timer_deInit+0x82>
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	c1 f5       	brne	.+112    	; 0xfbe <Timer_deInit+0xa4>
    {
        case TIMER0_ID:
            TCCR0 = 0;
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE0);
     f54:	a9 e5       	ldi	r26, 0x59	; 89
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e9 e5       	ldi	r30, 0x59	; 89
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE0);
     f62:	a9 e5       	ldi	r26, 0x59	; 89
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e9 e5       	ldi	r30, 0x59	; 89
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
     f70:	26 c0       	rjmp	.+76     	; 0xfbe <Timer_deInit+0xa4>
            break;
        case TIMER1_ID:
            TCCR1A = 0;
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	10 82       	st	Z, r1
            TCCR1B = 0;
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE1A);
     f7e:	a9 e5       	ldi	r26, 0x59	; 89
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 e5       	ldi	r30, 0x59	; 89
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7e       	andi	r24, 0xEF	; 239
     f8a:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE1);
     f8c:	a9 e5       	ldi	r26, 0x59	; 89
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e9 e5       	ldi	r30, 0x59	; 89
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	8c 93       	st	X, r24
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <Timer_deInit+0xa4>
            break;
        case TIMER2_ID:
            TCCR2 = 0;
     f9c:	e5 e4       	ldi	r30, 0x45	; 69
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE2);
     fa2:	a9 e5       	ldi	r26, 0x59	; 89
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 e5       	ldi	r30, 0x59	; 89
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 77       	andi	r24, 0x7F	; 127
     fae:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE2);
     fb0:	a9 e5       	ldi	r26, 0x59	; 89
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e9 e5       	ldi	r30, 0x59	; 89
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	8c 93       	st	X, r24
            break;
    }
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), uint8 timer_ID)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <Timer_setCallBack+0x6>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <Timer_setCallBack+0x8>
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6b 83       	std	Y+3, r22	; 0x03
    switch(timer_ID)
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	81 f0       	breq	.+32     	; 0x1012 <Timer_setCallBack+0x48>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	91 f0       	breq	.+36     	; 0x1020 <Timer_setCallBack+0x56>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 f4       	brne	.+40     	; 0x102c <Timer_setCallBack+0x62>
    {
        case TIMER0_ID:
            g_timer0CallbackPtr = a_ptr;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	90 93 5b 01 	sts	0x015B, r25
    100c:	80 93 5a 01 	sts	0x015A, r24
    1010:	0d c0       	rjmp	.+26     	; 0x102c <Timer_setCallBack+0x62>
            break;
        case TIMER1_ID:
            g_timer1CallbackPtr = a_ptr;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	90 93 5d 01 	sts	0x015D, r25
    101a:	80 93 5c 01 	sts	0x015C, r24
    101e:	06 c0       	rjmp	.+12     	; 0x102c <Timer_setCallBack+0x62>
            break;
        case TIMER2_ID:
            g_timer2CallbackPtr = a_ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 5f 01 	sts	0x015F, r25
    1028:	80 93 5e 01 	sts	0x015E, r24
            break;
    }
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <__vector_11>:

/* ISR Definitions */
ISR(TIMER0_OVF_vect)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    if(g_timer0CallbackPtr != NULL_PTR)
    1066:	80 91 5a 01 	lds	r24, 0x015A
    106a:	90 91 5b 01 	lds	r25, 0x015B
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	29 f0       	breq	.+10     	; 0x107c <__vector_11+0x40>
    {
        (*g_timer0CallbackPtr)();
    1072:	e0 91 5a 01 	lds	r30, 0x015A
    1076:	f0 91 5b 01 	lds	r31, 0x015B
    107a:	09 95       	icall
    }
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    if(g_timer0CallbackPtr != NULL_PTR)
    10cc:	80 91 5a 01 	lds	r24, 0x015A
    10d0:	90 91 5b 01 	lds	r25, 0x015B
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <__vector_10+0x40>
    {
        (*g_timer0CallbackPtr)();
    10d8:	e0 91 5a 01 	lds	r30, 0x015A
    10dc:	f0 91 5b 01 	lds	r31, 0x015B
    10e0:	09 95       	icall
    }
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	0f 92       	push	r0
    1110:	11 24       	eor	r1, r1
    1112:	2f 93       	push	r18
    1114:	3f 93       	push	r19
    1116:	4f 93       	push	r20
    1118:	5f 93       	push	r21
    111a:	6f 93       	push	r22
    111c:	7f 93       	push	r23
    111e:	8f 93       	push	r24
    1120:	9f 93       	push	r25
    1122:	af 93       	push	r26
    1124:	bf 93       	push	r27
    1126:	ef 93       	push	r30
    1128:	ff 93       	push	r31
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    if(g_timer1CallbackPtr != NULL_PTR)
    1132:	80 91 5c 01 	lds	r24, 0x015C
    1136:	90 91 5d 01 	lds	r25, 0x015D
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	29 f0       	breq	.+10     	; 0x1148 <__vector_9+0x40>
    {
        (*g_timer1CallbackPtr)();
    113e:	e0 91 5c 01 	lds	r30, 0x015C
    1142:	f0 91 5d 01 	lds	r31, 0x015D
    1146:	09 95       	icall
    }
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    if(g_timer1CallbackPtr != NULL_PTR)
    1198:	80 91 5c 01 	lds	r24, 0x015C
    119c:	90 91 5d 01 	lds	r25, 0x015D
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__vector_7+0x40>
    {
        (*g_timer1CallbackPtr)();
    11a4:	e0 91 5c 01 	lds	r30, 0x015C
    11a8:	f0 91 5d 01 	lds	r31, 0x015D
    11ac:	09 95       	icall
    }
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    if(g_timer2CallbackPtr != NULL_PTR)
    11fe:	80 91 5e 01 	lds	r24, 0x015E
    1202:	90 91 5f 01 	lds	r25, 0x015F
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_5+0x40>
    {
        (*g_timer2CallbackPtr)();
    120a:	e0 91 5e 01 	lds	r30, 0x015E
    120e:	f0 91 5f 01 	lds	r31, 0x015F
    1212:	09 95       	icall
    }
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    if(g_timer2CallbackPtr != NULL_PTR)
    1264:	80 91 5e 01 	lds	r24, 0x015E
    1268:	90 91 5f 01 	lds	r25, 0x015F
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f0       	breq	.+10     	; 0x127a <__vector_4+0x40>
    {
        (*g_timer2CallbackPtr)();
    1270:	e0 91 5e 01 	lds	r30, 0x015E
    1274:	f0 91 5f 01 	lds	r31, 0x015F
    1278:	09 95       	icall
    }
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	2e 97       	sbiw	r28, 0x0e	; 14
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	41 e0       	ldi	r20, 0x01	; 1
    12ba:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 ea       	ldi	r26, 0xA0	; 160
    12ce:	b1 e4       	ldi	r27, 0x41	; 65
    12d0:	8b 87       	std	Y+11, r24	; 0x0b
    12d2:	9c 87       	std	Y+12, r25	; 0x0c
    12d4:	ad 87       	std	Y+13, r26	; 0x0d
    12d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12da:	7c 85       	ldd	r23, Y+12	; 0x0c
    12dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12de:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8f 83       	std	Y+7, r24	; 0x07
    12f2:	98 87       	std	Y+8, r25	; 0x08
    12f4:	a9 87       	std	Y+9, r26	; 0x09
    12f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f8:	6f 81       	ldd	r22, Y+7	; 0x07
    12fa:	78 85       	ldd	r23, Y+8	; 0x08
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	2c f4       	brge	.+10     	; 0x131a <LCD_init+0x7a>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <LCD_init+0xf8>
	else if (__tmp > 65535)
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	4c f5       	brge	.+82     	; 0x1384 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	7c 85       	ldd	r23, Y+12	; 0x0c
    1336:	8d 85       	ldd	r24, Y+13	; 0x0d
    1338:	9e 85       	ldd	r25, Y+14	; 0x0e
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	0f c0       	rjmp	.+30     	; 0x137a <LCD_init+0xda>
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <LCD_init+0xc8>
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f7       	brne	.-38     	; 0x135c <LCD_init+0xbc>
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <LCD_init+0x104>
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	6f ef       	ldi	r22, 0xFF	; 255
    13b0:	0e 94 a4 12 	call	0x2548	; 0x2548 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    13b4:	88 e3       	ldi	r24, 0x38	; 56
    13b6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    13ba:	8c e0       	ldi	r24, 0x0C	; 12
    13bc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <LCD_sendCommand>
}
    13c6:	2e 96       	adiw	r28, 0x0e	; 14
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	e9 97       	sbiw	r28, 0x39	; 57
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e8       	ldi	r26, 0x80	; 128
    13fe:	bf e3       	ldi	r27, 0x3F	; 63
    1400:	8d ab       	std	Y+53, r24	; 0x35
    1402:	9e ab       	std	Y+54, r25	; 0x36
    1404:	af ab       	std	Y+55, r26	; 0x37
    1406:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6d a9       	ldd	r22, Y+53	; 0x35
    140a:	7e a9       	ldd	r23, Y+54	; 0x36
    140c:	8f a9       	ldd	r24, Y+55	; 0x37
    140e:	98 ad       	ldd	r25, Y+56	; 0x38
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	89 ab       	std	Y+49, r24	; 0x31
    1422:	9a ab       	std	Y+50, r25	; 0x32
    1424:	ab ab       	std	Y+51, r26	; 0x33
    1426:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1428:	69 a9       	ldd	r22, Y+49	; 0x31
    142a:	7a a9       	ldd	r23, Y+50	; 0x32
    142c:	8b a9       	ldd	r24, Y+51	; 0x33
    142e:	9c a9       	ldd	r25, Y+52	; 0x34
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <LCD_sendCommand+0x72>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    144a:	69 a9       	ldd	r22, Y+49	; 0x31
    144c:	7a a9       	ldd	r23, Y+50	; 0x32
    144e:	8b a9       	ldd	r24, Y+51	; 0x33
    1450:	9c a9       	ldd	r25, Y+52	; 0x34
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6d a9       	ldd	r22, Y+53	; 0x35
    1464:	7e a9       	ldd	r23, Y+54	; 0x36
    1466:	8f a9       	ldd	r24, Y+55	; 0x37
    1468:	98 ad       	ldd	r25, Y+56	; 0x38
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	98 ab       	std	Y+48, r25	; 0x30
    1488:	8f a7       	std	Y+47, r24	; 0x2f
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <LCD_sendCommand+0xd2>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e a7       	std	Y+46, r25	; 0x2e
    1492:	8d a7       	std	Y+45, r24	; 0x2d
    1494:	8d a5       	ldd	r24, Y+45	; 0x2d
    1496:	9e a5       	ldd	r25, Y+46	; 0x2e
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_sendCommand+0xc0>
    149c:	9e a7       	std	Y+46, r25	; 0x2e
    149e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a2:	98 a9       	ldd	r25, Y+48	; 0x30
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	98 ab       	std	Y+48, r25	; 0x30
    14a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ac:	98 a9       	ldd	r25, Y+48	; 0x30
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <LCD_sendCommand+0xb4>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	69 a9       	ldd	r22, Y+49	; 0x31
    14b6:	7a a9       	ldd	r23, Y+50	; 0x32
    14b8:	8b a9       	ldd	r24, Y+51	; 0x33
    14ba:	9c a9       	ldd	r25, Y+52	; 0x34
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	98 ab       	std	Y+48, r25	; 0x30
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ca:	98 a9       	ldd	r25, Y+48	; 0x30
    14cc:	9c a7       	std	Y+44, r25	; 0x2c
    14ce:	8b a7       	std	Y+43, r24	; 0x2b
    14d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_sendCommand+0xfc>
    14d8:	9c a7       	std	Y+44, r25	; 0x2c
    14da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e8       	ldi	r26, 0x80	; 128
    14ec:	bf e3       	ldi	r27, 0x3F	; 63
    14ee:	8f a3       	std	Y+39, r24	; 0x27
    14f0:	98 a7       	std	Y+40, r25	; 0x28
    14f2:	a9 a7       	std	Y+41, r26	; 0x29
    14f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6f a1       	ldd	r22, Y+39	; 0x27
    14f8:	78 a5       	ldd	r23, Y+40	; 0x28
    14fa:	89 a5       	ldd	r24, Y+41	; 0x29
    14fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8b a3       	std	Y+35, r24	; 0x23
    1510:	9c a3       	std	Y+36, r25	; 0x24
    1512:	ad a3       	std	Y+37, r26	; 0x25
    1514:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1516:	6b a1       	ldd	r22, Y+35	; 0x23
    1518:	7c a1       	ldd	r23, Y+36	; 0x24
    151a:	8d a1       	ldd	r24, Y+37	; 0x25
    151c:	9e a1       	ldd	r25, Y+38	; 0x26
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <LCD_sendCommand+0x160>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1538:	6b a1       	ldd	r22, Y+35	; 0x23
    153a:	7c a1       	ldd	r23, Y+36	; 0x24
    153c:	8d a1       	ldd	r24, Y+37	; 0x25
    153e:	9e a1       	ldd	r25, Y+38	; 0x26
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6f a1       	ldd	r22, Y+39	; 0x27
    1552:	78 a5       	ldd	r23, Y+40	; 0x28
    1554:	89 a5       	ldd	r24, Y+41	; 0x29
    1556:	9a a5       	ldd	r25, Y+42	; 0x2a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9a a3       	std	Y+34, r25	; 0x22
    1576:	89 a3       	std	Y+33, r24	; 0x21
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <LCD_sendCommand+0x1c0>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	98 a3       	std	Y+32, r25	; 0x20
    1580:	8f 8f       	std	Y+31, r24	; 0x1f
    1582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1584:	98 a1       	ldd	r25, Y+32	; 0x20
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_sendCommand+0x1ae>
    158a:	98 a3       	std	Y+32, r25	; 0x20
    158c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	89 a1       	ldd	r24, Y+33	; 0x21
    159a:	9a a1       	ldd	r25, Y+34	; 0x22
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <LCD_sendCommand+0x1a2>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	7c a1       	ldd	r23, Y+36	; 0x24
    15a6:	8d a1       	ldd	r24, Y+37	; 0x25
    15a8:	9e a1       	ldd	r25, Y+38	; 0x26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9a a3       	std	Y+34, r25	; 0x22
    15b4:	89 a3       	std	Y+33, r24	; 0x21
    15b6:	89 a1       	ldd	r24, Y+33	; 0x21
    15b8:	9a a1       	ldd	r25, Y+34	; 0x22
    15ba:	9e 8f       	std	Y+30, r25	; 0x1e
    15bc:	8d 8f       	std	Y+29, r24	; 0x1d
    15be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <LCD_sendCommand+0x1ea>
    15c6:	9e 8f       	std	Y+30, r25	; 0x1e
    15c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	69 ad       	ldd	r22, Y+57	; 0x39
    15ce:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <GPIO_writePort>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 e8       	ldi	r26, 0x80	; 128
    15d8:	bf e3       	ldi	r27, 0x3F	; 63
    15da:	89 8f       	std	Y+25, r24	; 0x19
    15dc:	9a 8f       	std	Y+26, r25	; 0x1a
    15de:	ab 8f       	std	Y+27, r26	; 0x1b
    15e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	69 8d       	ldd	r22, Y+25	; 0x19
    15e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a ef       	ldi	r20, 0xFA	; 250
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	8d 8b       	std	Y+21, r24	; 0x15
    15fc:	9e 8b       	std	Y+22, r25	; 0x16
    15fe:	af 8b       	std	Y+23, r26	; 0x17
    1600:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1602:	6d 89       	ldd	r22, Y+21	; 0x15
    1604:	7e 89       	ldd	r23, Y+22	; 0x16
    1606:	8f 89       	ldd	r24, Y+23	; 0x17
    1608:	98 8d       	ldd	r25, Y+24	; 0x18
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	2c f4       	brge	.+10     	; 0x1624 <LCD_sendCommand+0x24c>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c 8b       	std	Y+20, r25	; 0x14
    1620:	8b 8b       	std	Y+19, r24	; 0x13
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1624:	6d 89       	ldd	r22, Y+21	; 0x15
    1626:	7e 89       	ldd	r23, Y+22	; 0x16
    1628:	8f 89       	ldd	r24, Y+23	; 0x17
    162a:	98 8d       	ldd	r25, Y+24	; 0x18
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1638:	18 16       	cp	r1, r24
    163a:	4c f5       	brge	.+82     	; 0x168e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	69 8d       	ldd	r22, Y+25	; 0x19
    163e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9c 8b       	std	Y+20, r25	; 0x14
    1662:	8b 8b       	std	Y+19, r24	; 0x13
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <LCD_sendCommand+0x2ac>
    1666:	88 ec       	ldi	r24, 0xC8	; 200
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9a 8b       	std	Y+18, r25	; 0x12
    166c:	89 8b       	std	Y+17, r24	; 0x11
    166e:	89 89       	ldd	r24, Y+17	; 0x11
    1670:	9a 89       	ldd	r25, Y+18	; 0x12
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_sendCommand+0x29a>
    1676:	9a 8b       	std	Y+18, r25	; 0x12
    1678:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <LCD_sendCommand+0x28e>
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	98 8b       	std	Y+16, r25	; 0x10
    16a8:	8f 87       	std	Y+15, r24	; 0x0f
    16aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ac:	98 89       	ldd	r25, Y+16	; 0x10
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <LCD_sendCommand+0x2d6>
    16b2:	98 8b       	std	Y+16, r25	; 0x10
    16b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	8b 87       	std	Y+11, r24	; 0x0b
    16ca:	9c 87       	std	Y+12, r25	; 0x0c
    16cc:	ad 87       	std	Y+13, r26	; 0x0d
    16ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8f 83       	std	Y+7, r24	; 0x07
    16ea:	98 87       	std	Y+8, r25	; 0x08
    16ec:	a9 87       	std	Y+9, r26	; 0x09
    16ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_sendCommand+0x39a>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0x388>
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_sendCommand+0x37c>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6f 81       	ldd	r22, Y+7	; 0x07
    177e:	78 85       	ldd	r23, Y+8	; 0x08
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9e 83       	std	Y+6, r25	; 0x06
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x3c4>
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    17a4:	e9 96       	adiw	r28, 0x39	; 57
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	e9 97       	sbiw	r28, 0x39	; 57
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e8       	ldi	r26, 0x80	; 128
    17dc:	bf e3       	ldi	r27, 0x3F	; 63
    17de:	8d ab       	std	Y+53, r24	; 0x35
    17e0:	9e ab       	std	Y+54, r25	; 0x36
    17e2:	af ab       	std	Y+55, r26	; 0x37
    17e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6d a9       	ldd	r22, Y+53	; 0x35
    17e8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ea:	8f a9       	ldd	r24, Y+55	; 0x37
    17ec:	98 ad       	ldd	r25, Y+56	; 0x38
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	89 ab       	std	Y+49, r24	; 0x31
    1800:	9a ab       	std	Y+50, r25	; 0x32
    1802:	ab ab       	std	Y+51, r26	; 0x33
    1804:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1806:	69 a9       	ldd	r22, Y+49	; 0x31
    1808:	7a a9       	ldd	r23, Y+50	; 0x32
    180a:	8b a9       	ldd	r24, Y+51	; 0x33
    180c:	9c a9       	ldd	r25, Y+52	; 0x34
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <LCD_displayCharacter+0x72>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6d a9       	ldd	r22, Y+53	; 0x35
    1842:	7e a9       	ldd	r23, Y+54	; 0x36
    1844:	8f a9       	ldd	r24, Y+55	; 0x37
    1846:	98 ad       	ldd	r25, Y+56	; 0x38
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	98 ab       	std	Y+48, r25	; 0x30
    1866:	8f a7       	std	Y+47, r24	; 0x2f
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <LCD_displayCharacter+0xd2>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9e a7       	std	Y+46, r25	; 0x2e
    1870:	8d a7       	std	Y+45, r24	; 0x2d
    1872:	8d a5       	ldd	r24, Y+45	; 0x2d
    1874:	9e a5       	ldd	r25, Y+46	; 0x2e
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_displayCharacter+0xc0>
    187a:	9e a7       	std	Y+46, r25	; 0x2e
    187c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1880:	98 a9       	ldd	r25, Y+48	; 0x30
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8f a5       	ldd	r24, Y+47	; 0x2f
    188a:	98 a9       	ldd	r25, Y+48	; 0x30
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <LCD_displayCharacter+0xb4>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	69 a9       	ldd	r22, Y+49	; 0x31
    1894:	7a a9       	ldd	r23, Y+50	; 0x32
    1896:	8b a9       	ldd	r24, Y+51	; 0x33
    1898:	9c a9       	ldd	r25, Y+52	; 0x34
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	98 ab       	std	Y+48, r25	; 0x30
    18a4:	8f a7       	std	Y+47, r24	; 0x2f
    18a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a8:	98 a9       	ldd	r25, Y+48	; 0x30
    18aa:	9c a7       	std	Y+44, r25	; 0x2c
    18ac:	8b a7       	std	Y+43, r24	; 0x2b
    18ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_displayCharacter+0xfc>
    18b6:	9c a7       	std	Y+44, r25	; 0x2c
    18b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e8       	ldi	r26, 0x80	; 128
    18ca:	bf e3       	ldi	r27, 0x3F	; 63
    18cc:	8f a3       	std	Y+39, r24	; 0x27
    18ce:	98 a7       	std	Y+40, r25	; 0x28
    18d0:	a9 a7       	std	Y+41, r26	; 0x29
    18d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6f a1       	ldd	r22, Y+39	; 0x27
    18d6:	78 a5       	ldd	r23, Y+40	; 0x28
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a ef       	ldi	r20, 0xFA	; 250
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8b a3       	std	Y+35, r24	; 0x23
    18ee:	9c a3       	std	Y+36, r25	; 0x24
    18f0:	ad a3       	std	Y+37, r26	; 0x25
    18f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <LCD_displayCharacter+0x160>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6f a1       	ldd	r22, Y+39	; 0x27
    1930:	78 a5       	ldd	r23, Y+40	; 0x28
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <LCD_displayCharacter+0x1c0>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	98 a3       	std	Y+32, r25	; 0x20
    195e:	8f 8f       	std	Y+31, r24	; 0x1f
    1960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1962:	98 a1       	ldd	r25, Y+32	; 0x20
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_displayCharacter+0x1ae>
    1968:	98 a3       	std	Y+32, r25	; 0x20
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <LCD_displayCharacter+0x1a2>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	89 a1       	ldd	r24, Y+33	; 0x21
    1996:	9a a1       	ldd	r25, Y+34	; 0x22
    1998:	9e 8f       	std	Y+30, r25	; 0x1e
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
    199c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_displayCharacter+0x1ea>
    19a4:	9e 8f       	std	Y+30, r25	; 0x1e
    19a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	69 ad       	ldd	r22, Y+57	; 0x39
    19ac:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <GPIO_writePort>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	89 8f       	std	Y+25, r24	; 0x19
    19ba:	9a 8f       	std	Y+26, r25	; 0x1a
    19bc:	ab 8f       	std	Y+27, r26	; 0x1b
    19be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	69 8d       	ldd	r22, Y+25	; 0x19
    19c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8d 8b       	std	Y+21, r24	; 0x15
    19da:	9e 8b       	std	Y+22, r25	; 0x16
    19dc:	af 8b       	std	Y+23, r26	; 0x17
    19de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1a02:	6d 89       	ldd	r22, Y+21	; 0x15
    1a04:	7e 89       	ldd	r23, Y+22	; 0x16
    1a06:	8f 89       	ldd	r24, Y+23	; 0x17
    1a08:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_displayCharacter+0x2ac>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_displayCharacter+0x29a>
    1a54:	9a 8b       	std	Y+18, r25	; 0x12
    1a56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_displayCharacter+0x28e>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a70:	8f 89       	ldd	r24, Y+23	; 0x17
    1a72:	98 8d       	ldd	r25, Y+24	; 0x18
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
    1a7e:	8b 8b       	std	Y+19, r24	; 0x13
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	98 89       	ldd	r25, Y+16	; 0x10
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_displayCharacter+0x2d6>
    1a90:	98 8b       	std	Y+16, r25	; 0x10
    1a92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	61 e0       	ldi	r22, 0x01	; 1
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8b 87       	std	Y+11, r24	; 0x0b
    1aa8:	9c 87       	std	Y+12, r25	; 0x0c
    1aaa:	ad 87       	std	Y+13, r26	; 0x0d
    1aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a ef       	ldi	r20, 0xFA	; 250
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8f 83       	std	Y+7, r24	; 0x07
    1ac8:	98 87       	std	Y+8, r25	; 0x08
    1aca:	a9 87       	std	Y+9, r26	; 0x09
    1acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_displayCharacter+0x39a>
    1b32:	88 ec       	ldi	r24, 0xC8	; 200
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_displayCharacter+0x388>
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_displayCharacter+0x37c>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_displayCharacter+0x3c4>
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b82:	e9 96       	adiw	r28, 0x39	; 57
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <LCD_displayString+0x6>
    1b9a:	0f 92       	push	r0
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	9b 83       	std	Y+3, r25	; 0x03
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	0e c0       	rjmp	.+28     	; 0x1bc4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e2 0f       	add	r30, r18
    1bb6:	f3 1f       	adc	r31, r19
    1bb8:	80 81       	ld	r24, Z
    1bba:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
		i++;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f3 1f       	adc	r31, r19
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 23       	and	r24, r24
    1bd8:	39 f7       	brne	.-50     	; 0x1ba8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <LCD_moveCursor+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <LCD_moveCursor+0x8>
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
    1bf6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3d 83       	std	Y+5, r19	; 0x05
    1c00:	2c 83       	std	Y+4, r18	; 0x04
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	c1 f0       	breq	.+48     	; 0x1c3c <LCD_moveCursor+0x56>
    1c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <LCD_moveCursor+0x3a>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <LCD_moveCursor+0x50>
    1c1e:	19 c0       	rjmp	.+50     	; 0x1c52 <LCD_moveCursor+0x6c>
    1c20:	2c 81       	ldd	r18, Y+4	; 0x04
    1c22:	3d 81       	ldd	r19, Y+5	; 0x05
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	69 f0       	breq	.+26     	; 0x1c44 <LCD_moveCursor+0x5e>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <LCD_moveCursor+0x66>
    1c34:	0e c0       	rjmp	.+28     	; 0x1c52 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	0b c0       	rjmp	.+22     	; 0x1c52 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	80 5c       	subi	r24, 0xC0	; 192
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	80 5f       	subi	r24, 0xF0	; 240
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	80 5b       	subi	r24, 0xB0	; 176
    1c50:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <LCD_sendCommand>
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <LCD_displayStringRowColumn+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <LCD_displayStringRowColumn+0x8>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	6a 83       	std	Y+2, r22	; 0x02
    1c7a:	5c 83       	std	Y+4, r21	; 0x04
    1c7c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	6a 81       	ldd	r22, Y+2	; 0x02
    1c82:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	62 97       	sbiw	r28, 0x12	; 18
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1cb4:	89 89       	ldd	r24, Y+17	; 0x11
    1cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb8:	9e 01       	movw	r18, r28
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	4a e0       	ldi	r20, 0x0A	; 10
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	0e 94 30 21 	call	0x4260	; 0x4260 <itoa>
   LCD_displayString(buff); /* Display the string */
    1cc8:	ce 01       	movw	r24, r28
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
}
    1cd0:	62 96       	adiw	r28, 0x12	; 18
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <LCD_displayintRowColumn>:

void LCD_displayintRowColumn(uint8 row,uint8 col,int data){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	64 97       	sbiw	r28, 0x14	; 20
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	89 8b       	std	Y+17, r24	; 0x11
    1cf8:	6a 8b       	std	Y+18, r22	; 0x12
    1cfa:	5c 8b       	std	Y+20, r21	; 0x14
    1cfc:	4b 8b       	std	Y+19, r20	; 0x13
	 char buff[16]; /* String to hold the ascii result */
	 itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1d00:	9c 89       	ldd	r25, Y+20	; 0x14
    1d02:	9e 01       	movw	r18, r28
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	b9 01       	movw	r22, r18
    1d0a:	4a e0       	ldi	r20, 0x0A	; 10
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 30 21 	call	0x4260	; 0x4260 <itoa>
	 LCD_displayStringRowColumn(row, col, buff) ;
    1d12:	89 89       	ldd	r24, Y+17	; 0x11
    1d14:	6a 89       	ldd	r22, Y+18	; 0x12
    1d16:	9e 01       	movw	r18, r28
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	a9 01       	movw	r20, r18
    1d1e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
}
    1d22:	64 96       	adiw	r28, 0x14	; 20
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <LCD_sendCommand>
}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	60 97       	sbiw	r28, 0x10	; 16
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	63 e0       	ldi	r22, 0x03	; 3
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	65 e0       	ldi	r22, 0x05	; 5
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	66 e0       	ldi	r22, 0x06	; 6
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	67 e0       	ldi	r22, 0x07	; 7
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1dac:	1f 86       	std	Y+15, r1	; 0x0f
    1dae:	ab c0       	rjmp	.+342    	; 0x1f06 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 1a 11 	call	0x2234	; 0x2234 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1dc4:	18 8a       	std	Y+16, r1	; 0x10
    1dc6:	22 c0       	rjmp	.+68     	; 0x1e0c <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1dc8:	88 89       	ldd	r24, Y+16	; 0x10
    1dca:	98 2f       	mov	r25, r24
    1dcc:	9c 5f       	subi	r25, 0xFC	; 252
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	69 2f       	mov	r22, r25
    1dd2:	0e 94 05 12 	call	0x240a	; 0x240a <GPIO_readPin>
    1dd6:	88 23       	and	r24, r24
    1dd8:	b1 f4       	brne	.+44     	; 0x1e06 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	98 2f       	mov	r25, r24
    1dea:	88 89       	ldd	r24, Y+16	; 0x10
    1dec:	89 0f       	add	r24, r25
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1df4:	60 96       	adiw	r28, 0x10	; 16
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e06:	88 89       	ldd	r24, Y+16	; 0x10
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	88 8b       	std	Y+16, r24	; 0x10
    1e0c:	88 89       	ldd	r24, Y+16	; 0x10
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	d8 f2       	brcs	.-74     	; 0x1dc8 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_setupPinDirection>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e2       	ldi	r26, 0x20	; 32
    1e22:	b1 e4       	ldi	r27, 0x41	; 65
    1e24:	8b 87       	std	Y+11, r24	; 0x0b
    1e26:	9c 87       	std	Y+12, r25	; 0x0c
    1e28:	ad 87       	std	Y+13, r26	; 0x0d
    1e2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a ef       	ldi	r20, 0xFA	; 250
    1e3a:	54 e4       	ldi	r21, 0x44	; 68
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8f 83       	std	Y+7, r24	; 0x07
    1e46:	98 87       	std	Y+8, r25	; 0x08
    1e48:	a9 87       	std	Y+9, r26	; 0x09
    1e4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <KEYPAD_getPressedKey+0x186>
    1eb0:	88 ec       	ldi	r24, 0xC8	; 200
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <KEYPAD_getPressedKey+0x174>
    1ec0:	9c 83       	std	Y+4, r25	; 0x04
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <KEYPAD_getPressedKey+0x168>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <KEYPAD_getPressedKey+0x1b0>
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <KEYPAD_getPressedKey+0x1c6>
    1f0c:	51 cf       	rjmp	.-350    	; 0x1db0 <KEYPAD_getPressedKey+0x68>
    1f0e:	4e cf       	rjmp	.-356    	; 0x1dac <KEYPAD_getPressedKey+0x64>

00001f10 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	3c 83       	std	Y+4, r19	; 0x04
    1f28:	2b 83       	std	Y+3, r18	; 0x03
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	88 30       	cpi	r24, 0x08	; 8
    1f30:	91 05       	cpc	r25, r1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f34:	70 c0       	rjmp	.+224    	; 0x2016 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	29 30       	cpi	r18, 0x09	; 9
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	5c f5       	brge	.+86     	; 0x1f96 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f4a:	59 c0       	rjmp	.+178    	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	25 30       	cpi	r18, 0x05	; 5
    1f52:	31 05       	cpc	r19, r1
    1f54:	9c f4       	brge	.+38     	; 0x1f7c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f60:	48 c0       	rjmp	.+144    	; 0x1ff2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f62:	2b 81       	ldd	r18, Y+3	; 0x03
    1f64:	3c 81       	ldd	r19, Y+4	; 0x04
    1f66:	23 30       	cpi	r18, 0x03	; 3
    1f68:	31 05       	cpc	r19, r1
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f6c:	45 c0       	rjmp	.+138    	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f78:	39 c0       	rjmp	.+114    	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f7a:	67 c0       	rjmp	.+206    	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	26 30       	cpi	r18, 0x06	; 6
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f86:	41 c0       	rjmp	.+130    	; 0x200a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	87 30       	cpi	r24, 0x07	; 7
    1f8e:	91 05       	cpc	r25, r1
    1f90:	0c f0       	brlt	.+2      	; 0x1f94 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f92:	3e c0       	rjmp	.+124    	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f94:	37 c0       	rjmp	.+110    	; 0x2004 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f96:	2b 81       	ldd	r18, Y+3	; 0x03
    1f98:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9a:	2c 30       	cpi	r18, 0x0C	; 12
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1fa0:	46 c0       	rjmp	.+140    	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	8d 30       	cpi	r24, 0x0D	; 13
    1fa8:	91 05       	cpc	r25, r1
    1faa:	5c f4       	brge	.+22     	; 0x1fc2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	2a 30       	cpi	r18, 0x0A	; 10
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	b1 f1       	breq	.+108    	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	8b 30       	cpi	r24, 0x0B	; 11
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	a4 f5       	brge	.+104    	; 0x2028 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fc0:	2d c0       	rjmp	.+90     	; 0x201c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	2e 30       	cpi	r18, 0x0E	; 14
    1fc8:	31 05       	cpc	r19, r1
    1fca:	b9 f1       	breq	.+110    	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	8e 30       	cpi	r24, 0x0E	; 14
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	7c f1       	brlt	.+94     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fda:	2f 30       	cpi	r18, 0x0F	; 15
    1fdc:	31 05       	cpc	r19, r1
    1fde:	79 f1       	breq	.+94     	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	80 31       	cpi	r24, 0x10	; 16
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	69 f1       	breq	.+90     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fea:	2f c0       	rjmp	.+94     	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fec:	87 e0       	ldi	r24, 0x07	; 7
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	2e c0       	rjmp	.+92     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ff2:	88 e0       	ldi	r24, 0x08	; 8
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	2b c0       	rjmp	.+86     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ff8:	89 e0       	ldi	r24, 0x09	; 9
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	28 c0       	rjmp	.+80     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ffe:	85 e2       	ldi	r24, 0x25	; 37
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	25 c0       	rjmp	.+74     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	22 c0       	rjmp	.+68     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    200a:	85 e0       	ldi	r24, 0x05	; 5
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	1f c0       	rjmp	.+62     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2010:	86 e0       	ldi	r24, 0x06	; 6
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	1c c0       	rjmp	.+56     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2016:	8a e2       	ldi	r24, 0x2A	; 42
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	19 c0       	rjmp	.+50     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	16 c0       	rjmp	.+44     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	13 c0       	rjmp	.+38     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	10 c0       	rjmp	.+32     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    202e:	8d e2       	ldi	r24, 0x2D	; 45
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	0d c0       	rjmp	.+26     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2034:	8d e0       	ldi	r24, 0x0D	; 13
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	0a c0       	rjmp	.+20     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    203a:	19 82       	std	Y+1, r1	; 0x01
    203c:	08 c0       	rjmp	.+16     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    203e:	8d e3       	ldi	r24, 0x3D	; 61
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	05 c0       	rjmp	.+10     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2044:	8b e2       	ldi	r24, 0x2B	; 43
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	02 c0       	rjmp	.+4      	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    204e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_setupPinDirection+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <GPIO_setupPinDirection+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	6a 83       	std	Y+2, r22	; 0x02
    2070:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	08 f0       	brcs	.+2      	; 0x207a <GPIO_setupPinDirection+0x1c>
    2078:	d5 c0       	rjmp	.+426    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	84 30       	cpi	r24, 0x04	; 4
    207e:	08 f0       	brcs	.+2      	; 0x2082 <GPIO_setupPinDirection+0x24>
    2080:	d1 c0       	rjmp	.+418    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3d 83       	std	Y+5, r19	; 0x05
    208a:	2c 83       	std	Y+4, r18	; 0x04
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <GPIO_setupPinDirection+0x3a>
    2096:	43 c0       	rjmp	.+134    	; 0x211e <GPIO_setupPinDirection+0xc0>
    2098:	2c 81       	ldd	r18, Y+4	; 0x04
    209a:	3d 81       	ldd	r19, Y+5	; 0x05
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	2c f4       	brge	.+10     	; 0x20ac <GPIO_setupPinDirection+0x4e>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <GPIO_setupPinDirection+0x68>
    20aa:	bc c0       	rjmp	.+376    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	3d 81       	ldd	r19, Y+5	; 0x05
    20b0:	22 30       	cpi	r18, 0x02	; 2
    20b2:	31 05       	cpc	r19, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <GPIO_setupPinDirection+0x5a>
    20b6:	5f c0       	rjmp	.+190    	; 0x2176 <GPIO_setupPinDirection+0x118>
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	91 05       	cpc	r25, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <GPIO_setupPinDirection+0x66>
    20c2:	85 c0       	rjmp	.+266    	; 0x21ce <GPIO_setupPinDirection+0x170>
    20c4:	af c0       	rjmp	.+350    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	a1 f4       	brne	.+40     	; 0x20f4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20cc:	aa e3       	ldi	r26, 0x3A	; 58
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ea e3       	ldi	r30, 0x3A	; 58
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	48 2f       	mov	r20, r24
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <GPIO_setupPinDirection+0x8c>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <GPIO_setupPinDirection+0x88>
    20ee:	84 2b       	or	r24, r20
    20f0:	8c 93       	st	X, r24
    20f2:	98 c0       	rjmp	.+304    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    20f4:	aa e3       	ldi	r26, 0x3A	; 58
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ea e3       	ldi	r30, 0x3A	; 58
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <GPIO_setupPinDirection+0xb4>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <GPIO_setupPinDirection+0xb0>
    2116:	80 95       	com	r24
    2118:	84 23       	and	r24, r20
    211a:	8c 93       	st	X, r24
    211c:	83 c0       	rjmp	.+262    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	a1 f4       	brne	.+40     	; 0x214c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2124:	a7 e3       	ldi	r26, 0x37	; 55
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e7 e3       	ldi	r30, 0x37	; 55
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <GPIO_setupPinDirection+0xe4>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <GPIO_setupPinDirection+0xe0>
    2146:	84 2b       	or	r24, r20
    2148:	8c 93       	st	X, r24
    214a:	6c c0       	rjmp	.+216    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    214c:	a7 e3       	ldi	r26, 0x37	; 55
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e7 e3       	ldi	r30, 0x37	; 55
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 2e       	mov	r0, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <GPIO_setupPinDirection+0x10c>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <GPIO_setupPinDirection+0x108>
    216e:	80 95       	com	r24
    2170:	84 23       	and	r24, r20
    2172:	8c 93       	st	X, r24
    2174:	57 c0       	rjmp	.+174    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	a1 f4       	brne	.+40     	; 0x21a4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    217c:	a4 e3       	ldi	r26, 0x34	; 52
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e4 e3       	ldi	r30, 0x34	; 52
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_setupPinDirection+0x13c>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_setupPinDirection+0x138>
    219e:	84 2b       	or	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	40 c0       	rjmp	.+128    	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21a4:	a4 e3       	ldi	r26, 0x34	; 52
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e4 e3       	ldi	r30, 0x34	; 52
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <GPIO_setupPinDirection+0x164>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <GPIO_setupPinDirection+0x160>
    21c6:	80 95       	com	r24
    21c8:	84 23       	and	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	2b c0       	rjmp	.+86     	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	a1 f4       	brne	.+40     	; 0x21fc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21d4:	a1 e3       	ldi	r26, 0x31	; 49
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e1 e3       	ldi	r30, 0x31	; 49
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_setupPinDirection+0x194>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_setupPinDirection+0x190>
    21f6:	84 2b       	or	r24, r20
    21f8:	8c 93       	st	X, r24
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    21fc:	a1 e3       	ldi	r26, 0x31	; 49
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 2e       	mov	r0, r18
    2214:	02 c0       	rjmp	.+4      	; 0x221a <GPIO_setupPinDirection+0x1bc>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	0a 94       	dec	r0
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <GPIO_setupPinDirection+0x1b8>
    221e:	80 95       	com	r24
    2220:	84 23       	and	r24, r20
    2222:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <GPIO_writePin+0x6>
    223a:	00 d0       	rcall	.+0      	; 0x223c <GPIO_writePin+0x8>
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	6a 83       	std	Y+2, r22	; 0x02
    2246:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT){
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	84 30       	cpi	r24, 0x04	; 4
    224c:	08 f0       	brcs	.+2      	; 0x2250 <GPIO_writePin+0x1c>
    224e:	d5 c0       	rjmp	.+426    	; 0x23fa <GPIO_writePin+0x1c6>
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	88 30       	cpi	r24, 0x08	; 8
    2254:	08 f0       	brcs	.+2      	; 0x2258 <GPIO_writePin+0x24>
    2256:	d1 c0       	rjmp	.+418    	; 0x23fa <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else{
		switch(port_num){
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3d 83       	std	Y+5, r19	; 0x05
    2260:	2c 83       	std	Y+4, r18	; 0x04
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <GPIO_writePin+0x3a>
    226c:	43 c0       	rjmp	.+134    	; 0x22f4 <GPIO_writePin+0xc0>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	2c f4       	brge	.+10     	; 0x2282 <GPIO_writePin+0x4e>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	71 f0       	breq	.+28     	; 0x229c <GPIO_writePin+0x68>
    2280:	bc c0       	rjmp	.+376    	; 0x23fa <GPIO_writePin+0x1c6>
    2282:	2c 81       	ldd	r18, Y+4	; 0x04
    2284:	3d 81       	ldd	r19, Y+5	; 0x05
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	09 f4       	brne	.+2      	; 0x228e <GPIO_writePin+0x5a>
    228c:	5f c0       	rjmp	.+190    	; 0x234c <GPIO_writePin+0x118>
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	9d 81       	ldd	r25, Y+5	; 0x05
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <GPIO_writePin+0x66>
    2298:	85 c0       	rjmp	.+266    	; 0x23a4 <GPIO_writePin+0x170>
    229a:	af c0       	rjmp	.+350    	; 0x23fa <GPIO_writePin+0x1c6>
		
		case PORTA_ID:

			if(value == LOGIC_HIGH){
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	a1 f4       	brne	.+40     	; 0x22ca <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    22a2:	ab e3       	ldi	r26, 0x3B	; 59
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <GPIO_writePin+0x8c>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <GPIO_writePin+0x88>
    22c4:	84 2b       	or	r24, r20
    22c6:	8c 93       	st	X, r24
    22c8:	98 c0       	rjmp	.+304    	; 0x23fa <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTA,pin_num);
    22ca:	ab e3       	ldi	r26, 0x3B	; 59
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	eb e3       	ldi	r30, 0x3B	; 59
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	48 2f       	mov	r20, r24
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	02 2e       	mov	r0, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <GPIO_writePin+0xb4>
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	0a 94       	dec	r0
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <GPIO_writePin+0xb0>
    22ec:	80 95       	com	r24
    22ee:	84 23       	and	r24, r20
    22f0:	8c 93       	st	X, r24
    22f2:	83 c0       	rjmp	.+262    	; 0x23fa <GPIO_writePin+0x1c6>
			}
			break;
			
		case PORTB_ID:
		
			if(value == LOGIC_HIGH){
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	a1 f4       	brne	.+40     	; 0x2322 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    22fa:	a8 e3       	ldi	r26, 0x38	; 56
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <GPIO_writePin+0xe4>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <GPIO_writePin+0xe0>
    231c:	84 2b       	or	r24, r20
    231e:	8c 93       	st	X, r24
    2320:	6c c0       	rjmp	.+216    	; 0x23fa <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTB,pin_num);
    2322:	a8 e3       	ldi	r26, 0x38	; 56
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e8 e3       	ldi	r30, 0x38	; 56
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	48 2f       	mov	r20, r24
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 2e       	mov	r0, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <GPIO_writePin+0x10c>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <GPIO_writePin+0x108>
    2344:	80 95       	com	r24
    2346:	84 23       	and	r24, r20
    2348:	8c 93       	st	X, r24
    234a:	57 c0       	rjmp	.+174    	; 0x23fa <GPIO_writePin+0x1c6>
			}
			break;
		
		case PORTC_ID:
		
			if(value == LOGIC_HIGH){
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	a1 f4       	brne	.+40     	; 0x237a <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    2352:	a5 e3       	ldi	r26, 0x35	; 53
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e5 e3       	ldi	r30, 0x35	; 53
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	48 2f       	mov	r20, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <GPIO_writePin+0x13c>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <GPIO_writePin+0x138>
    2374:	84 2b       	or	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	40 c0       	rjmp	.+128    	; 0x23fa <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTC,pin_num);
    237a:	a5 e3       	ldi	r26, 0x35	; 53
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e5 e3       	ldi	r30, 0x35	; 53
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 2e       	mov	r0, r18
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <GPIO_writePin+0x164>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	0a 94       	dec	r0
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <GPIO_writePin+0x160>
    239c:	80 95       	com	r24
    239e:	84 23       	and	r24, r20
    23a0:	8c 93       	st	X, r24
    23a2:	2b c0       	rjmp	.+86     	; 0x23fa <GPIO_writePin+0x1c6>
			}
			break;
			
		case PORTD_ID:
		
			if(value == LOGIC_HIGH){
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	a1 f4       	brne	.+40     	; 0x23d2 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    23aa:	a2 e3       	ldi	r26, 0x32	; 50
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e2 e3       	ldi	r30, 0x32	; 50
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 2e       	mov	r0, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <GPIO_writePin+0x194>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	0a 94       	dec	r0
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <GPIO_writePin+0x190>
    23cc:	84 2b       	or	r24, r20
    23ce:	8c 93       	st	X, r24
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTD,pin_num);
    23d2:	a2 e3       	ldi	r26, 0x32	; 50
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e2 e3       	ldi	r30, 0x32	; 50
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	48 2f       	mov	r20, r24
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 2e       	mov	r0, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <GPIO_writePin+0x1bc>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	0a 94       	dec	r0
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <GPIO_writePin+0x1b8>
    23f4:	80 95       	com	r24
    23f6:	84 23       	and	r24, r20
    23f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <GPIO_readPin+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <GPIO_readPin+0x8>
    2412:	00 d0       	rcall	.+0      	; 0x2414 <GPIO_readPin+0xa>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT){
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	18 f4       	brcc	.+6      	; 0x2428 <GPIO_readPin+0x1e>
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	88 30       	cpi	r24, 0x08	; 8
    2426:	10 f0       	brcs	.+4      	; 0x242c <GPIO_readPin+0x22>
		return 0;
    2428:	1d 82       	std	Y+5, r1	; 0x05
    242a:	82 c0       	rjmp	.+260    	; 0x2530 <GPIO_readPin+0x126>
	}
	else{
		
		switch(port_num){
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	3c 83       	std	Y+4, r19	; 0x04
    2434:	2b 83       	std	Y+3, r18	; 0x03
    2436:	4b 81       	ldd	r20, Y+3	; 0x03
    2438:	5c 81       	ldd	r21, Y+4	; 0x04
    243a:	41 30       	cpi	r20, 0x01	; 1
    243c:	51 05       	cpc	r21, r1
    243e:	79 f1       	breq	.+94     	; 0x249e <GPIO_readPin+0x94>
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	34 f4       	brge	.+12     	; 0x2456 <GPIO_readPin+0x4c>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	21 15       	cp	r18, r1
    2450:	31 05       	cpc	r19, r1
    2452:	69 f0       	breq	.+26     	; 0x246e <GPIO_readPin+0x64>
    2454:	6c c0       	rjmp	.+216    	; 0x252e <GPIO_readPin+0x124>
    2456:	4b 81       	ldd	r20, Y+3	; 0x03
    2458:	5c 81       	ldd	r21, Y+4	; 0x04
    245a:	42 30       	cpi	r20, 0x02	; 2
    245c:	51 05       	cpc	r21, r1
    245e:	b9 f1       	breq	.+110    	; 0x24ce <GPIO_readPin+0xc4>
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	91 05       	cpc	r25, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <GPIO_readPin+0x62>
    246a:	49 c0       	rjmp	.+146    	; 0x24fe <GPIO_readPin+0xf4>
    246c:	60 c0       	rjmp	.+192    	; 0x252e <GPIO_readPin+0x124>
		
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    246e:	e9 e3       	ldi	r30, 0x39	; 57
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <GPIO_readPin+0x7c>
    2482:	55 95       	asr	r21
    2484:	47 95       	ror	r20
    2486:	8a 95       	dec	r24
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <GPIO_readPin+0x78>
    248a:	ca 01       	movw	r24, r20
    248c:	81 70       	andi	r24, 0x01	; 1
    248e:	90 70       	andi	r25, 0x00	; 0
    2490:	88 23       	and	r24, r24
    2492:	19 f0       	breq	.+6      	; 0x249a <GPIO_readPin+0x90>
				return 1;
    2494:	51 e0       	ldi	r21, 0x01	; 1
    2496:	5d 83       	std	Y+5, r21	; 0x05
    2498:	4b c0       	rjmp	.+150    	; 0x2530 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    249a:	1d 82       	std	Y+5, r1	; 0x05
    249c:	49 c0       	rjmp	.+146    	; 0x2530 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    249e:	e6 e3       	ldi	r30, 0x36	; 54
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a9 01       	movw	r20, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <GPIO_readPin+0xac>
    24b2:	55 95       	asr	r21
    24b4:	47 95       	ror	r20
    24b6:	8a 95       	dec	r24
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <GPIO_readPin+0xa8>
    24ba:	ca 01       	movw	r24, r20
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	88 23       	and	r24, r24
    24c2:	19 f0       	breq	.+6      	; 0x24ca <GPIO_readPin+0xc0>
				return 1;
    24c4:	51 e0       	ldi	r21, 0x01	; 1
    24c6:	5d 83       	std	Y+5, r21	; 0x05
    24c8:	33 c0       	rjmp	.+102    	; 0x2530 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    24ca:	1d 82       	std	Y+5, r1	; 0x05
    24cc:	31 c0       	rjmp	.+98     	; 0x2530 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    24ce:	e3 e3       	ldi	r30, 0x33	; 51
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a9 01       	movw	r20, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <GPIO_readPin+0xdc>
    24e2:	55 95       	asr	r21
    24e4:	47 95       	ror	r20
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <GPIO_readPin+0xd8>
    24ea:	ca 01       	movw	r24, r20
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	88 23       	and	r24, r24
    24f2:	19 f0       	breq	.+6      	; 0x24fa <GPIO_readPin+0xf0>
				return 1;
    24f4:	51 e0       	ldi	r21, 0x01	; 1
    24f6:	5d 83       	std	Y+5, r21	; 0x05
    24f8:	1b c0       	rjmp	.+54     	; 0x2530 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    24fa:	1d 82       	std	Y+5, r1	; 0x05
    24fc:	19 c0       	rjmp	.+50     	; 0x2530 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    24fe:	e0 e3       	ldi	r30, 0x30	; 48
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <GPIO_readPin+0x10c>
    2512:	55 95       	asr	r21
    2514:	47 95       	ror	r20
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <GPIO_readPin+0x108>
    251a:	ca 01       	movw	r24, r20
    251c:	81 70       	andi	r24, 0x01	; 1
    251e:	90 70       	andi	r25, 0x00	; 0
    2520:	88 23       	and	r24, r24
    2522:	19 f0       	breq	.+6      	; 0x252a <GPIO_readPin+0x120>
				return 1;
    2524:	51 e0       	ldi	r21, 0x01	; 1
    2526:	5d 83       	std	Y+5, r21	; 0x05
    2528:	03 c0       	rjmp	.+6      	; 0x2530 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    252a:	1d 82       	std	Y+5, r1	; 0x05
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <GPIO_readPin+0x126>
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	8e 81       	ldd	r24, Y+6	; 0x06
    2536:	26 96       	adiw	r28, 0x06	; 6
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <GPIO_setupPortDirection+0x6>
    254e:	00 d0       	rcall	.+0      	; 0x2550 <GPIO_setupPortDirection+0x8>
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	84 30       	cpi	r24, 0x04	; 4
    255c:	90 f5       	brcc	.+100    	; 0x25c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	3c 83       	std	Y+4, r19	; 0x04
    2566:	2b 83       	std	Y+3, r18	; 0x03
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	91 05       	cpc	r25, r1
    2570:	d1 f0       	breq	.+52     	; 0x25a6 <GPIO_setupPortDirection+0x5e>
    2572:	2b 81       	ldd	r18, Y+3	; 0x03
    2574:	3c 81       	ldd	r19, Y+4	; 0x04
    2576:	22 30       	cpi	r18, 0x02	; 2
    2578:	31 05       	cpc	r19, r1
    257a:	2c f4       	brge	.+10     	; 0x2586 <GPIO_setupPortDirection+0x3e>
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	61 f0       	breq	.+24     	; 0x259c <GPIO_setupPortDirection+0x54>
    2584:	1e c0       	rjmp	.+60     	; 0x25c2 <GPIO_setupPortDirection+0x7a>
    2586:	2b 81       	ldd	r18, Y+3	; 0x03
    2588:	3c 81       	ldd	r19, Y+4	; 0x04
    258a:	22 30       	cpi	r18, 0x02	; 2
    258c:	31 05       	cpc	r19, r1
    258e:	81 f0       	breq	.+32     	; 0x25b0 <GPIO_setupPortDirection+0x68>
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	91 05       	cpc	r25, r1
    2598:	81 f0       	breq	.+32     	; 0x25ba <GPIO_setupPortDirection+0x72>
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    259c:	ea e3       	ldi	r30, 0x3A	; 58
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	80 83       	st	Z, r24
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25a6:	e7 e3       	ldi	r30, 0x37	; 55
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	80 83       	st	Z, r24
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25b0:	e4 e3       	ldi	r30, 0x34	; 52
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 83       	st	Z, r24
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25ba:	e1 e3       	ldi	r30, 0x31	; 49
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <GPIO_writePort+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <GPIO_writePort+0x8>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	90 f5       	brcc	.+100    	; 0x264a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}

	else{

		switch(port_num){
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	3c 83       	std	Y+4, r19	; 0x04
    25ee:	2b 83       	std	Y+3, r18	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	91 05       	cpc	r25, r1
    25f8:	d1 f0       	breq	.+52     	; 0x262e <GPIO_writePort+0x5e>
    25fa:	2b 81       	ldd	r18, Y+3	; 0x03
    25fc:	3c 81       	ldd	r19, Y+4	; 0x04
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	31 05       	cpc	r19, r1
    2602:	2c f4       	brge	.+10     	; 0x260e <GPIO_writePort+0x3e>
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	61 f0       	breq	.+24     	; 0x2624 <GPIO_writePort+0x54>
    260c:	1e c0       	rjmp	.+60     	; 0x264a <GPIO_writePort+0x7a>
    260e:	2b 81       	ldd	r18, Y+3	; 0x03
    2610:	3c 81       	ldd	r19, Y+4	; 0x04
    2612:	22 30       	cpi	r18, 0x02	; 2
    2614:	31 05       	cpc	r19, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <GPIO_writePort+0x68>
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	91 05       	cpc	r25, r1
    2620:	81 f0       	breq	.+32     	; 0x2642 <GPIO_writePort+0x72>
    2622:	13 c0       	rjmp	.+38     	; 0x264a <GPIO_writePort+0x7a>

			case PORTA_ID:
				PORTA = value;
    2624:	eb e3       	ldi	r30, 0x3B	; 59
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	80 83       	st	Z, r24
    262c:	0e c0       	rjmp	.+28     	; 0x264a <GPIO_writePort+0x7a>
				break;

			case PORTB_ID:
				PORTB = value;
    262e:	e8 e3       	ldi	r30, 0x38	; 56
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	80 83       	st	Z, r24
    2636:	09 c0       	rjmp	.+18     	; 0x264a <GPIO_writePort+0x7a>
				break;

			case PORTC_ID:
				PORTC = value;
    2638:	e5 e3       	ldi	r30, 0x35	; 53
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	80 83       	st	Z, r24
    2640:	04 c0       	rjmp	.+8      	; 0x264a <GPIO_writePort+0x7a>
				break;

			case PORTD_ID:
				PORTD = value;
    2642:	e2 e3       	ldi	r30, 0x32	; 50
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	80 83       	st	Z, r24
				break;
		}
	}
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <GPIO_readPort+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <GPIO_readPort+0x8>
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS){
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	84 30       	cpi	r24, 0x04	; 4
    266c:	10 f0       	brcs	.+4      	; 0x2672 <GPIO_readPort+0x1a>
		return 0;
    266e:	1c 82       	std	Y+4, r1	; 0x04
    2670:	34 c0       	rjmp	.+104    	; 0x26da <GPIO_readPort+0x82>
	}

	else{

		switch(port_num){
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3b 83       	std	Y+3, r19	; 0x03
    267a:	2a 83       	std	Y+2, r18	; 0x02
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	91 05       	cpc	r25, r1
    2684:	d1 f0       	breq	.+52     	; 0x26ba <GPIO_readPort+0x62>
    2686:	2a 81       	ldd	r18, Y+2	; 0x02
    2688:	3b 81       	ldd	r19, Y+3	; 0x03
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	2c f4       	brge	.+10     	; 0x269a <GPIO_readPort+0x42>
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	9b 81       	ldd	r25, Y+3	; 0x03
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	61 f0       	breq	.+24     	; 0x26b0 <GPIO_readPort+0x58>
    2698:	1f c0       	rjmp	.+62     	; 0x26d8 <GPIO_readPort+0x80>
    269a:	2a 81       	ldd	r18, Y+2	; 0x02
    269c:	3b 81       	ldd	r19, Y+3	; 0x03
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <GPIO_readPort+0x6c>
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	83 30       	cpi	r24, 0x03	; 3
    26aa:	91 05       	cpc	r25, r1
    26ac:	81 f0       	breq	.+32     	; 0x26ce <GPIO_readPort+0x76>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <GPIO_readPort+0x80>

		case PORTA_ID:
			return PINA;
    26b0:	e9 e3       	ldi	r30, 0x39	; 57
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	90 81       	ld	r25, Z
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	10 c0       	rjmp	.+32     	; 0x26da <GPIO_readPort+0x82>

		case PORTB_ID:
			return PINB;
    26ba:	e6 e3       	ldi	r30, 0x36	; 54
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	20 81       	ld	r18, Z
    26c0:	2c 83       	std	Y+4, r18	; 0x04
    26c2:	0b c0       	rjmp	.+22     	; 0x26da <GPIO_readPort+0x82>

		case PORTC_ID:
			return PINC;
    26c4:	e3 e3       	ldi	r30, 0x33	; 51
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	30 81       	ld	r19, Z
    26ca:	3c 83       	std	Y+4, r19	; 0x04
    26cc:	06 c0       	rjmp	.+12     	; 0x26da <GPIO_readPort+0x82>

		case PORTD_ID:
			return PIND;
    26ce:	e0 e3       	ldi	r30, 0x30	; 48
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8c 83       	std	Y+4, r24	; 0x04
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <GPIO_readPort+0x82>
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <GPIO_readPort+0x86>

		}

	}
}
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	9d 83       	std	Y+5, r25	; 0x05
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <Timer1_handler>:
uint8 enter_fails = 0;
uint8 update_fails = 0;
uint8 people_status = 0;

/* Timer interrupt handler */
void Timer1_handler(void) {
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	++counter;  // Increment counter on each timer interrupt
    26f8:	80 91 6d 01 	lds	r24, 0x016D
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	80 93 6d 01 	sts	0x016D, r24
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <main>:

int main() {
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	c8 5f       	subi	r28, 0xF8	; 248
    2716:	d0 40       	sbci	r29, 0x00	; 0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61

	/****************************************** Initializations *****************************************/
	/* Initialize LCD */
	LCD_init();
    2722:	0e 94 50 09 	call	0x12a0	; 0x12a0 <LCD_init>

	/* Configure and initialize UART */
	UART_ConfigType uart_cfg = { UART_8_BIT, UART_PARITY_DISABLED,
			UART_1_STOP_BIT, 9600 };
    2726:	ce 01       	movw	r24, r28
    2728:	8f 51       	subi	r24, 0x1F	; 31
    272a:	9f 4f       	sbci	r25, 0xFF	; 255
    272c:	c1 51       	subi	r28, 0x11	; 17
    272e:	df 4f       	sbci	r29, 0xFF	; 255
    2730:	99 83       	std	Y+1, r25	; 0x01
    2732:	88 83       	st	Y, r24
    2734:	cf 5e       	subi	r28, 0xEF	; 239
    2736:	d0 40       	sbci	r29, 0x00	; 0
    2738:	82 e5       	ldi	r24, 0x52	; 82
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	cf 50       	subi	r28, 0x0F	; 15
    273e:	df 4f       	sbci	r29, 0xFF	; 255
    2740:	99 83       	std	Y+1, r25	; 0x01
    2742:	88 83       	st	Y, r24
    2744:	c1 5f       	subi	r28, 0xF1	; 241
    2746:	d0 40       	sbci	r29, 0x00	; 0
    2748:	97 e0       	ldi	r25, 0x07	; 7
    274a:	cd 50       	subi	r28, 0x0D	; 13
    274c:	df 4f       	sbci	r29, 0xFF	; 255
    274e:	98 83       	st	Y, r25
    2750:	c3 5f       	subi	r28, 0xF3	; 243
    2752:	d0 40       	sbci	r29, 0x00	; 0
    2754:	cf 50       	subi	r28, 0x0F	; 15
    2756:	df 4f       	sbci	r29, 0xFF	; 255
    2758:	e8 81       	ld	r30, Y
    275a:	f9 81       	ldd	r31, Y+1	; 0x01
    275c:	c1 5f       	subi	r28, 0xF1	; 241
    275e:	d0 40       	sbci	r29, 0x00	; 0
    2760:	00 80       	ld	r0, Z
    2762:	cf 50       	subi	r28, 0x0F	; 15
    2764:	df 4f       	sbci	r29, 0xFF	; 255
    2766:	88 81       	ld	r24, Y
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	c1 5f       	subi	r28, 0xF1	; 241
    276c:	d0 40       	sbci	r29, 0x00	; 0
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	cf 50       	subi	r28, 0x0F	; 15
    2772:	df 4f       	sbci	r29, 0xFF	; 255
    2774:	99 83       	std	Y+1, r25	; 0x01
    2776:	88 83       	st	Y, r24
    2778:	c1 5f       	subi	r28, 0xF1	; 241
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	c1 51       	subi	r28, 0x11	; 17
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	e8 81       	ld	r30, Y
    2782:	f9 81       	ldd	r31, Y+1	; 0x01
    2784:	cf 5e       	subi	r28, 0xEF	; 239
    2786:	d0 40       	sbci	r29, 0x00	; 0
    2788:	00 82       	st	Z, r0
    278a:	c1 51       	subi	r28, 0x11	; 17
    278c:	df 4f       	sbci	r29, 0xFF	; 255
    278e:	88 81       	ld	r24, Y
    2790:	99 81       	ldd	r25, Y+1	; 0x01
    2792:	cf 5e       	subi	r28, 0xEF	; 239
    2794:	d0 40       	sbci	r29, 0x00	; 0
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	c1 51       	subi	r28, 0x11	; 17
    279a:	df 4f       	sbci	r29, 0xFF	; 255
    279c:	99 83       	std	Y+1, r25	; 0x01
    279e:	88 83       	st	Y, r24
    27a0:	cf 5e       	subi	r28, 0xEF	; 239
    27a2:	d0 40       	sbci	r29, 0x00	; 0
    27a4:	cd 50       	subi	r28, 0x0D	; 13
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	98 81       	ld	r25, Y
    27aa:	c3 5f       	subi	r28, 0xF3	; 243
    27ac:	d0 40       	sbci	r29, 0x00	; 0
    27ae:	91 50       	subi	r25, 0x01	; 1
    27b0:	cd 50       	subi	r28, 0x0D	; 13
    27b2:	df 4f       	sbci	r29, 0xFF	; 255
    27b4:	98 83       	st	Y, r25
    27b6:	c3 5f       	subi	r28, 0xF3	; 243
    27b8:	d0 40       	sbci	r29, 0x00	; 0
    27ba:	cd 50       	subi	r28, 0x0D	; 13
    27bc:	df 4f       	sbci	r29, 0xFF	; 255
    27be:	e8 81       	ld	r30, Y
    27c0:	c3 5f       	subi	r28, 0xF3	; 243
    27c2:	d0 40       	sbci	r29, 0x00	; 0
    27c4:	ee 23       	and	r30, r30
    27c6:	31 f6       	brne	.-116    	; 0x2754 <main+0x4c>
	UART_init(&uart_cfg);
    27c8:	ce 01       	movw	r24, r28
    27ca:	8f 51       	subi	r24, 0x1F	; 31
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* Initialize Timer1 */
	SREG |= (1<<7);  // Enable global interrupts
    27d2:	af e5       	ldi	r26, 0x5F	; 95
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef e5       	ldi	r30, 0x5F	; 95
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 68       	ori	r24, 0x80	; 128
    27de:	8c 93       	st	X, r24
	Timer_ConfigType time1 = { 0, 31250, TIMER1_ID, TIMER_PRESCALE_256,
			TIMER_COMPARE_MODE };
    27e0:	ce 01       	movw	r24, r28
    27e2:	88 51       	subi	r24, 0x18	; 24
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	cc 50       	subi	r28, 0x0C	; 12
    27e8:	df 4f       	sbci	r29, 0xFF	; 255
    27ea:	99 83       	std	Y+1, r25	; 0x01
    27ec:	88 83       	st	Y, r24
    27ee:	c4 5f       	subi	r28, 0xF4	; 244
    27f0:	d0 40       	sbci	r29, 0x00	; 0
    27f2:	8b e4       	ldi	r24, 0x4B	; 75
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	ca 50       	subi	r28, 0x0A	; 10
    27f8:	df 4f       	sbci	r29, 0xFF	; 255
    27fa:	99 83       	std	Y+1, r25	; 0x01
    27fc:	88 83       	st	Y, r24
    27fe:	c6 5f       	subi	r28, 0xF6	; 246
    2800:	d0 40       	sbci	r29, 0x00	; 0
    2802:	97 e0       	ldi	r25, 0x07	; 7
    2804:	c8 50       	subi	r28, 0x08	; 8
    2806:	df 4f       	sbci	r29, 0xFF	; 255
    2808:	98 83       	st	Y, r25
    280a:	c8 5f       	subi	r28, 0xF8	; 248
    280c:	d0 40       	sbci	r29, 0x00	; 0
    280e:	ca 50       	subi	r28, 0x0A	; 10
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	e8 81       	ld	r30, Y
    2814:	f9 81       	ldd	r31, Y+1	; 0x01
    2816:	c6 5f       	subi	r28, 0xF6	; 246
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	00 80       	ld	r0, Z
    281c:	ca 50       	subi	r28, 0x0A	; 10
    281e:	df 4f       	sbci	r29, 0xFF	; 255
    2820:	88 81       	ld	r24, Y
    2822:	99 81       	ldd	r25, Y+1	; 0x01
    2824:	c6 5f       	subi	r28, 0xF6	; 246
    2826:	d0 40       	sbci	r29, 0x00	; 0
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	ca 50       	subi	r28, 0x0A	; 10
    282c:	df 4f       	sbci	r29, 0xFF	; 255
    282e:	99 83       	std	Y+1, r25	; 0x01
    2830:	88 83       	st	Y, r24
    2832:	c6 5f       	subi	r28, 0xF6	; 246
    2834:	d0 40       	sbci	r29, 0x00	; 0
    2836:	cc 50       	subi	r28, 0x0C	; 12
    2838:	df 4f       	sbci	r29, 0xFF	; 255
    283a:	e8 81       	ld	r30, Y
    283c:	f9 81       	ldd	r31, Y+1	; 0x01
    283e:	c4 5f       	subi	r28, 0xF4	; 244
    2840:	d0 40       	sbci	r29, 0x00	; 0
    2842:	00 82       	st	Z, r0
    2844:	cc 50       	subi	r28, 0x0C	; 12
    2846:	df 4f       	sbci	r29, 0xFF	; 255
    2848:	88 81       	ld	r24, Y
    284a:	99 81       	ldd	r25, Y+1	; 0x01
    284c:	c4 5f       	subi	r28, 0xF4	; 244
    284e:	d0 40       	sbci	r29, 0x00	; 0
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	cc 50       	subi	r28, 0x0C	; 12
    2854:	df 4f       	sbci	r29, 0xFF	; 255
    2856:	99 83       	std	Y+1, r25	; 0x01
    2858:	88 83       	st	Y, r24
    285a:	c4 5f       	subi	r28, 0xF4	; 244
    285c:	d0 40       	sbci	r29, 0x00	; 0
    285e:	c8 50       	subi	r28, 0x08	; 8
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	98 81       	ld	r25, Y
    2864:	c8 5f       	subi	r28, 0xF8	; 248
    2866:	d0 40       	sbci	r29, 0x00	; 0
    2868:	91 50       	subi	r25, 0x01	; 1
    286a:	c8 50       	subi	r28, 0x08	; 8
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	98 83       	st	Y, r25
    2870:	c8 5f       	subi	r28, 0xF8	; 248
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	c8 50       	subi	r28, 0x08	; 8
    2876:	df 4f       	sbci	r29, 0xFF	; 255
    2878:	e8 81       	ld	r30, Y
    287a:	c8 5f       	subi	r28, 0xF8	; 248
    287c:	d0 40       	sbci	r29, 0x00	; 0
    287e:	ee 23       	and	r30, r30
    2880:	31 f6       	brne	.-116    	; 0x280e <main+0x106>
	Timer_init(&time1);
    2882:	ce 01       	movw	r24, r28
    2884:	88 51       	subi	r24, 0x18	; 24
    2886:	9f 4f       	sbci	r25, 0xFF	; 255
    2888:	0e 94 bb 06 	call	0xd76	; 0xd76 <Timer_init>
	Timer_setCallBack(Timer1_handler, TIMER1_ID);
    288c:	88 e7       	ldi	r24, 0x78	; 120
    288e:	93 e1       	ldi	r25, 0x13	; 19
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	0e 94 e5 07 	call	0xfca	; 0xfca <Timer_setCallBack>
    2896:	50 c3       	rjmp	.+1696   	; 0x2f38 <main+0x830>


	/* Prompt user to enter password for the first time */
	while (pass_state != PASS_CORRECT) {
		UART_sendByte(PASS_LOAD);
    2898:	80 ea       	ldi	r24, 0xA0	; 160
    289a:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
		LCD_clearScreen();
    289e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    28a2:	80 e6       	ldi	r24, 0x60	; 96
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
		LCD_moveCursor(1, 0);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <LCD_moveCursor>

		/* Capture and mask password input */
		for (i = 0; i < 5; ++i) {
    28b2:	10 92 6a 01 	sts	0x016A, r1
    28b6:	c6 c0       	rjmp	.+396    	; 0x2a44 <main+0x33c>
			pass[i] = KEYPAD_getPressedKey();
    28b8:	80 91 6a 01 	lds	r24, 0x016A
    28bc:	08 2f       	mov	r16, r24
    28be:	10 e0       	ldi	r17, 0x00	; 0
    28c0:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    28c4:	f8 01       	movw	r30, r16
    28c6:	e0 5a       	subi	r30, 0xA0	; 160
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    28cc:	8a e2       	ldi	r24, 0x2A	; 42
    28ce:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    28d2:	fe 01       	movw	r30, r28
    28d4:	e3 52       	subi	r30, 0x23	; 35
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	aa ef       	ldi	r26, 0xFA	; 250
    28de:	b3 e4       	ldi	r27, 0x43	; 67
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	07 52       	subi	r16, 0x27	; 39
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e3 52       	subi	r30, 0x23	; 35
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	e7 52       	subi	r30, 0x27	; 39
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	44 f4       	brge	.+16     	; 0x2944 <main+0x23c>
		__ticks = 1;
    2934:	fe 01       	movw	r30, r28
    2936:	e9 52       	subi	r30, 0x29	; 41
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <main+0x304>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	e7 52       	subi	r30, 0x27	; 39
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <main+0x25c>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <main+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	fe 01       	movw	r30, r28
    2966:	e3 52       	subi	r30, 0x23	; 35
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8e 01       	movw	r16, r28
    2984:	09 52       	subi	r16, 0x29	; 41
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	1f c0       	rjmp	.+62     	; 0x29da <main+0x2d2>
    299c:	fe 01       	movw	r30, r28
    299e:	eb 52       	subi	r30, 0x2B	; 43
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	88 ec       	ldi	r24, 0xC8	; 200
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	eb 52       	subi	r30, 0x2B	; 43
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0x2ac>
    29b8:	fe 01       	movw	r30, r28
    29ba:	eb 52       	subi	r30, 0x2B	; 43
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	de 01       	movw	r26, r28
    29c4:	a9 52       	subi	r26, 0x29	; 41
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 52       	subi	r30, 0x29	; 41
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	fe 01       	movw	r30, r28
    29dc:	e9 52       	subi	r30, 0x29	; 41
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	d1 f6       	brne	.-76     	; 0x299c <main+0x294>
    29e8:	28 c0       	rjmp	.+80     	; 0x2a3a <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	09 52       	subi	r16, 0x29	; 41
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e7 52       	subi	r30, 0x27	; 39
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	ad 52       	subi	r26, 0x2D	; 45
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e9 52       	subi	r30, 0x29	; 41
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	ed 52       	subi	r30, 0x2D	; 45
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x324>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ed 52       	subi	r30, 0x2D	; 45
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass:");
		LCD_moveCursor(1, 0);

		/* Capture and mask password input */
		for (i = 0; i < 5; ++i) {
    2a3a:	80 91 6a 01 	lds	r24, 0x016A
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	80 93 6a 01 	sts	0x016A, r24
    2a44:	80 91 6a 01 	lds	r24, 0x016A
    2a48:	85 30       	cpi	r24, 0x05	; 5
    2a4a:	08 f4       	brcc	.+2      	; 0x2a4e <main+0x346>
    2a4c:	35 cf       	rjmp	.-406    	; 0x28b8 <main+0x1b0>
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}

		while (KEYPAD_getPressedKey() != '=');  // Wait for enter key
    2a4e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    2a52:	8d 33       	cpi	r24, 0x3D	; 61
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <main+0x346>
    2a56:	fe 01       	movw	r30, r28
    2a58:	e1 53       	subi	r30, 0x31	; 49
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	aa ef       	ldi	r26, 0xFA	; 250
    2a62:	b3 e4       	ldi	r27, 0x43	; 67
    2a64:	80 83       	st	Z, r24
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	a2 83       	std	Z+2, r26	; 0x02
    2a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	8e 01       	movw	r16, r28
    2a6e:	05 53       	subi	r16, 0x35	; 53
    2a70:	1f 4f       	sbci	r17, 0xFF	; 255
    2a72:	fe 01       	movw	r30, r28
    2a74:	e1 53       	subi	r30, 0x31	; 49
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	4a ef       	ldi	r20, 0xFA	; 250
    2a86:	54 e4       	ldi	r21, 0x44	; 68
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	f8 01       	movw	r30, r16
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e5 53       	subi	r30, 0x35	; 53
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	44 f4       	brge	.+16     	; 0x2ac8 <main+0x3c0>
		__ticks = 1;
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e7 53       	subi	r30, 0x37	; 55
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
    2ac6:	64 c0       	rjmp	.+200    	; 0x2b90 <main+0x488>
	else if (__tmp > 65535)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e5 53       	subi	r30, 0x35	; 53
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <main+0x3e0>
    2ae6:	43 c0       	rjmp	.+134    	; 0x2b6e <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e1 53       	subi	r30, 0x31	; 49
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8e 01       	movw	r16, r28
    2b08:	07 53       	subi	r16, 0x37	; 55
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	1f c0       	rjmp	.+62     	; 0x2b5e <main+0x456>
    2b20:	fe 01       	movw	r30, r28
    2b22:	e9 53       	subi	r30, 0x39	; 57
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e9 53       	subi	r30, 0x39	; 57
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <main+0x430>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e9 53       	subi	r30, 0x39	; 57
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	de 01       	movw	r26, r28
    2b48:	a7 53       	subi	r26, 0x37	; 55
    2b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e7 53       	subi	r30, 0x37	; 55
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	9c 93       	st	X, r25
    2b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e7 53       	subi	r30, 0x37	; 55
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	d1 f6       	brne	.-76     	; 0x2b20 <main+0x418>
    2b6c:	27 c0       	rjmp	.+78     	; 0x2bbc <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	8e 01       	movw	r16, r28
    2b70:	07 53       	subi	r16, 0x37	; 55
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	e5 53       	subi	r30, 0x35	; 53
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
    2b90:	de 01       	movw	r26, r28
    2b92:	ab 53       	subi	r26, 0x3B	; 59
    2b94:	bf 4f       	sbci	r27, 0xFF	; 255
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 53       	subi	r30, 0x37	; 55
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	8d 93       	st	X+, r24
    2ba2:	9c 93       	st	X, r25
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	eb 53       	subi	r30, 0x3B	; 59
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0x4a6>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	eb 53       	subi	r30, 0x3B	; 59
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		_delay_ms(500);

		/* Prompt user to re-enter password */
		LCD_clearScreen();
    2bbc:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
    2bc0:	80 e7       	ldi	r24, 0x70	; 112
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
    2bc8:	21 e8       	ldi	r18, 0x81	; 129
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	a9 01       	movw	r20, r18
    2bd2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>

		for (i = 5; i < 10; ++i) {
    2bd6:	85 e0       	ldi	r24, 0x05	; 5
    2bd8:	80 93 6a 01 	sts	0x016A, r24
    2bdc:	c6 c0       	rjmp	.+396    	; 0x2d6a <main+0x662>
			pass[i] = KEYPAD_getPressedKey();
    2bde:	80 91 6a 01 	lds	r24, 0x016A
    2be2:	08 2f       	mov	r16, r24
    2be4:	10 e0       	ldi	r17, 0x00	; 0
    2be6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    2bea:	f8 01       	movw	r30, r16
    2bec:	e0 5a       	subi	r30, 0xA0	; 160
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2bf2:	8a e2       	ldi	r24, 0x2A	; 42
    2bf4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 53       	subi	r30, 0x3F	; 63
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	aa ef       	ldi	r26, 0xFA	; 250
    2c04:	b3 e4       	ldi	r27, 0x43	; 67
    2c06:	80 83       	st	Z, r24
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	a2 83       	std	Z+2, r26	; 0x02
    2c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0e:	8e 01       	movw	r16, r28
    2c10:	03 54       	subi	r16, 0x43	; 67
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	fe 01       	movw	r30, r28
    2c16:	ef 53       	subi	r30, 0x3F	; 63
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	60 81       	ld	r22, Z
    2c1c:	71 81       	ldd	r23, Z+1	; 0x01
    2c1e:	82 81       	ldd	r24, Z+2	; 0x02
    2c20:	93 81       	ldd	r25, Z+3	; 0x03
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	4a ef       	ldi	r20, 0xFA	; 250
    2c28:	54 e4       	ldi	r21, 0x44	; 68
    2c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	f8 01       	movw	r30, r16
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e3 54       	subi	r30, 0x43	; 67
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	44 f4       	brge	.+16     	; 0x2c6a <main+0x562>
		__ticks = 1;
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e5 54       	subi	r30, 0x45	; 69
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	64 c0       	rjmp	.+200    	; 0x2d32 <main+0x62a>
	else if (__tmp > 65535)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e3 54       	subi	r30, 0x43	; 67
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	0c f0       	brlt	.+2      	; 0x2c8a <main+0x582>
    2c88:	43 c0       	rjmp	.+134    	; 0x2d10 <main+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 53       	subi	r30, 0x3F	; 63
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8e 01       	movw	r16, r28
    2caa:	05 54       	subi	r16, 0x45	; 69
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	f8 01       	movw	r30, r16
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	1f c0       	rjmp	.+62     	; 0x2d00 <main+0x5f8>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e7 54       	subi	r30, 0x47	; 71
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	88 ec       	ldi	r24, 0xC8	; 200
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e7 54       	subi	r30, 0x47	; 71
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <main+0x5d2>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e7 54       	subi	r30, 0x47	; 71
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	de 01       	movw	r26, r28
    2cea:	a5 54       	subi	r26, 0x45	; 69
    2cec:	bf 4f       	sbci	r27, 0xFF	; 255
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e5 54       	subi	r30, 0x45	; 69
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	11 96       	adiw	r26, 0x01	; 1
    2cfc:	9c 93       	st	X, r25
    2cfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 54       	subi	r30, 0x45	; 69
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	d1 f6       	brne	.-76     	; 0x2cc2 <main+0x5ba>
    2d0e:	28 c0       	rjmp	.+80     	; 0x2d60 <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	8e 01       	movw	r16, r28
    2d12:	05 54       	subi	r16, 0x45	; 69
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	e3 54       	subi	r30, 0x43	; 67
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	de 01       	movw	r26, r28
    2d34:	a9 54       	subi	r26, 0x49	; 73
    2d36:	bf 4f       	sbci	r27, 0xFF	; 255
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e5 54       	subi	r30, 0x45	; 69
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	9c 93       	st	X, r25
    2d46:	8e 93       	st	-X, r24
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e9 54       	subi	r30, 0x49	; 73
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <main+0x64a>
    2d56:	fe 01       	movw	r30, r28
    2d58:	e9 54       	subi	r30, 0x49	; 73
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
		/* Prompt user to re-enter password */
		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_displayStringRowColumn(1, 0, "same pass: ");

		for (i = 5; i < 10; ++i) {
    2d60:	80 91 6a 01 	lds	r24, 0x016A
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	80 93 6a 01 	sts	0x016A, r24
    2d6a:	80 91 6a 01 	lds	r24, 0x016A
    2d6e:	8a 30       	cpi	r24, 0x0A	; 10
    2d70:	08 f4       	brcc	.+2      	; 0x2d74 <main+0x66c>
    2d72:	35 cf       	rjmp	.-406    	; 0x2bde <main+0x4d6>
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		while (KEYPAD_getPressedKey() != '=');  // Confirm entry
    2d74:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    2d78:	8d 33       	cpi	r24, 0x3D	; 61
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <main+0x66c>
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ed 54       	subi	r30, 0x4D	; 77
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	aa ef       	ldi	r26, 0xFA	; 250
    2d88:	b3 e4       	ldi	r27, 0x43	; 67
    2d8a:	80 83       	st	Z, r24
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	a2 83       	std	Z+2, r26	; 0x02
    2d90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	8e 01       	movw	r16, r28
    2d94:	01 55       	subi	r16, 0x51	; 81
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ed 54       	subi	r30, 0x4D	; 77
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	60 81       	ld	r22, Z
    2da0:	71 81       	ldd	r23, Z+1	; 0x01
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	93 81       	ldd	r25, Z+3	; 0x03
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a ef       	ldi	r20, 0xFA	; 250
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	f8 01       	movw	r30, r16
    2db8:	80 83       	st	Z, r24
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	a2 83       	std	Z+2, r26	; 0x02
    2dbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e1 55       	subi	r30, 0x51	; 81
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	44 f4       	brge	.+16     	; 0x2dee <main+0x6e6>
		__ticks = 1;
    2dde:	fe 01       	movw	r30, r28
    2de0:	e3 55       	subi	r30, 0x53	; 83
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
    2dec:	64 c0       	rjmp	.+200    	; 0x2eb6 <main+0x7ae>
	else if (__tmp > 65535)
    2dee:	fe 01       	movw	r30, r28
    2df0:	e1 55       	subi	r30, 0x51	; 81
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	3f ef       	ldi	r19, 0xFF	; 255
    2e00:	4f e7       	ldi	r20, 0x7F	; 127
    2e02:	57 e4       	ldi	r21, 0x47	; 71
    2e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e08:	18 16       	cp	r1, r24
    2e0a:	0c f0       	brlt	.+2      	; 0x2e0e <main+0x706>
    2e0c:	43 c0       	rjmp	.+134    	; 0x2e94 <main+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ed 54       	subi	r30, 0x4D	; 77
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	8e 01       	movw	r16, r28
    2e2e:	03 55       	subi	r16, 0x53	; 83
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	f8 01       	movw	r30, r16
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
    2e44:	1f c0       	rjmp	.+62     	; 0x2e84 <main+0x77c>
    2e46:	fe 01       	movw	r30, r28
    2e48:	e5 55       	subi	r30, 0x55	; 85
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	80 83       	st	Z, r24
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 55       	subi	r30, 0x55	; 85
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <main+0x756>
    2e62:	fe 01       	movw	r30, r28
    2e64:	e5 55       	subi	r30, 0x55	; 85
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	de 01       	movw	r26, r28
    2e6e:	a3 55       	subi	r26, 0x53	; 83
    2e70:	bf 4f       	sbci	r27, 0xFF	; 255
    2e72:	fe 01       	movw	r30, r28
    2e74:	e3 55       	subi	r30, 0x53	; 83
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	11 96       	adiw	r26, 0x01	; 1
    2e80:	9c 93       	st	X, r25
    2e82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e84:	fe 01       	movw	r30, r28
    2e86:	e3 55       	subi	r30, 0x53	; 83
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	d1 f6       	brne	.-76     	; 0x2e46 <main+0x73e>
    2e92:	28 c0       	rjmp	.+80     	; 0x2ee4 <main+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	8e 01       	movw	r16, r28
    2e96:	03 55       	subi	r16, 0x53	; 83
    2e98:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e1 55       	subi	r30, 0x51	; 81
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
    2eb6:	de 01       	movw	r26, r28
    2eb8:	a7 55       	subi	r26, 0x57	; 87
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e3 55       	subi	r30, 0x53	; 83
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	9c 93       	st	X, r25
    2eca:	8e 93       	st	-X, r24
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e7 55       	subi	r30, 0x57	; 87
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0x7ce>
    2eda:	fe 01       	movw	r30, r28
    2edc:	e7 55       	subi	r30, 0x57	; 87
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
		_delay_ms(500);

		/* Transmit password via UART to Control ECU */
		for (i = 0; i < 10; ++i) {
    2ee4:	10 92 6a 01 	sts	0x016A, r1
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <main+0x800>
			UART_sendByte(pass[i]);
    2eea:	80 91 6a 01 	lds	r24, 0x016A
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e0 5a       	subi	r30, 0xA0	; 160
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
		}
		while (KEYPAD_getPressedKey() != '=');  // Confirm entry
		_delay_ms(500);

		/* Transmit password via UART to Control ECU */
		for (i = 0; i < 10; ++i) {
    2efe:	80 91 6a 01 	lds	r24, 0x016A
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	80 93 6a 01 	sts	0x016A, r24
    2f08:	80 91 6a 01 	lds	r24, 0x016A
    2f0c:	8a 30       	cpi	r24, 0x0A	; 10
    2f0e:	68 f3       	brcs	.-38     	; 0x2eea <main+0x7e2>
			UART_sendByte(pass[i]);
		}

		/* Verify password */
		pass_state = UART_receiveByte();
    2f10:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    2f14:	80 93 6b 01 	sts	0x016B, r24
		if (pass_state == PASS_FAIL) {
    2f18:	80 91 6b 01 	lds	r24, 0x016B
    2f1c:	80 3f       	cpi	r24, 0xF0	; 240
    2f1e:	61 f4       	brne	.+24     	; 0x2f38 <main+0x830>
			LCD_clearScreen();
    2f20:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
			LCD_displayString("PASSWORD WRONG!!");
    2f24:	8d e8       	ldi	r24, 0x8D	; 141
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
			counter = 0;
    2f2c:	10 92 6d 01 	sts	0x016D, r1
			while (counter < 1);  // Delay before retry
    2f30:	80 91 6d 01 	lds	r24, 0x016D
    2f34:	88 23       	and	r24, r24
    2f36:	e1 f3       	breq	.-8      	; 0x2f30 <main+0x828>
	Timer_init(&time1);
	Timer_setCallBack(Timer1_handler, TIMER1_ID);


	/* Prompt user to enter password for the first time */
	while (pass_state != PASS_CORRECT) {
    2f38:	80 91 6b 01 	lds	r24, 0x016B
    2f3c:	80 3c       	cpi	r24, 0xC0	; 192
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <main+0x83a>
    2f40:	ab cc       	rjmp	.-1706   	; 0x2898 <main+0x190>
	}


	while (1) {
		/* Display main menu options */
		LCD_clearScreen();
    2f42:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
		LCD_displayString("+ : OPEN DOOR");
    2f46:	8e e9       	ldi	r24, 0x9E	; 158
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    2f4e:	2c ea       	ldi	r18, 0xAC	; 172
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	60 e0       	ldi	r22, 0x00	; 0
    2f56:	a9 01       	movw	r20, r18
    2f58:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>

		/* Wait for user selection */
		do {
			key = KEYPAD_getPressedKey();
    2f5c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    2f60:	80 93 6c 01 	sts	0x016C, r24
		} while (key != '+' && key != '-');
    2f64:	80 91 6c 01 	lds	r24, 0x016C
    2f68:	8b 32       	cpi	r24, 0x2B	; 43
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <main+0x86c>
    2f6c:	80 91 6c 01 	lds	r24, 0x016C
    2f70:	8d 32       	cpi	r24, 0x2D	; 45
    2f72:	a1 f7       	brne	.-24     	; 0x2f5c <main+0x854>
    2f74:	fe 01       	movw	r30, r28
    2f76:	eb 55       	subi	r30, 0x5B	; 91
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	aa ef       	ldi	r26, 0xFA	; 250
    2f80:	b3 e4       	ldi	r27, 0x43	; 67
    2f82:	80 83       	st	Z, r24
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	a2 83       	std	Z+2, r26	; 0x02
    2f88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8a:	8e 01       	movw	r16, r28
    2f8c:	0f 55       	subi	r16, 0x5F	; 95
    2f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f90:	fe 01       	movw	r30, r28
    2f92:	eb 55       	subi	r30, 0x5B	; 91
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	4a ef       	ldi	r20, 0xFA	; 250
    2fa4:	54 e4       	ldi	r21, 0x44	; 68
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	f8 01       	movw	r30, r16
    2fb0:	80 83       	st	Z, r24
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	a2 83       	std	Z+2, r26	; 0x02
    2fb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ef 55       	subi	r30, 0x5F	; 95
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	44 f4       	brge	.+16     	; 0x2fe6 <main+0x8de>
		__ticks = 1;
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e1 56       	subi	r30, 0x61	; 97
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	80 83       	st	Z, r24
    2fe4:	64 c0       	rjmp	.+200    	; 0x30ae <main+0x9a6>
	else if (__tmp > 65535)
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	ef 55       	subi	r30, 0x5F	; 95
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	0c f0       	brlt	.+2      	; 0x3006 <main+0x8fe>
    3004:	43 c0       	rjmp	.+134    	; 0x308c <main+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	fe 01       	movw	r30, r28
    3008:	eb 55       	subi	r30, 0x5B	; 91
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8e 01       	movw	r16, r28
    3026:	01 56       	subi	r16, 0x61	; 97
    3028:	1f 4f       	sbci	r17, 0xFF	; 255
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	f8 01       	movw	r30, r16
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
    303c:	1f c0       	rjmp	.+62     	; 0x307c <main+0x974>
    303e:	fe 01       	movw	r30, r28
    3040:	e3 56       	subi	r30, 0x63	; 99
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	88 ec       	ldi	r24, 0xC8	; 200
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	fe 01       	movw	r30, r28
    304e:	e3 56       	subi	r30, 0x63	; 99
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <main+0x94e>
    305a:	fe 01       	movw	r30, r28
    305c:	e3 56       	subi	r30, 0x63	; 99
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3064:	de 01       	movw	r26, r28
    3066:	a1 56       	subi	r26, 0x61	; 97
    3068:	bf 4f       	sbci	r27, 0xFF	; 255
    306a:	fe 01       	movw	r30, r28
    306c:	e1 56       	subi	r30, 0x61	; 97
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	11 96       	adiw	r26, 0x01	; 1
    3078:	9c 93       	st	X, r25
    307a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307c:	fe 01       	movw	r30, r28
    307e:	e1 56       	subi	r30, 0x61	; 97
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	d1 f6       	brne	.-76     	; 0x303e <main+0x936>
    308a:	28 c0       	rjmp	.+80     	; 0x30dc <main+0x9d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308c:	8e 01       	movw	r16, r28
    308e:	01 56       	subi	r16, 0x61	; 97
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	fe 01       	movw	r30, r28
    3094:	ef 55       	subi	r30, 0x5F	; 95
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
    30ae:	de 01       	movw	r26, r28
    30b0:	a5 56       	subi	r26, 0x65	; 101
    30b2:	bf 4f       	sbci	r27, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	e1 56       	subi	r30, 0x61	; 97
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	11 96       	adiw	r26, 0x01	; 1
    30c0:	9c 93       	st	X, r25
    30c2:	8e 93       	st	-X, r24
    30c4:	fe 01       	movw	r30, r28
    30c6:	e5 56       	subi	r30, 0x65	; 101
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <main+0x9c6>
    30d2:	fe 01       	movw	r30, r28
    30d4:	e5 56       	subi	r30, 0x65	; 101
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24

		_delay_ms(500);

		/* Process user choice */
		if (key == '+')  // Open Door
    30dc:	80 91 6c 01 	lds	r24, 0x016C
    30e0:	8b 32       	cpi	r24, 0x2B	; 43
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <main+0x9de>
    30e4:	53 c4       	rjmp	.+2214   	; 0x398c <main+0x1284>
		{
			UART_sendByte(PASS_IN);
    30e6:	81 ef       	ldi	r24, 0xF1	; 241
    30e8:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
			LCD_clearScreen();
    30ec:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    30f0:	8c eb       	ldi	r24, 0xBC	; 188
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    30f8:	2a ec       	ldi	r18, 0xCA	; 202
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	a9 01       	movw	r20, r18
    3102:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>

			for (i = 0; i < 5; ++i) {
    3106:	10 92 6a 01 	sts	0x016A, r1
    310a:	c6 c0       	rjmp	.+396    	; 0x3298 <main+0xb90>
				pass[i] = KEYPAD_getPressedKey();
    310c:	80 91 6a 01 	lds	r24, 0x016A
    3110:	08 2f       	mov	r16, r24
    3112:	10 e0       	ldi	r17, 0x00	; 0
    3114:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3118:	f8 01       	movw	r30, r16
    311a:	e0 5a       	subi	r30, 0xA0	; 160
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    3120:	8a e2       	ldi	r24, 0x2A	; 42
    3122:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    3126:	fe 01       	movw	r30, r28
    3128:	e9 56       	subi	r30, 0x69	; 105
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	aa ef       	ldi	r26, 0xFA	; 250
    3132:	b3 e4       	ldi	r27, 0x43	; 67
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	8e 01       	movw	r16, r28
    313e:	0d 56       	subi	r16, 0x6D	; 109
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	e9 56       	subi	r30, 0x69	; 105
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a ef       	ldi	r20, 0xFA	; 250
    3156:	54 e4       	ldi	r21, 0x44	; 68
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	80 83       	st	Z, r24
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	a2 83       	std	Z+2, r26	; 0x02
    3168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316a:	fe 01       	movw	r30, r28
    316c:	ed 56       	subi	r30, 0x6D	; 109
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	44 f4       	brge	.+16     	; 0x3198 <main+0xa90>
		__ticks = 1;
    3188:	fe 01       	movw	r30, r28
    318a:	ef 56       	subi	r30, 0x6F	; 111
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	64 c0       	rjmp	.+200    	; 0x3260 <main+0xb58>
	else if (__tmp > 65535)
    3198:	fe 01       	movw	r30, r28
    319a:	ed 56       	subi	r30, 0x6D	; 109
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	0c f0       	brlt	.+2      	; 0x31b8 <main+0xab0>
    31b6:	43 c0       	rjmp	.+134    	; 0x323e <main+0xb36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b8:	fe 01       	movw	r30, r28
    31ba:	e9 56       	subi	r30, 0x69	; 105
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	60 81       	ld	r22, Z
    31c0:	71 81       	ldd	r23, Z+1	; 0x01
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	8e 01       	movw	r16, r28
    31d8:	0f 56       	subi	r16, 0x6F	; 111
    31da:	1f 4f       	sbci	r17, 0xFF	; 255
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	f8 01       	movw	r30, r16
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	1f c0       	rjmp	.+62     	; 0x322e <main+0xb26>
    31f0:	fe 01       	movw	r30, r28
    31f2:	e1 57       	subi	r30, 0x71	; 113
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	88 ec       	ldi	r24, 0xC8	; 200
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
    31fe:	fe 01       	movw	r30, r28
    3200:	e1 57       	subi	r30, 0x71	; 113
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 81       	ld	r24, Z
    3206:	91 81       	ldd	r25, Z+1	; 0x01
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <main+0xb00>
    320c:	fe 01       	movw	r30, r28
    320e:	e1 57       	subi	r30, 0x71	; 113
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	91 83       	std	Z+1, r25	; 0x01
    3214:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	de 01       	movw	r26, r28
    3218:	af 56       	subi	r26, 0x6F	; 111
    321a:	bf 4f       	sbci	r27, 0xFF	; 255
    321c:	fe 01       	movw	r30, r28
    321e:	ef 56       	subi	r30, 0x6F	; 111
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	91 81       	ldd	r25, Z+1	; 0x01
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	11 96       	adiw	r26, 0x01	; 1
    322a:	9c 93       	st	X, r25
    322c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	fe 01       	movw	r30, r28
    3230:	ef 56       	subi	r30, 0x6F	; 111
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	d1 f6       	brne	.-76     	; 0x31f0 <main+0xae8>
    323c:	28 c0       	rjmp	.+80     	; 0x328e <main+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	8e 01       	movw	r16, r28
    3240:	0f 56       	subi	r16, 0x6F	; 111
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	fe 01       	movw	r30, r28
    3246:	ed 56       	subi	r30, 0x6D	; 109
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	f8 01       	movw	r30, r16
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	de 01       	movw	r26, r28
    3262:	a3 57       	subi	r26, 0x73	; 115
    3264:	bf 4f       	sbci	r27, 0xFF	; 255
    3266:	fe 01       	movw	r30, r28
    3268:	ef 56       	subi	r30, 0x6F	; 111
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	11 96       	adiw	r26, 0x01	; 1
    3272:	9c 93       	st	X, r25
    3274:	8e 93       	st	-X, r24
    3276:	fe 01       	movw	r30, r28
    3278:	e3 57       	subi	r30, 0x73	; 115
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <main+0xb78>
    3284:	fe 01       	movw	r30, r28
    3286:	e3 57       	subi	r30, 0x73	; 115
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
			UART_sendByte(PASS_IN);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");

			for (i = 0; i < 5; ++i) {
    328e:	80 91 6a 01 	lds	r24, 0x016A
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	80 93 6a 01 	sts	0x016A, r24
    3298:	80 91 6a 01 	lds	r24, 0x016A
    329c:	85 30       	cpi	r24, 0x05	; 5
    329e:	08 f4       	brcc	.+2      	; 0x32a2 <main+0xb9a>
    32a0:	35 cf       	rjmp	.-406    	; 0x310c <main+0xa04>
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while (KEYPAD_getPressedKey() != '=');
    32a2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    32a6:	8d 33       	cpi	r24, 0x3D	; 61
    32a8:	e1 f7       	brne	.-8      	; 0x32a2 <main+0xb9a>
    32aa:	fe 01       	movw	r30, r28
    32ac:	e7 57       	subi	r30, 0x77	; 119
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	aa ef       	ldi	r26, 0xFA	; 250
    32b6:	b3 e4       	ldi	r27, 0x43	; 67
    32b8:	80 83       	st	Z, r24
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	a2 83       	std	Z+2, r26	; 0x02
    32be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c0:	8e 01       	movw	r16, r28
    32c2:	0b 57       	subi	r16, 0x7B	; 123
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	fe 01       	movw	r30, r28
    32c8:	e7 57       	subi	r30, 0x77	; 119
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	60 81       	ld	r22, Z
    32ce:	71 81       	ldd	r23, Z+1	; 0x01
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	93 81       	ldd	r25, Z+3	; 0x03
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	4a ef       	ldi	r20, 0xFA	; 250
    32da:	54 e4       	ldi	r21, 0x44	; 68
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	f8 01       	movw	r30, r16
    32e6:	80 83       	st	Z, r24
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	a2 83       	std	Z+2, r26	; 0x02
    32ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ee:	fe 01       	movw	r30, r28
    32f0:	eb 57       	subi	r30, 0x7B	; 123
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3308:	88 23       	and	r24, r24
    330a:	44 f4       	brge	.+16     	; 0x331c <main+0xc14>
		__ticks = 1;
    330c:	fe 01       	movw	r30, r28
    330e:	ed 57       	subi	r30, 0x7D	; 125
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	80 83       	st	Z, r24
    331a:	64 c0       	rjmp	.+200    	; 0x33e4 <main+0xcdc>
	else if (__tmp > 65535)
    331c:	fe 01       	movw	r30, r28
    331e:	eb 57       	subi	r30, 0x7B	; 123
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	3f ef       	ldi	r19, 0xFF	; 255
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	57 e4       	ldi	r21, 0x47	; 71
    3332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3336:	18 16       	cp	r1, r24
    3338:	0c f0       	brlt	.+2      	; 0x333c <main+0xc34>
    333a:	43 c0       	rjmp	.+134    	; 0x33c2 <main+0xcba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	fe 01       	movw	r30, r28
    333e:	e7 57       	subi	r30, 0x77	; 119
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	8e 01       	movw	r16, r28
    335c:	0d 57       	subi	r16, 0x7D	; 125
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	f8 01       	movw	r30, r16
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
    3372:	1f c0       	rjmp	.+62     	; 0x33b2 <main+0xcaa>
    3374:	fe 01       	movw	r30, r28
    3376:	ef 57       	subi	r30, 0x7F	; 127
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	88 ec       	ldi	r24, 0xC8	; 200
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	fe 01       	movw	r30, r28
    3384:	ef 57       	subi	r30, 0x7F	; 127
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <main+0xc84>
    3390:	fe 01       	movw	r30, r28
    3392:	ef 57       	subi	r30, 0x7F	; 127
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339a:	de 01       	movw	r26, r28
    339c:	ad 57       	subi	r26, 0x7D	; 125
    339e:	bf 4f       	sbci	r27, 0xFF	; 255
    33a0:	fe 01       	movw	r30, r28
    33a2:	ed 57       	subi	r30, 0x7D	; 125
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	11 96       	adiw	r26, 0x01	; 1
    33ae:	9c 93       	st	X, r25
    33b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b2:	fe 01       	movw	r30, r28
    33b4:	ed 57       	subi	r30, 0x7D	; 125
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	80 81       	ld	r24, Z
    33ba:	91 81       	ldd	r25, Z+1	; 0x01
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	d1 f6       	brne	.-76     	; 0x3374 <main+0xc6c>
    33c0:	28 c0       	rjmp	.+80     	; 0x3412 <main+0xd0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	8e 01       	movw	r16, r28
    33c4:	0d 57       	subi	r16, 0x7D	; 125
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	fe 01       	movw	r30, r28
    33ca:	eb 57       	subi	r30, 0x7B	; 123
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	f8 01       	movw	r30, r16
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
    33e4:	de 01       	movw	r26, r28
    33e6:	a1 58       	subi	r26, 0x81	; 129
    33e8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ea:	fe 01       	movw	r30, r28
    33ec:	ed 57       	subi	r30, 0x7D	; 125
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	11 96       	adiw	r26, 0x01	; 1
    33f6:	9c 93       	st	X, r25
    33f8:	8e 93       	st	-X, r24
    33fa:	fe 01       	movw	r30, r28
    33fc:	e1 58       	subi	r30, 0x81	; 129
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <main+0xcfc>
    3408:	fe 01       	movw	r30, r28
    340a:	e1 58       	subi	r30, 0x81	; 129
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
			_delay_ms(500);

			/* Transmit password */
			for (i = 0; i < 5; ++i) {
    3412:	10 92 6a 01 	sts	0x016A, r1
    3416:	c3 c0       	rjmp	.+390    	; 0x359e <main+0xe96>
				UART_sendByte(pass[i]);
    3418:	80 91 6a 01 	lds	r24, 0x016A
    341c:	88 2f       	mov	r24, r24
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	fc 01       	movw	r30, r24
    3422:	e0 5a       	subi	r30, 0xA0	; 160
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	80 81       	ld	r24, Z
    3428:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    342c:	fe 01       	movw	r30, r28
    342e:	e5 58       	subi	r30, 0x85	; 133
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	a0 e2       	ldi	r26, 0x20	; 32
    3438:	b1 e4       	ldi	r27, 0x41	; 65
    343a:	80 83       	st	Z, r24
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	a2 83       	std	Z+2, r26	; 0x02
    3440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3442:	8e 01       	movw	r16, r28
    3444:	09 58       	subi	r16, 0x89	; 137
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e5 58       	subi	r30, 0x85	; 133
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a ef       	ldi	r20, 0xFA	; 250
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	f8 01       	movw	r30, r16
    3468:	80 83       	st	Z, r24
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	a2 83       	std	Z+2, r26	; 0x02
    346e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3470:	fe 01       	movw	r30, r28
    3472:	e9 58       	subi	r30, 0x89	; 137
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e8       	ldi	r20, 0x80	; 128
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    348a:	88 23       	and	r24, r24
    348c:	44 f4       	brge	.+16     	; 0x349e <main+0xd96>
		__ticks = 1;
    348e:	fe 01       	movw	r30, r28
    3490:	eb 58       	subi	r30, 0x8B	; 139
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	64 c0       	rjmp	.+200    	; 0x3566 <main+0xe5e>
	else if (__tmp > 65535)
    349e:	fe 01       	movw	r30, r28
    34a0:	e9 58       	subi	r30, 0x89	; 137
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	4f e7       	ldi	r20, 0x7F	; 127
    34b2:	57 e4       	ldi	r21, 0x47	; 71
    34b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b8:	18 16       	cp	r1, r24
    34ba:	0c f0       	brlt	.+2      	; 0x34be <main+0xdb6>
    34bc:	43 c0       	rjmp	.+134    	; 0x3544 <main+0xe3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	fe 01       	movw	r30, r28
    34c0:	e5 58       	subi	r30, 0x85	; 133
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e2       	ldi	r20, 0x20	; 32
    34d2:	51 e4       	ldi	r21, 0x41	; 65
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	8e 01       	movw	r16, r28
    34de:	0b 58       	subi	r16, 0x8B	; 139
    34e0:	1f 4f       	sbci	r17, 0xFF	; 255
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	f8 01       	movw	r30, r16
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	1f c0       	rjmp	.+62     	; 0x3534 <main+0xe2c>
    34f6:	fe 01       	movw	r30, r28
    34f8:	ed 58       	subi	r30, 0x8D	; 141
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	88 ec       	ldi	r24, 0xC8	; 200
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
    3504:	fe 01       	movw	r30, r28
    3506:	ed 58       	subi	r30, 0x8D	; 141
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0xe06>
    3512:	fe 01       	movw	r30, r28
    3514:	ed 58       	subi	r30, 0x8D	; 141
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351c:	de 01       	movw	r26, r28
    351e:	ab 58       	subi	r26, 0x8B	; 139
    3520:	bf 4f       	sbci	r27, 0xFF	; 255
    3522:	fe 01       	movw	r30, r28
    3524:	eb 58       	subi	r30, 0x8B	; 139
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	11 96       	adiw	r26, 0x01	; 1
    3530:	9c 93       	st	X, r25
    3532:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3534:	fe 01       	movw	r30, r28
    3536:	eb 58       	subi	r30, 0x8B	; 139
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	d1 f6       	brne	.-76     	; 0x34f6 <main+0xdee>
    3542:	28 c0       	rjmp	.+80     	; 0x3594 <main+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3544:	8e 01       	movw	r16, r28
    3546:	0b 58       	subi	r16, 0x8B	; 139
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	e9 58       	subi	r30, 0x89	; 137
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	f8 01       	movw	r30, r16
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	de 01       	movw	r26, r28
    3568:	af 58       	subi	r26, 0x8F	; 143
    356a:	bf 4f       	sbci	r27, 0xFF	; 255
    356c:	fe 01       	movw	r30, r28
    356e:	eb 58       	subi	r30, 0x8B	; 139
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	11 96       	adiw	r26, 0x01	; 1
    3578:	9c 93       	st	X, r25
    357a:	8e 93       	st	-X, r24
    357c:	fe 01       	movw	r30, r28
    357e:	ef 58       	subi	r30, 0x8F	; 143
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <main+0xe7e>
    358a:	fe 01       	movw	r30, r28
    358c:	ef 58       	subi	r30, 0x8F	; 143
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
			}
			while (KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* Transmit password */
			for (i = 0; i < 5; ++i) {
    3594:	80 91 6a 01 	lds	r24, 0x016A
    3598:	8f 5f       	subi	r24, 0xFF	; 255
    359a:	80 93 6a 01 	sts	0x016A, r24
    359e:	80 91 6a 01 	lds	r24, 0x016A
    35a2:	85 30       	cpi	r24, 0x05	; 5
    35a4:	08 f4       	brcc	.+2      	; 0x35a8 <main+0xea0>
    35a6:	38 cf       	rjmp	.-400    	; 0x3418 <main+0xd10>
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 59       	subi	r30, 0x93	; 147
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a8 ec       	ldi	r26, 0xC8	; 200
    35b4:	b2 e4       	ldi	r27, 0x42	; 66
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	a2 83       	std	Z+2, r26	; 0x02
    35bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35be:	8e 01       	movw	r16, r28
    35c0:	07 59       	subi	r16, 0x97	; 151
    35c2:	1f 4f       	sbci	r17, 0xFF	; 255
    35c4:	fe 01       	movw	r30, r28
    35c6:	e3 59       	subi	r30, 0x93	; 147
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	60 81       	ld	r22, Z
    35cc:	71 81       	ldd	r23, Z+1	; 0x01
    35ce:	82 81       	ldd	r24, Z+2	; 0x02
    35d0:	93 81       	ldd	r25, Z+3	; 0x03
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	4a ef       	ldi	r20, 0xFA	; 250
    35d8:	54 e4       	ldi	r21, 0x44	; 68
    35da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	f8 01       	movw	r30, r16
    35e4:	80 83       	st	Z, r24
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	a2 83       	std	Z+2, r26	; 0x02
    35ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ec:	fe 01       	movw	r30, r28
    35ee:	e7 59       	subi	r30, 0x97	; 151
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	44 f4       	brge	.+16     	; 0x361a <main+0xf12>
		__ticks = 1;
    360a:	fe 01       	movw	r30, r28
    360c:	e9 59       	subi	r30, 0x99	; 153
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    3618:	64 c0       	rjmp	.+200    	; 0x36e2 <main+0xfda>
	else if (__tmp > 65535)
    361a:	fe 01       	movw	r30, r28
    361c:	e7 59       	subi	r30, 0x97	; 151
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	0c f0       	brlt	.+2      	; 0x363a <main+0xf32>
    3638:	43 c0       	rjmp	.+134    	; 0x36c0 <main+0xfb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363a:	fe 01       	movw	r30, r28
    363c:	e3 59       	subi	r30, 0x93	; 147
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e2       	ldi	r20, 0x20	; 32
    364e:	51 e4       	ldi	r21, 0x41	; 65
    3650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	8e 01       	movw	r16, r28
    365a:	09 59       	subi	r16, 0x99	; 153
    365c:	1f 4f       	sbci	r17, 0xFF	; 255
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	f8 01       	movw	r30, r16
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	1f c0       	rjmp	.+62     	; 0x36b0 <main+0xfa8>
    3672:	fe 01       	movw	r30, r28
    3674:	eb 59       	subi	r30, 0x9B	; 155
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	88 ec       	ldi	r24, 0xC8	; 200
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	80 83       	st	Z, r24
    3680:	fe 01       	movw	r30, r28
    3682:	eb 59       	subi	r30, 0x9B	; 155
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	80 81       	ld	r24, Z
    3688:	91 81       	ldd	r25, Z+1	; 0x01
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <main+0xf82>
    368e:	fe 01       	movw	r30, r28
    3690:	eb 59       	subi	r30, 0x9B	; 155
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	de 01       	movw	r26, r28
    369a:	a9 59       	subi	r26, 0x99	; 153
    369c:	bf 4f       	sbci	r27, 0xFF	; 255
    369e:	fe 01       	movw	r30, r28
    36a0:	e9 59       	subi	r30, 0x99	; 153
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 81       	ld	r24, Z
    36a6:	91 81       	ldd	r25, Z+1	; 0x01
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	11 96       	adiw	r26, 0x01	; 1
    36ac:	9c 93       	st	X, r25
    36ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	fe 01       	movw	r30, r28
    36b2:	e9 59       	subi	r30, 0x99	; 153
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	d1 f6       	brne	.-76     	; 0x3672 <main+0xf6a>
    36be:	27 c0       	rjmp	.+78     	; 0x370e <main+0x1006>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c0:	8e 01       	movw	r16, r28
    36c2:	09 59       	subi	r16, 0x99	; 153
    36c4:	1f 4f       	sbci	r17, 0xFF	; 255
    36c6:	fe 01       	movw	r30, r28
    36c8:	e7 59       	subi	r30, 0x97	; 151
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	60 81       	ld	r22, Z
    36ce:	71 81       	ldd	r23, Z+1	; 0x01
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	93 81       	ldd	r25, Z+3	; 0x03
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	f8 01       	movw	r30, r16
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
    36e2:	de 01       	movw	r26, r28
    36e4:	ad 59       	subi	r26, 0x9D	; 157
    36e6:	bf 4f       	sbci	r27, 0xFF	; 255
    36e8:	fe 01       	movw	r30, r28
    36ea:	e9 59       	subi	r30, 0x99	; 153
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	80 81       	ld	r24, Z
    36f0:	91 81       	ldd	r25, Z+1	; 0x01
    36f2:	8d 93       	st	X+, r24
    36f4:	9c 93       	st	X, r25
    36f6:	fe 01       	movw	r30, r28
    36f8:	ed 59       	subi	r30, 0x9D	; 157
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <main+0xff8>
    3704:	fe 01       	movw	r30, r28
    3706:	ed 59       	subi	r30, 0x9D	; 157
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	80 83       	st	Z, r24
				_delay_ms(10);
			}
			_delay_ms(100);

			/* Receive validation status */
			pass_state = UART_receiveByte();
    370e:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    3712:	80 93 6b 01 	sts	0x016B, r24

			if (pass_state == PASS_CORRECT) {
    3716:	80 91 6b 01 	lds	r24, 0x016B
    371a:	80 3c       	cpi	r24, 0xC0	; 192
    371c:	09 f0       	breq	.+2      	; 0x3720 <main+0x1018>
    371e:	ff c0       	rjmp	.+510    	; 0x391e <main+0x1216>
				enter_fails = 0;
    3720:	10 92 6e 01 	sts	0x016E, r1
				LCD_clearScreen();
    3724:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    3728:	21 ed       	ldi	r18, 0xD1	; 209
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	a9 01       	movw	r20, r18
    3732:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 3, "Please Wait");
    3736:	20 ee       	ldi	r18, 0xE0	; 224
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	63 e0       	ldi	r22, 0x03	; 3
    373e:	a9 01       	movw	r20, r18
    3740:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
				counter = 0;
    3744:	10 92 6d 01 	sts	0x016D, r1
				while (counter < 5);  // Allow 15 seconds for entry
    3748:	80 91 6d 01 	lds	r24, 0x016D
    374c:	85 30       	cpi	r24, 0x05	; 5
    374e:	e0 f3       	brcs	.-8      	; 0x3748 <main+0x1040>
    3750:	fe 01       	movw	r30, r28
    3752:	e1 5a       	subi	r30, 0xA1	; 161
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	aa ef       	ldi	r26, 0xFA	; 250
    375c:	b3 e4       	ldi	r27, 0x43	; 67
    375e:	80 83       	st	Z, r24
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	a2 83       	std	Z+2, r26	; 0x02
    3764:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3766:	8e 01       	movw	r16, r28
    3768:	05 5a       	subi	r16, 0xA5	; 165
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	fe 01       	movw	r30, r28
    376e:	e1 5a       	subi	r30, 0xA1	; 161
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a ef       	ldi	r20, 0xFA	; 250
    3780:	54 e4       	ldi	r21, 0x44	; 68
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	f8 01       	movw	r30, r16
    378c:	80 83       	st	Z, r24
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	a2 83       	std	Z+2, r26	; 0x02
    3792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3794:	fe 01       	movw	r30, r28
    3796:	e5 5a       	subi	r30, 0xA5	; 165
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	44 f4       	brge	.+16     	; 0x37c2 <main+0x10ba>
		__ticks = 1;
    37b2:	fe 01       	movw	r30, r28
    37b4:	e7 5a       	subi	r30, 0xA7	; 167
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
    37c0:	64 c0       	rjmp	.+200    	; 0x388a <main+0x1182>
	else if (__tmp > 65535)
    37c2:	fe 01       	movw	r30, r28
    37c4:	e5 5a       	subi	r30, 0xA5	; 165
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	60 81       	ld	r22, Z
    37ca:	71 81       	ldd	r23, Z+1	; 0x01
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	93 81       	ldd	r25, Z+3	; 0x03
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	3f ef       	ldi	r19, 0xFF	; 255
    37d4:	4f e7       	ldi	r20, 0x7F	; 127
    37d6:	57 e4       	ldi	r21, 0x47	; 71
    37d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37dc:	18 16       	cp	r1, r24
    37de:	0c f0       	brlt	.+2      	; 0x37e2 <main+0x10da>
    37e0:	43 c0       	rjmp	.+134    	; 0x3868 <main+0x1160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	fe 01       	movw	r30, r28
    37e4:	e1 5a       	subi	r30, 0xA1	; 161
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	51 e4       	ldi	r21, 0x41	; 65
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8e 01       	movw	r16, r28
    3802:	07 5a       	subi	r16, 0xA7	; 167
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	f8 01       	movw	r30, r16
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	1f c0       	rjmp	.+62     	; 0x3858 <main+0x1150>
    381a:	fe 01       	movw	r30, r28
    381c:	e9 5a       	subi	r30, 0xA9	; 169
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	88 ec       	ldi	r24, 0xC8	; 200
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	fe 01       	movw	r30, r28
    382a:	e9 5a       	subi	r30, 0xA9	; 169
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <main+0x112a>
    3836:	fe 01       	movw	r30, r28
    3838:	e9 5a       	subi	r30, 0xA9	; 169
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	de 01       	movw	r26, r28
    3842:	a7 5a       	subi	r26, 0xA7	; 167
    3844:	bf 4f       	sbci	r27, 0xFF	; 255
    3846:	fe 01       	movw	r30, r28
    3848:	e7 5a       	subi	r30, 0xA7	; 167
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	11 96       	adiw	r26, 0x01	; 1
    3854:	9c 93       	st	X, r25
    3856:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	fe 01       	movw	r30, r28
    385a:	e7 5a       	subi	r30, 0xA7	; 167
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	d1 f6       	brne	.-76     	; 0x381a <main+0x1112>
    3866:	27 c0       	rjmp	.+78     	; 0x38b6 <main+0x11ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3868:	8e 01       	movw	r16, r28
    386a:	07 5a       	subi	r16, 0xA7	; 167
    386c:	1f 4f       	sbci	r17, 0xFF	; 255
    386e:	fe 01       	movw	r30, r28
    3870:	e5 5a       	subi	r30, 0xA5	; 165
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	60 81       	ld	r22, Z
    3876:	71 81       	ldd	r23, Z+1	; 0x01
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	93 81       	ldd	r25, Z+3	; 0x03
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	f8 01       	movw	r30, r16
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
    388a:	de 01       	movw	r26, r28
    388c:	ab 5a       	subi	r26, 0xAB	; 171
    388e:	bf 4f       	sbci	r27, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	e7 5a       	subi	r30, 0xA7	; 167
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	8d 93       	st	X+, r24
    389c:	9c 93       	st	X, r25
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 5a       	subi	r30, 0xAB	; 171
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <main+0x11a0>
    38ac:	fe 01       	movw	r30, r28
    38ae:	eb 5a       	subi	r30, 0xAB	; 171
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
				_delay_ms(500);

				/* Check for people entering */
				people_status = UART_receiveByte();
    38b6:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    38ba:	80 93 70 01 	sts	0x0170, r24
				LCD_clearScreen();
    38be:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
				if (people_status == PEOPLE_IN) {
    38c2:	80 91 70 01 	lds	r24, 0x0170
    38c6:	80 3b       	cpi	r24, 0xB0	; 176
    38c8:	71 f4       	brne	.+28     	; 0x38e6 <main+0x11de>
					LCD_displayStringRowColumn(0, 0, "Wait for People");
    38ca:	2c ee       	ldi	r18, 0xEC	; 236
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	a9 01       	movw	r20, r18
    38d4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 3, "to Enter");
    38d8:	2c ef       	ldi	r18, 0xFC	; 252
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	63 e0       	ldi	r22, 0x03	; 3
    38e0:	a9 01       	movw	r20, r18
    38e2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
				}
				people_status = UART_receiveByte();
    38e6:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    38ea:	80 93 70 01 	sts	0x0170, r24
				if (people_status == PEOPLE_NO) {
    38ee:	80 91 70 01 	lds	r24, 0x0170
    38f2:	80 3d       	cpi	r24, 0xD0	; 208
    38f4:	79 f4       	brne	.+30     	; 0x3914 <main+0x120c>
					LCD_clearScreen();
    38f6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 2, "Door Locking");
    38fa:	25 e0       	ldi	r18, 0x05	; 5
    38fc:	31 e0       	ldi	r19, 0x01	; 1
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	62 e0       	ldi	r22, 0x02	; 2
    3902:	a9 01       	movw	r20, r18
    3904:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					counter = 0;
    3908:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 5);  // Allow time for people to exit
    390c:	80 91 6d 01 	lds	r24, 0x016D
    3910:	85 30       	cpi	r24, 0x05	; 5
    3912:	e0 f3       	brcs	.-8      	; 0x390c <main+0x1204>
				}
				people_status = UART_receiveByte();
    3914:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    3918:	80 93 70 01 	sts	0x0170, r24
    391c:	12 cb       	rjmp	.-2524   	; 0x2f42 <main+0x83a>
			} else if (pass_state == PASS_FAIL) {
    391e:	80 91 6b 01 	lds	r24, 0x016B
    3922:	80 3f       	cpi	r24, 0xF0	; 240
    3924:	09 f0       	breq	.+2      	; 0x3928 <main+0x1220>
    3926:	0d cb       	rjmp	.-2534   	; 0x2f42 <main+0x83a>
				++enter_fails;
    3928:	80 91 6e 01 	lds	r24, 0x016E
    392c:	8f 5f       	subi	r24, 0xFF	; 255
    392e:	80 93 6e 01 	sts	0x016E, r24
				if (enter_fails == 3) {
    3932:	80 91 6e 01 	lds	r24, 0x016E
    3936:	83 30       	cpi	r24, 0x03	; 3
    3938:	e1 f4       	brne	.+56     	; 0x3972 <main+0x126a>
					/* Lock system for 1 minute */
					UART_sendByte(ALARM_ON);
    393a:	82 ef       	ldi	r24, 0xF2	; 242
    393c:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
					LCD_clearScreen();
    3940:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    3944:	22 e1       	ldi	r18, 0x12	; 18
    3946:	31 e0       	ldi	r19, 0x01	; 1
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	61 e0       	ldi	r22, 0x01	; 1
    394c:	a9 01       	movw	r20, r18
    394e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    3952:	20 e2       	ldi	r18, 0x20	; 32
    3954:	31 e0       	ldi	r19, 0x01	; 1
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	60 e0       	ldi	r22, 0x00	; 0
    395a:	a9 01       	movw	r20, r18
    395c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					counter = 0;
    3960:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 60);  // 1-minute delay
    3964:	80 91 6d 01 	lds	r24, 0x016D
    3968:	8c 33       	cpi	r24, 0x3C	; 60
    396a:	e0 f3       	brcs	.-8      	; 0x3964 <main+0x125c>
					enter_fails = 0;
    396c:	10 92 6e 01 	sts	0x016E, r1
    3970:	e8 ca       	rjmp	.-2608   	; 0x2f42 <main+0x83a>
				} else {
					/* Incorrect password */
					LCD_clearScreen();
    3972:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayString("PASSWORD WRONG!!");
    3976:	8d e8       	ldi	r24, 0x8D	; 141
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
					counter = 0;
    397e:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 1);
    3982:	80 91 6d 01 	lds	r24, 0x016D
    3986:	88 23       	and	r24, r24
    3988:	e1 f3       	breq	.-8      	; 0x3982 <main+0x127a>
    398a:	db ca       	rjmp	.-2634   	; 0x2f42 <main+0x83a>
				}
			}
		} else if (key == '-')  // Change Password
    398c:	80 91 6c 01 	lds	r24, 0x016C
    3990:	8d 32       	cpi	r24, 0x2D	; 45
    3992:	09 f0       	breq	.+2      	; 0x3996 <main+0x128e>
    3994:	d6 ca       	rjmp	.-2644   	; 0x2f42 <main+0x83a>
		{
			UART_sendByte(PASS_UPDATE);
    3996:	80 ee       	ldi	r24, 0xE0	; 224
    3998:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
			LCD_clearScreen();
    399c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    39a0:	8c eb       	ldi	r24, 0xBC	; 188
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    39a8:	2a ec       	ldi	r18, 0xCA	; 202
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	a9 01       	movw	r20, r18
    39b2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>

			for (i = 0; i < 5; ++i) {
    39b6:	10 92 6a 01 	sts	0x016A, r1
    39ba:	c6 c0       	rjmp	.+396    	; 0x3b48 <main+0x1440>
				pass[i] = KEYPAD_getPressedKey();
    39bc:	80 91 6a 01 	lds	r24, 0x016A
    39c0:	08 2f       	mov	r16, r24
    39c2:	10 e0       	ldi	r17, 0x00	; 0
    39c4:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    39c8:	f8 01       	movw	r30, r16
    39ca:	e0 5a       	subi	r30, 0xA0	; 160
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    39d0:	8a e2       	ldi	r24, 0x2A	; 42
    39d2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    39d6:	fe 01       	movw	r30, r28
    39d8:	ef 5a       	subi	r30, 0xAF	; 175
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	aa ef       	ldi	r26, 0xFA	; 250
    39e2:	b3 e4       	ldi	r27, 0x43	; 67
    39e4:	80 83       	st	Z, r24
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	a2 83       	std	Z+2, r26	; 0x02
    39ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ec:	8e 01       	movw	r16, r28
    39ee:	03 5b       	subi	r16, 0xB3	; 179
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	fe 01       	movw	r30, r28
    39f4:	ef 5a       	subi	r30, 0xAF	; 175
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	4a ef       	ldi	r20, 0xFA	; 250
    3a06:	54 e4       	ldi	r21, 0x44	; 68
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	f8 01       	movw	r30, r16
    3a12:	80 83       	st	Z, r24
    3a14:	91 83       	std	Z+1, r25	; 0x01
    3a16:	a2 83       	std	Z+2, r26	; 0x02
    3a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e3 5b       	subi	r30, 0xB3	; 179
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	60 81       	ld	r22, Z
    3a22:	71 81       	ldd	r23, Z+1	; 0x01
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e8       	ldi	r20, 0x80	; 128
    3a2e:	5f e3       	ldi	r21, 0x3F	; 63
    3a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a34:	88 23       	and	r24, r24
    3a36:	44 f4       	brge	.+16     	; 0x3a48 <main+0x1340>
		__ticks = 1;
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e5 5b       	subi	r30, 0xB5	; 181
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
    3a46:	64 c0       	rjmp	.+200    	; 0x3b10 <main+0x1408>
	else if (__tmp > 65535)
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e3 5b       	subi	r30, 0xB3	; 179
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <main+0x1360>
    3a66:	43 c0       	rjmp	.+134    	; 0x3aee <main+0x13e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ef 5a       	subi	r30, 0xAF	; 175
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e2       	ldi	r20, 0x20	; 32
    3a7c:	51 e4       	ldi	r21, 0x41	; 65
    3a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8e 01       	movw	r16, r28
    3a88:	05 5b       	subi	r16, 0xB5	; 181
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	f8 01       	movw	r30, r16
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
    3a9e:	1f c0       	rjmp	.+62     	; 0x3ade <main+0x13d6>
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e7 5b       	subi	r30, 0xB7	; 183
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	88 ec       	ldi	r24, 0xC8	; 200
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	80 83       	st	Z, r24
    3aae:	fe 01       	movw	r30, r28
    3ab0:	e7 5b       	subi	r30, 0xB7	; 183
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <main+0x13b0>
    3abc:	fe 01       	movw	r30, r28
    3abe:	e7 5b       	subi	r30, 0xB7	; 183
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac6:	de 01       	movw	r26, r28
    3ac8:	a5 5b       	subi	r26, 0xB5	; 181
    3aca:	bf 4f       	sbci	r27, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	e5 5b       	subi	r30, 0xB5	; 181
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	11 96       	adiw	r26, 0x01	; 1
    3ada:	9c 93       	st	X, r25
    3adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e5 5b       	subi	r30, 0xB5	; 181
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	d1 f6       	brne	.-76     	; 0x3aa0 <main+0x1398>
    3aec:	28 c0       	rjmp	.+80     	; 0x3b3e <main+0x1436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aee:	8e 01       	movw	r16, r28
    3af0:	05 5b       	subi	r16, 0xB5	; 181
    3af2:	1f 4f       	sbci	r17, 0xFF	; 255
    3af4:	fe 01       	movw	r30, r28
    3af6:	e3 5b       	subi	r30, 0xB3	; 179
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
    3b10:	de 01       	movw	r26, r28
    3b12:	a9 5b       	subi	r26, 0xB9	; 185
    3b14:	bf 4f       	sbci	r27, 0xFF	; 255
    3b16:	fe 01       	movw	r30, r28
    3b18:	e5 5b       	subi	r30, 0xB5	; 181
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 81       	ld	r24, Z
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01
    3b20:	11 96       	adiw	r26, 0x01	; 1
    3b22:	9c 93       	st	X, r25
    3b24:	8e 93       	st	-X, r24
    3b26:	fe 01       	movw	r30, r28
    3b28:	e9 5b       	subi	r30, 0xB9	; 185
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <main+0x1428>
    3b34:	fe 01       	movw	r30, r28
    3b36:	e9 5b       	subi	r30, 0xB9	; 185
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
			UART_sendByte(PASS_UPDATE);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");

			for (i = 0; i < 5; ++i) {
    3b3e:	80 91 6a 01 	lds	r24, 0x016A
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	80 93 6a 01 	sts	0x016A, r24
    3b48:	80 91 6a 01 	lds	r24, 0x016A
    3b4c:	85 30       	cpi	r24, 0x05	; 5
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <main+0x144a>
    3b50:	35 cf       	rjmp	.-406    	; 0x39bc <main+0x12b4>
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while (KEYPAD_getPressedKey() != '=');
    3b52:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3b56:	8d 33       	cpi	r24, 0x3D	; 61
    3b58:	e1 f7       	brne	.-8      	; 0x3b52 <main+0x144a>
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ed 5b       	subi	r30, 0xBD	; 189
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	aa ef       	ldi	r26, 0xFA	; 250
    3b66:	b3 e4       	ldi	r27, 0x43	; 67
    3b68:	80 83       	st	Z, r24
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	a2 83       	std	Z+2, r26	; 0x02
    3b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b70:	8e 01       	movw	r16, r28
    3b72:	01 5c       	subi	r16, 0xC1	; 193
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	fe 01       	movw	r30, r28
    3b78:	ed 5b       	subi	r30, 0xBD	; 189
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	82 81       	ldd	r24, Z+2	; 0x02
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	4a ef       	ldi	r20, 0xFA	; 250
    3b8a:	54 e4       	ldi	r21, 0x44	; 68
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	f8 01       	movw	r30, r16
    3b96:	80 83       	st	Z, r24
    3b98:	91 83       	std	Z+1, r25	; 0x01
    3b9a:	a2 83       	std	Z+2, r26	; 0x02
    3b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ff 96       	adiw	r30, 0x3f	; 63
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e8       	ldi	r20, 0x80	; 128
    3bb0:	5f e3       	ldi	r21, 0x3F	; 63
    3bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bb6:	88 23       	and	r24, r24
    3bb8:	2c f4       	brge	.+10     	; 0x3bc4 <main+0x14bc>
		__ticks = 1;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	9e af       	std	Y+62, r25	; 0x3e
    3bc0:	8d af       	std	Y+61, r24	; 0x3d
    3bc2:	46 c0       	rjmp	.+140    	; 0x3c50 <main+0x1548>
	else if (__tmp > 65535)
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	ff 96       	adiw	r30, 0x3f	; 63
    3bc8:	60 81       	ld	r22, Z
    3bca:	71 81       	ldd	r23, Z+1	; 0x01
    3bcc:	82 81       	ldd	r24, Z+2	; 0x02
    3bce:	93 81       	ldd	r25, Z+3	; 0x03
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	3f ef       	ldi	r19, 0xFF	; 255
    3bd4:	4f e7       	ldi	r20, 0x7F	; 127
    3bd6:	57 e4       	ldi	r21, 0x47	; 71
    3bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bdc:	18 16       	cp	r1, r24
    3bde:	64 f5       	brge	.+88     	; 0x3c38 <main+0x1530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be0:	fe 01       	movw	r30, r28
    3be2:	ed 5b       	subi	r30, 0xBD	; 189
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	60 81       	ld	r22, Z
    3be8:	71 81       	ldd	r23, Z+1	; 0x01
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e2       	ldi	r20, 0x20	; 32
    3bf4:	51 e4       	ldi	r21, 0x41	; 65
    3bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	bc 01       	movw	r22, r24
    3c00:	cd 01       	movw	r24, r26
    3c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	9e af       	std	Y+62, r25	; 0x3e
    3c0c:	8d af       	std	Y+61, r24	; 0x3d
    3c0e:	0f c0       	rjmp	.+30     	; 0x3c2e <main+0x1526>
    3c10:	88 ec       	ldi	r24, 0xC8	; 200
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	9c af       	std	Y+60, r25	; 0x3c
    3c16:	8b af       	std	Y+59, r24	; 0x3b
    3c18:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c1a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <main+0x1514>
    3c20:	9c af       	std	Y+60, r25	; 0x3c
    3c22:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c24:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c26:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	9e af       	std	Y+62, r25	; 0x3e
    3c2c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c30:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	69 f7       	brne	.-38     	; 0x3c10 <main+0x1508>
    3c36:	16 c0       	rjmp	.+44     	; 0x3c64 <main+0x155c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c38:	fe 01       	movw	r30, r28
    3c3a:	ff 96       	adiw	r30, 0x3f	; 63
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	9e af       	std	Y+62, r25	; 0x3e
    3c4e:	8d af       	std	Y+61, r24	; 0x3d
    3c50:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c52:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c54:	9a af       	std	Y+58, r25	; 0x3a
    3c56:	89 af       	std	Y+57, r24	; 0x39
    3c58:	89 ad       	ldd	r24, Y+57	; 0x39
    3c5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	f1 f7       	brne	.-4      	; 0x3c5c <main+0x1554>
    3c60:	9a af       	std	Y+58, r25	; 0x3a
    3c62:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);

			/* Transmit current password */
			for (i = 0; i < 5; ++i) {
    3c64:	10 92 6a 01 	sts	0x016A, r1
    3c68:	0f c0       	rjmp	.+30     	; 0x3c88 <main+0x1580>
				UART_sendByte(pass[i]);
    3c6a:	80 91 6a 01 	lds	r24, 0x016A
    3c6e:	88 2f       	mov	r24, r24
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	fc 01       	movw	r30, r24
    3c74:	e0 5a       	subi	r30, 0xA0	; 160
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	80 81       	ld	r24, Z
    3c7a:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
			}
			while (KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* Transmit current password */
			for (i = 0; i < 5; ++i) {
    3c7e:	80 91 6a 01 	lds	r24, 0x016A
    3c82:	8f 5f       	subi	r24, 0xFF	; 255
    3c84:	80 93 6a 01 	sts	0x016A, r24
    3c88:	80 91 6a 01 	lds	r24, 0x016A
    3c8c:	85 30       	cpi	r24, 0x05	; 5
    3c8e:	68 f3       	brcs	.-38     	; 0x3c6a <main+0x1562>
				UART_sendByte(pass[i]);
			}

			/* Verify current password */
			pass_state = UART_receiveByte();
    3c90:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    3c94:	80 93 6b 01 	sts	0x016B, r24
			if (pass_state == PASS_CORRECT) {
    3c98:	80 91 6b 01 	lds	r24, 0x016B
    3c9c:	80 3c       	cpi	r24, 0xC0	; 192
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <main+0x159a>
    3ca0:	4c c2       	rjmp	.+1176   	; 0x413a <main+0x1a32>
				update_fails = 0;
    3ca2:	10 92 6f 01 	sts	0x016F, r1
				LCD_clearScreen();
    3ca6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
				LCD_displayString("Plz Enter New Pass:");
    3caa:	8f e2       	ldi	r24, 0x2F	; 47
    3cac:	91 e0       	ldi	r25, 0x01	; 1
    3cae:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
				LCD_moveCursor(1, 0);
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <LCD_moveCursor>

				/* Enter new password */
				for (i = 0; i < 5; ++i) {
    3cba:	10 92 6a 01 	sts	0x016A, r1
    3cbe:	84 c0       	rjmp	.+264    	; 0x3dc8 <main+0x16c0>
					pass[i] = KEYPAD_getPressedKey();
    3cc0:	80 91 6a 01 	lds	r24, 0x016A
    3cc4:	08 2f       	mov	r16, r24
    3cc6:	10 e0       	ldi	r17, 0x00	; 0
    3cc8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3ccc:	f8 01       	movw	r30, r16
    3cce:	e0 5a       	subi	r30, 0xA0	; 160
    3cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd2:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    3cd4:	8a e2       	ldi	r24, 0x2A	; 42
    3cd6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	aa ef       	ldi	r26, 0xFA	; 250
    3ce0:	b3 e4       	ldi	r27, 0x43	; 67
    3ce2:	8d ab       	std	Y+53, r24	; 0x35
    3ce4:	9e ab       	std	Y+54, r25	; 0x36
    3ce6:	af ab       	std	Y+55, r26	; 0x37
    3ce8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cea:	6d a9       	ldd	r22, Y+53	; 0x35
    3cec:	7e a9       	ldd	r23, Y+54	; 0x36
    3cee:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf0:	98 ad       	ldd	r25, Y+56	; 0x38
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4a ef       	ldi	r20, 0xFA	; 250
    3cf8:	54 e4       	ldi	r21, 0x44	; 68
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	89 ab       	std	Y+49, r24	; 0x31
    3d04:	9a ab       	std	Y+50, r25	; 0x32
    3d06:	ab ab       	std	Y+51, r26	; 0x33
    3d08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d0a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d0c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d10:	9c a9       	ldd	r25, Y+52	; 0x34
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	2c f4       	brge	.+10     	; 0x3d2c <main+0x1624>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	98 ab       	std	Y+48, r25	; 0x30
    3d28:	8f a7       	std	Y+47, r24	; 0x2f
    3d2a:	3f c0       	rjmp	.+126    	; 0x3daa <main+0x16a2>
	else if (__tmp > 65535)
    3d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d30:	8b a9       	ldd	r24, Y+51	; 0x33
    3d32:	9c a9       	ldd	r25, Y+52	; 0x34
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	4f e7       	ldi	r20, 0x7F	; 127
    3d3a:	57 e4       	ldi	r21, 0x47	; 71
    3d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d40:	18 16       	cp	r1, r24
    3d42:	4c f5       	brge	.+82     	; 0x3d96 <main+0x168e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d44:	6d a9       	ldd	r22, Y+53	; 0x35
    3d46:	7e a9       	ldd	r23, Y+54	; 0x36
    3d48:	8f a9       	ldd	r24, Y+55	; 0x37
    3d4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	51 e4       	ldi	r21, 0x41	; 65
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	98 ab       	std	Y+48, r25	; 0x30
    3d6a:	8f a7       	std	Y+47, r24	; 0x2f
    3d6c:	0f c0       	rjmp	.+30     	; 0x3d8c <main+0x1684>
    3d6e:	88 ec       	ldi	r24, 0xC8	; 200
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9e a7       	std	Y+46, r25	; 0x2e
    3d74:	8d a7       	std	Y+45, r24	; 0x2d
    3d76:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d78:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <main+0x1672>
    3d7e:	9e a7       	std	Y+46, r25	; 0x2e
    3d80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d84:	98 a9       	ldd	r25, Y+48	; 0x30
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	98 ab       	std	Y+48, r25	; 0x30
    3d8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	69 f7       	brne	.-38     	; 0x3d6e <main+0x1666>
    3d94:	14 c0       	rjmp	.+40     	; 0x3dbe <main+0x16b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d96:	69 a9       	ldd	r22, Y+49	; 0x31
    3d98:	7a a9       	ldd	r23, Y+50	; 0x32
    3d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	98 ab       	std	Y+48, r25	; 0x30
    3da8:	8f a7       	std	Y+47, r24	; 0x2f
    3daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dac:	98 a9       	ldd	r25, Y+48	; 0x30
    3dae:	9c a7       	std	Y+44, r25	; 0x2c
    3db0:	8b a7       	std	Y+43, r24	; 0x2b
    3db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <main+0x16ae>
    3dba:	9c a7       	std	Y+44, r25	; 0x2c
    3dbc:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_clearScreen();
				LCD_displayString("Plz Enter New Pass:");
				LCD_moveCursor(1, 0);

				/* Enter new password */
				for (i = 0; i < 5; ++i) {
    3dbe:	80 91 6a 01 	lds	r24, 0x016A
    3dc2:	8f 5f       	subi	r24, 0xFF	; 255
    3dc4:	80 93 6a 01 	sts	0x016A, r24
    3dc8:	80 91 6a 01 	lds	r24, 0x016A
    3dcc:	85 30       	cpi	r24, 0x05	; 5
    3dce:	08 f4       	brcc	.+2      	; 0x3dd2 <main+0x16ca>
    3dd0:	77 cf       	rjmp	.-274    	; 0x3cc0 <main+0x15b8>
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while (KEYPAD_getPressedKey() != '=');
    3dd2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3dd6:	8d 33       	cpi	r24, 0x3D	; 61
    3dd8:	e1 f7       	brne	.-8      	; 0x3dd2 <main+0x16ca>
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	aa ef       	ldi	r26, 0xFA	; 250
    3de0:	b3 e4       	ldi	r27, 0x43	; 67
    3de2:	8f a3       	std	Y+39, r24	; 0x27
    3de4:	98 a7       	std	Y+40, r25	; 0x28
    3de6:	a9 a7       	std	Y+41, r26	; 0x29
    3de8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dea:	6f a1       	ldd	r22, Y+39	; 0x27
    3dec:	78 a5       	ldd	r23, Y+40	; 0x28
    3dee:	89 a5       	ldd	r24, Y+41	; 0x29
    3df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4a ef       	ldi	r20, 0xFA	; 250
    3df8:	54 e4       	ldi	r21, 0x44	; 68
    3dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	8b a3       	std	Y+35, r24	; 0x23
    3e04:	9c a3       	std	Y+36, r25	; 0x24
    3e06:	ad a3       	std	Y+37, r26	; 0x25
    3e08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e10:	9e a1       	ldd	r25, Y+38	; 0x26
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e8       	ldi	r20, 0x80	; 128
    3e18:	5f e3       	ldi	r21, 0x3F	; 63
    3e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e1e:	88 23       	and	r24, r24
    3e20:	2c f4       	brge	.+10     	; 0x3e2c <main+0x1724>
		__ticks = 1;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	9a a3       	std	Y+34, r25	; 0x22
    3e28:	89 a3       	std	Y+33, r24	; 0x21
    3e2a:	3f c0       	rjmp	.+126    	; 0x3eaa <main+0x17a2>
	else if (__tmp > 65535)
    3e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e30:	8d a1       	ldd	r24, Y+37	; 0x25
    3e32:	9e a1       	ldd	r25, Y+38	; 0x26
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	3f ef       	ldi	r19, 0xFF	; 255
    3e38:	4f e7       	ldi	r20, 0x7F	; 127
    3e3a:	57 e4       	ldi	r21, 0x47	; 71
    3e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e40:	18 16       	cp	r1, r24
    3e42:	4c f5       	brge	.+82     	; 0x3e96 <main+0x178e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e44:	6f a1       	ldd	r22, Y+39	; 0x27
    3e46:	78 a5       	ldd	r23, Y+40	; 0x28
    3e48:	89 a5       	ldd	r24, Y+41	; 0x29
    3e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e2       	ldi	r20, 0x20	; 32
    3e52:	51 e4       	ldi	r21, 0x41	; 65
    3e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9a a3       	std	Y+34, r25	; 0x22
    3e6a:	89 a3       	std	Y+33, r24	; 0x21
    3e6c:	0f c0       	rjmp	.+30     	; 0x3e8c <main+0x1784>
    3e6e:	88 ec       	ldi	r24, 0xC8	; 200
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	98 a3       	std	Y+32, r25	; 0x20
    3e74:	8f 8f       	std	Y+31, r24	; 0x1f
    3e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e78:	98 a1       	ldd	r25, Y+32	; 0x20
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <main+0x1772>
    3e7e:	98 a3       	std	Y+32, r25	; 0x20
    3e80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e82:	89 a1       	ldd	r24, Y+33	; 0x21
    3e84:	9a a1       	ldd	r25, Y+34	; 0x22
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	9a a3       	std	Y+34, r25	; 0x22
    3e8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	69 f7       	brne	.-38     	; 0x3e6e <main+0x1766>
    3e94:	14 c0       	rjmp	.+40     	; 0x3ebe <main+0x17b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e96:	6b a1       	ldd	r22, Y+35	; 0x23
    3e98:	7c a1       	ldd	r23, Y+36	; 0x24
    3e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9a a3       	std	Y+34, r25	; 0x22
    3ea8:	89 a3       	std	Y+33, r24	; 0x21
    3eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    3eac:	9a a1       	ldd	r25, Y+34	; 0x22
    3eae:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb0:	8d 8f       	std	Y+29, r24	; 0x1d
    3eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <main+0x17ae>
    3eba:	9e 8f       	std	Y+30, r25	; 0x1e
    3ebc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				LCD_clearScreen();
    3ebe:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
				LCD_displayString("Plz re-enter the");
    3ec2:	80 e7       	ldi	r24, 0x70	; 112
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "same pass: ");
    3eca:	21 e8       	ldi	r18, 0x81	; 129
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	a9 01       	movw	r20, r18
    3ed4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>

				/* Re-enter new password for confirmation */
				for (i = 5; i < 10; ++i) {
    3ed8:	85 e0       	ldi	r24, 0x05	; 5
    3eda:	80 93 6a 01 	sts	0x016A, r24
    3ede:	84 c0       	rjmp	.+264    	; 0x3fe8 <main+0x18e0>
					pass[i] = KEYPAD_getPressedKey();
    3ee0:	80 91 6a 01 	lds	r24, 0x016A
    3ee4:	08 2f       	mov	r16, r24
    3ee6:	10 e0       	ldi	r17, 0x00	; 0
    3ee8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3eec:	f8 01       	movw	r30, r16
    3eee:	e0 5a       	subi	r30, 0xA0	; 160
    3ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef2:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    3ef4:	8a e2       	ldi	r24, 0x2A	; 42
    3ef6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_displayCharacter>
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	aa ef       	ldi	r26, 0xFA	; 250
    3f00:	b3 e4       	ldi	r27, 0x43	; 67
    3f02:	89 8f       	std	Y+25, r24	; 0x19
    3f04:	9a 8f       	std	Y+26, r25	; 0x1a
    3f06:	ab 8f       	std	Y+27, r26	; 0x1b
    3f08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4a ef       	ldi	r20, 0xFA	; 250
    3f18:	54 e4       	ldi	r21, 0x44	; 68
    3f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	8d 8b       	std	Y+21, r24	; 0x15
    3f24:	9e 8b       	std	Y+22, r25	; 0x16
    3f26:	af 8b       	std	Y+23, r26	; 0x17
    3f28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f30:	98 8d       	ldd	r25, Y+24	; 0x18
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e8       	ldi	r20, 0x80	; 128
    3f38:	5f e3       	ldi	r21, 0x3F	; 63
    3f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f3e:	88 23       	and	r24, r24
    3f40:	2c f4       	brge	.+10     	; 0x3f4c <main+0x1844>
		__ticks = 1;
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	9c 8b       	std	Y+20, r25	; 0x14
    3f48:	8b 8b       	std	Y+19, r24	; 0x13
    3f4a:	3f c0       	rjmp	.+126    	; 0x3fca <main+0x18c2>
	else if (__tmp > 65535)
    3f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f50:	8f 89       	ldd	r24, Y+23	; 0x17
    3f52:	98 8d       	ldd	r25, Y+24	; 0x18
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	3f ef       	ldi	r19, 0xFF	; 255
    3f58:	4f e7       	ldi	r20, 0x7F	; 127
    3f5a:	57 e4       	ldi	r21, 0x47	; 71
    3f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f60:	18 16       	cp	r1, r24
    3f62:	4c f5       	brge	.+82     	; 0x3fb6 <main+0x18ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f64:	69 8d       	ldd	r22, Y+25	; 0x19
    3f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e2       	ldi	r20, 0x20	; 32
    3f72:	51 e4       	ldi	r21, 0x41	; 65
    3f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	9c 8b       	std	Y+20, r25	; 0x14
    3f8a:	8b 8b       	std	Y+19, r24	; 0x13
    3f8c:	0f c0       	rjmp	.+30     	; 0x3fac <main+0x18a4>
    3f8e:	88 ec       	ldi	r24, 0xC8	; 200
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	9a 8b       	std	Y+18, r25	; 0x12
    3f94:	89 8b       	std	Y+17, r24	; 0x11
    3f96:	89 89       	ldd	r24, Y+17	; 0x11
    3f98:	9a 89       	ldd	r25, Y+18	; 0x12
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <main+0x1892>
    3f9e:	9a 8b       	std	Y+18, r25	; 0x12
    3fa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	9c 8b       	std	Y+20, r25	; 0x14
    3faa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fac:	8b 89       	ldd	r24, Y+19	; 0x13
    3fae:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb0:	00 97       	sbiw	r24, 0x00	; 0
    3fb2:	69 f7       	brne	.-38     	; 0x3f8e <main+0x1886>
    3fb4:	14 c0       	rjmp	.+40     	; 0x3fde <main+0x18d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fba:	8f 89       	ldd	r24, Y+23	; 0x17
    3fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	9c 8b       	std	Y+20, r25	; 0x14
    3fc8:	8b 8b       	std	Y+19, r24	; 0x13
    3fca:	8b 89       	ldd	r24, Y+19	; 0x13
    3fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3fce:	98 8b       	std	Y+16, r25	; 0x10
    3fd0:	8f 87       	std	Y+15, r24	; 0x0f
    3fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd4:	98 89       	ldd	r25, Y+16	; 0x10
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <main+0x18ce>
    3fda:	98 8b       	std	Y+16, r25	; 0x10
    3fdc:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_clearScreen();
				LCD_displayString("Plz re-enter the");
				LCD_displayStringRowColumn(1, 0, "same pass: ");

				/* Re-enter new password for confirmation */
				for (i = 5; i < 10; ++i) {
    3fde:	80 91 6a 01 	lds	r24, 0x016A
    3fe2:	8f 5f       	subi	r24, 0xFF	; 255
    3fe4:	80 93 6a 01 	sts	0x016A, r24
    3fe8:	80 91 6a 01 	lds	r24, 0x016A
    3fec:	8a 30       	cpi	r24, 0x0A	; 10
    3fee:	08 f4       	brcc	.+2      	; 0x3ff2 <main+0x18ea>
    3ff0:	77 cf       	rjmp	.-274    	; 0x3ee0 <main+0x17d8>
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while (KEYPAD_getPressedKey() != '=');
    3ff2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <KEYPAD_getPressedKey>
    3ff6:	8d 33       	cpi	r24, 0x3D	; 61
    3ff8:	e1 f7       	brne	.-8      	; 0x3ff2 <main+0x18ea>
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	aa ef       	ldi	r26, 0xFA	; 250
    4000:	b3 e4       	ldi	r27, 0x43	; 67
    4002:	8b 87       	std	Y+11, r24	; 0x0b
    4004:	9c 87       	std	Y+12, r25	; 0x0c
    4006:	ad 87       	std	Y+13, r26	; 0x0d
    4008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400a:	6b 85       	ldd	r22, Y+11	; 0x0b
    400c:	7c 85       	ldd	r23, Y+12	; 0x0c
    400e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4010:	9e 85       	ldd	r25, Y+14	; 0x0e
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	4a ef       	ldi	r20, 0xFA	; 250
    4018:	54 e4       	ldi	r21, 0x44	; 68
    401a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	8f 83       	std	Y+7, r24	; 0x07
    4024:	98 87       	std	Y+8, r25	; 0x08
    4026:	a9 87       	std	Y+9, r26	; 0x09
    4028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    402a:	6f 81       	ldd	r22, Y+7	; 0x07
    402c:	78 85       	ldd	r23, Y+8	; 0x08
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e8       	ldi	r20, 0x80	; 128
    4038:	5f e3       	ldi	r21, 0x3F	; 63
    403a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    403e:	88 23       	and	r24, r24
    4040:	2c f4       	brge	.+10     	; 0x404c <main+0x1944>
		__ticks = 1;
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	3f c0       	rjmp	.+126    	; 0x40ca <main+0x19c2>
	else if (__tmp > 65535)
    404c:	6f 81       	ldd	r22, Y+7	; 0x07
    404e:	78 85       	ldd	r23, Y+8	; 0x08
    4050:	89 85       	ldd	r24, Y+9	; 0x09
    4052:	9a 85       	ldd	r25, Y+10	; 0x0a
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	3f ef       	ldi	r19, 0xFF	; 255
    4058:	4f e7       	ldi	r20, 0x7F	; 127
    405a:	57 e4       	ldi	r21, 0x47	; 71
    405c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4060:	18 16       	cp	r1, r24
    4062:	4c f5       	brge	.+82     	; 0x40b6 <main+0x19ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4064:	6b 85       	ldd	r22, Y+11	; 0x0b
    4066:	7c 85       	ldd	r23, Y+12	; 0x0c
    4068:	8d 85       	ldd	r24, Y+13	; 0x0d
    406a:	9e 85       	ldd	r25, Y+14	; 0x0e
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e2       	ldi	r20, 0x20	; 32
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	9e 83       	std	Y+6, r25	; 0x06
    408a:	8d 83       	std	Y+5, r24	; 0x05
    408c:	0f c0       	rjmp	.+30     	; 0x40ac <main+0x19a4>
    408e:	88 ec       	ldi	r24, 0xC8	; 200
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	9c 83       	std	Y+4, r25	; 0x04
    4094:	8b 83       	std	Y+3, r24	; 0x03
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <main+0x1992>
    409e:	9c 83       	std	Y+4, r25	; 0x04
    40a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a2:	8d 81       	ldd	r24, Y+5	; 0x05
    40a4:	9e 81       	ldd	r25, Y+6	; 0x06
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	9e 83       	std	Y+6, r25	; 0x06
    40aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ac:	8d 81       	ldd	r24, Y+5	; 0x05
    40ae:	9e 81       	ldd	r25, Y+6	; 0x06
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	69 f7       	brne	.-38     	; 0x408e <main+0x1986>
    40b4:	14 c0       	rjmp	.+40     	; 0x40de <main+0x19d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b6:	6f 81       	ldd	r22, Y+7	; 0x07
    40b8:	78 85       	ldd	r23, Y+8	; 0x08
    40ba:	89 85       	ldd	r24, Y+9	; 0x09
    40bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	9e 83       	std	Y+6, r25	; 0x06
    40c8:	8d 83       	std	Y+5, r24	; 0x05
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	9e 81       	ldd	r25, Y+6	; 0x06
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	89 83       	std	Y+1, r24	; 0x01
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <main+0x19ce>
    40da:	9a 83       	std	Y+2, r25	; 0x02
    40dc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);

				/* Transmit new password */
				for (i = 0; i < 10; ++i) {
    40de:	10 92 6a 01 	sts	0x016A, r1
    40e2:	0f c0       	rjmp	.+30     	; 0x4102 <main+0x19fa>
					UART_sendByte(pass[i]);
    40e4:	80 91 6a 01 	lds	r24, 0x016A
    40e8:	88 2f       	mov	r24, r24
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	fc 01       	movw	r30, r24
    40ee:	e0 5a       	subi	r30, 0xA0	; 160
    40f0:	fe 4f       	sbci	r31, 0xFE	; 254
    40f2:	80 81       	ld	r24, Z
    40f4:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
				}
				while (KEYPAD_getPressedKey() != '=');
				_delay_ms(500);

				/* Transmit new password */
				for (i = 0; i < 10; ++i) {
    40f8:	80 91 6a 01 	lds	r24, 0x016A
    40fc:	8f 5f       	subi	r24, 0xFF	; 255
    40fe:	80 93 6a 01 	sts	0x016A, r24
    4102:	80 91 6a 01 	lds	r24, 0x016A
    4106:	8a 30       	cpi	r24, 0x0A	; 10
    4108:	68 f3       	brcs	.-38     	; 0x40e4 <main+0x19dc>
					UART_sendByte(pass[i]);
				}

				/* Confirm new password */
				pass_state = UART_receiveByte();
    410a:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    410e:	80 93 6b 01 	sts	0x016B, r24
				if (pass_state == PASS_FAIL) {
    4112:	80 91 6b 01 	lds	r24, 0x016B
    4116:	80 3f       	cpi	r24, 0xF0	; 240
    4118:	11 f0       	breq	.+4      	; 0x411e <main+0x1a16>
    411a:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <main+0x83a>
					LCD_clearScreen();
    411e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayString("PASSWORD WRONG!!");
    4122:	8d e8       	ldi	r24, 0x8D	; 141
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
					counter = 0;
    412a:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 1);
    412e:	80 91 6d 01 	lds	r24, 0x016D
    4132:	88 23       	and	r24, r24
    4134:	e1 f3       	breq	.-8      	; 0x412e <main+0x1a26>
    4136:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <main+0x83a>
				}
			} else if (pass_state == PASS_FAIL) {
    413a:	80 91 6b 01 	lds	r24, 0x016B
    413e:	80 3f       	cpi	r24, 0xF0	; 240
    4140:	11 f0       	breq	.+4      	; 0x4146 <main+0x1a3e>
    4142:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <main+0x83a>
				++update_fails;
    4146:	80 91 6f 01 	lds	r24, 0x016F
    414a:	8f 5f       	subi	r24, 0xFF	; 255
    414c:	80 93 6f 01 	sts	0x016F, r24
				if (update_fails == 3) {
    4150:	80 91 6f 01 	lds	r24, 0x016F
    4154:	83 30       	cpi	r24, 0x03	; 3
    4156:	e9 f4       	brne	.+58     	; 0x4192 <main+0x1a8a>
					/* Lock system for 1 minute */
					UART_sendByte(ALARM_ON);
    4158:	82 ef       	ldi	r24, 0xF2	; 242
    415a:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
					LCD_clearScreen();
    415e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    4162:	22 e1       	ldi	r18, 0x12	; 18
    4164:	31 e0       	ldi	r19, 0x01	; 1
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	a9 01       	movw	r20, r18
    416c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    4170:	20 e2       	ldi	r18, 0x20	; 32
    4172:	31 e0       	ldi	r19, 0x01	; 1
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	a9 01       	movw	r20, r18
    417a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_displayStringRowColumn>
					counter = 0;
    417e:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 60);
    4182:	80 91 6d 01 	lds	r24, 0x016D
    4186:	8c 33       	cpi	r24, 0x3C	; 60
    4188:	e0 f3       	brcs	.-8      	; 0x4182 <main+0x1a7a>
					update_fails = 0;
    418a:	10 92 6f 01 	sts	0x016F, r1
    418e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <main+0x83a>
				} else {
					/* Incorrect password */
					LCD_clearScreen();
    4192:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_clearScreen>
					LCD_displayString("PASSWORD WRONG!!");
    4196:	8d e8       	ldi	r24, 0x8D	; 141
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_displayString>
					counter = 0;
    419e:	10 92 6d 01 	sts	0x016D, r1
					while (counter < 1);
    41a2:	80 91 6d 01 	lds	r24, 0x016D
    41a6:	88 23       	and	r24, r24
    41a8:	e1 f3       	breq	.-8      	; 0x41a2 <main+0x1a9a>
    41aa:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <main+0x83a>

000041ae <__udivmodsi4>:
    41ae:	a1 e2       	ldi	r26, 0x21	; 33
    41b0:	1a 2e       	mov	r1, r26
    41b2:	aa 1b       	sub	r26, r26
    41b4:	bb 1b       	sub	r27, r27
    41b6:	fd 01       	movw	r30, r26
    41b8:	0d c0       	rjmp	.+26     	; 0x41d4 <__udivmodsi4_ep>

000041ba <__udivmodsi4_loop>:
    41ba:	aa 1f       	adc	r26, r26
    41bc:	bb 1f       	adc	r27, r27
    41be:	ee 1f       	adc	r30, r30
    41c0:	ff 1f       	adc	r31, r31
    41c2:	a2 17       	cp	r26, r18
    41c4:	b3 07       	cpc	r27, r19
    41c6:	e4 07       	cpc	r30, r20
    41c8:	f5 07       	cpc	r31, r21
    41ca:	20 f0       	brcs	.+8      	; 0x41d4 <__udivmodsi4_ep>
    41cc:	a2 1b       	sub	r26, r18
    41ce:	b3 0b       	sbc	r27, r19
    41d0:	e4 0b       	sbc	r30, r20
    41d2:	f5 0b       	sbc	r31, r21

000041d4 <__udivmodsi4_ep>:
    41d4:	66 1f       	adc	r22, r22
    41d6:	77 1f       	adc	r23, r23
    41d8:	88 1f       	adc	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	1a 94       	dec	r1
    41de:	69 f7       	brne	.-38     	; 0x41ba <__udivmodsi4_loop>
    41e0:	60 95       	com	r22
    41e2:	70 95       	com	r23
    41e4:	80 95       	com	r24
    41e6:	90 95       	com	r25
    41e8:	9b 01       	movw	r18, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	bd 01       	movw	r22, r26
    41ee:	cf 01       	movw	r24, r30
    41f0:	08 95       	ret

000041f2 <__prologue_saves__>:
    41f2:	2f 92       	push	r2
    41f4:	3f 92       	push	r3
    41f6:	4f 92       	push	r4
    41f8:	5f 92       	push	r5
    41fa:	6f 92       	push	r6
    41fc:	7f 92       	push	r7
    41fe:	8f 92       	push	r8
    4200:	9f 92       	push	r9
    4202:	af 92       	push	r10
    4204:	bf 92       	push	r11
    4206:	cf 92       	push	r12
    4208:	df 92       	push	r13
    420a:	ef 92       	push	r14
    420c:	ff 92       	push	r15
    420e:	0f 93       	push	r16
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	ca 1b       	sub	r28, r26
    421c:	db 0b       	sbc	r29, r27
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	09 94       	ijmp

0000422a <__epilogue_restores__>:
    422a:	2a 88       	ldd	r2, Y+18	; 0x12
    422c:	39 88       	ldd	r3, Y+17	; 0x11
    422e:	48 88       	ldd	r4, Y+16	; 0x10
    4230:	5f 84       	ldd	r5, Y+15	; 0x0f
    4232:	6e 84       	ldd	r6, Y+14	; 0x0e
    4234:	7d 84       	ldd	r7, Y+13	; 0x0d
    4236:	8c 84       	ldd	r8, Y+12	; 0x0c
    4238:	9b 84       	ldd	r9, Y+11	; 0x0b
    423a:	aa 84       	ldd	r10, Y+10	; 0x0a
    423c:	b9 84       	ldd	r11, Y+9	; 0x09
    423e:	c8 84       	ldd	r12, Y+8	; 0x08
    4240:	df 80       	ldd	r13, Y+7	; 0x07
    4242:	ee 80       	ldd	r14, Y+6	; 0x06
    4244:	fd 80       	ldd	r15, Y+5	; 0x05
    4246:	0c 81       	ldd	r16, Y+4	; 0x04
    4248:	1b 81       	ldd	r17, Y+3	; 0x03
    424a:	aa 81       	ldd	r26, Y+2	; 0x02
    424c:	b9 81       	ldd	r27, Y+1	; 0x01
    424e:	ce 0f       	add	r28, r30
    4250:	d1 1d       	adc	r29, r1
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	f8 94       	cli
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	0f be       	out	0x3f, r0	; 63
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	ed 01       	movw	r28, r26
    425e:	08 95       	ret

00004260 <itoa>:
    4260:	fb 01       	movw	r30, r22
    4262:	9f 01       	movw	r18, r30
    4264:	e8 94       	clt
    4266:	42 30       	cpi	r20, 0x02	; 2
    4268:	c4 f0       	brlt	.+48     	; 0x429a <itoa+0x3a>
    426a:	45 32       	cpi	r20, 0x25	; 37
    426c:	b4 f4       	brge	.+44     	; 0x429a <itoa+0x3a>
    426e:	4a 30       	cpi	r20, 0x0A	; 10
    4270:	29 f4       	brne	.+10     	; 0x427c <itoa+0x1c>
    4272:	97 fb       	bst	r25, 7
    4274:	1e f4       	brtc	.+6      	; 0x427c <itoa+0x1c>
    4276:	90 95       	com	r25
    4278:	81 95       	neg	r24
    427a:	9f 4f       	sbci	r25, 0xFF	; 255
    427c:	64 2f       	mov	r22, r20
    427e:	77 27       	eor	r23, r23
    4280:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__udivmodhi4>
    4284:	80 5d       	subi	r24, 0xD0	; 208
    4286:	8a 33       	cpi	r24, 0x3A	; 58
    4288:	0c f0       	brlt	.+2      	; 0x428c <itoa+0x2c>
    428a:	89 5d       	subi	r24, 0xD9	; 217
    428c:	81 93       	st	Z+, r24
    428e:	cb 01       	movw	r24, r22
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	a1 f7       	brne	.-24     	; 0x427c <itoa+0x1c>
    4294:	16 f4       	brtc	.+4      	; 0x429a <itoa+0x3a>
    4296:	5d e2       	ldi	r21, 0x2D	; 45
    4298:	51 93       	st	Z+, r21
    429a:	10 82       	st	Z, r1
    429c:	c9 01       	movw	r24, r18
    429e:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <strrev>

000042a2 <strrev>:
    42a2:	dc 01       	movw	r26, r24
    42a4:	fc 01       	movw	r30, r24
    42a6:	67 2f       	mov	r22, r23
    42a8:	71 91       	ld	r23, Z+
    42aa:	77 23       	and	r23, r23
    42ac:	e1 f7       	brne	.-8      	; 0x42a6 <strrev+0x4>
    42ae:	32 97       	sbiw	r30, 0x02	; 2
    42b0:	04 c0       	rjmp	.+8      	; 0x42ba <strrev+0x18>
    42b2:	7c 91       	ld	r23, X
    42b4:	6d 93       	st	X+, r22
    42b6:	70 83       	st	Z, r23
    42b8:	62 91       	ld	r22, -Z
    42ba:	ae 17       	cp	r26, r30
    42bc:	bf 07       	cpc	r27, r31
    42be:	c8 f3       	brcs	.-14     	; 0x42b2 <strrev+0x10>
    42c0:	08 95       	ret

000042c2 <__udivmodhi4>:
    42c2:	aa 1b       	sub	r26, r26
    42c4:	bb 1b       	sub	r27, r27
    42c6:	51 e1       	ldi	r21, 0x11	; 17
    42c8:	07 c0       	rjmp	.+14     	; 0x42d8 <__udivmodhi4_ep>

000042ca <__udivmodhi4_loop>:
    42ca:	aa 1f       	adc	r26, r26
    42cc:	bb 1f       	adc	r27, r27
    42ce:	a6 17       	cp	r26, r22
    42d0:	b7 07       	cpc	r27, r23
    42d2:	10 f0       	brcs	.+4      	; 0x42d8 <__udivmodhi4_ep>
    42d4:	a6 1b       	sub	r26, r22
    42d6:	b7 0b       	sbc	r27, r23

000042d8 <__udivmodhi4_ep>:
    42d8:	88 1f       	adc	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	5a 95       	dec	r21
    42de:	a9 f7       	brne	.-22     	; 0x42ca <__udivmodhi4_loop>
    42e0:	80 95       	com	r24
    42e2:	90 95       	com	r25
    42e4:	bc 01       	movw	r22, r24
    42e6:	cd 01       	movw	r24, r26
    42e8:	08 95       	ret

000042ea <_exit>:
    42ea:	f8 94       	cli

000042ec <__stop_program>:
    42ec:	ff cf       	rjmp	.-2      	; 0x42ec <__stop_program>
