
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002838  000028cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080007c  0080007c  000028e8  2**0
                  ALLOC
  3 .stab         00002f1c  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a93  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007297  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_4>
      14:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_9>
      28:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_10>
      2c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <main>
      8a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*
 * Description :
 * Initialize the UART device based on the configuration structure.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24

    /* Enable RX and TX, configure UCSZ2 for data size */
    UCSRB = (1 << RXEN) | (1 << TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
    if (Config_Ptr->bit_data == UART_9_BIT)
     b6a:	eb 81       	ldd	r30, Y+3	; 0x03
     b6c:	fc 81       	ldd	r31, Y+4	; 0x04
     b6e:	80 81       	ld	r24, Z
     b70:	87 30       	cpi	r24, 0x07	; 7
     b72:	39 f4       	brne	.+14     	; 0xb82 <UART_init+0x3c>
    {
        UCSRB |= (1 << UCSZ2); /* Enable 9-bit mode */
     b74:	aa e2       	ldi	r26, 0x2A	; 42
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ea e2       	ldi	r30, 0x2A	; 42
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	84 60       	ori	r24, 0x04	; 4
     b80:	8c 93       	st	X, r24
    }

    /* Configure frame format: data bits, parity, stop bits */
    UCSRC = (1 << URSEL) | (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);
     b82:	a0 e4       	ldi	r26, 0x40	; 64
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	82 95       	swap	r24
     b92:	92 95       	swap	r25
     b94:	90 7f       	andi	r25, 0xF0	; 240
     b96:	98 27       	eor	r25, r24
     b98:	80 7f       	andi	r24, 0xF0	; 240
     b9a:	98 27       	eor	r25, r24
     b9c:	28 2f       	mov	r18, r24
     b9e:	20 68       	ori	r18, 0x80	; 128
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 2b       	or	r24, r18
     bb8:	8c 93       	st	X, r24
    if (Config_Ptr->bit_data == UART_5_BIT) {
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 81       	ld	r24, Z
     bc0:	88 23       	and	r24, r24
     bc2:	a1 f0       	breq	.+40     	; 0xbec <UART_init+0xa6>
        /* No bits needed, already default */
    } else if (Config_Ptr->bit_data <= UART_8_BIT) {
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	80 81       	ld	r24, Z
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	78 f4       	brcc	.+30     	; 0xbec <UART_init+0xa6>
        UCSRC |= ((Config_Ptr->bit_data - UART_5_BIT) << UCSZ0);
     bce:	a0 e4       	ldi	r26, 0x40	; 64
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	28 2f       	mov	r18, r24
     bda:	eb 81       	ldd	r30, Y+3	; 0x03
     bdc:	fc 81       	ldd	r31, Y+4	; 0x04
     bde:	80 81       	ld	r24, Z
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	82 2b       	or	r24, r18
     bea:	8c 93       	st	X, r24
    }

    /* Calculate and set baud rate */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     bec:	eb 81       	ldd	r30, Y+3	; 0x03
     bee:	fc 81       	ldd	r31, Y+4	; 0x04
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	94 81       	ldd	r25, Z+4	; 0x04
     bf4:	a5 81       	ldd	r26, Z+5	; 0x05
     bf6:	b6 81       	ldd	r27, Z+6	; 0x06
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	aa 1f       	adc	r26, r26
     c0e:	bb 1f       	adc	r27, r27
     c10:	9c 01       	movw	r18, r24
     c12:	ad 01       	movw	r20, r26
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	92 e1       	ldi	r25, 0x12	; 18
     c18:	aa e7       	ldi	r26, 0x7A	; 122
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 ad 13 	call	0x275a	; 0x275a <__udivmodsi4>
     c24:	da 01       	movw	r26, r20
     c26:	c9 01       	movw	r24, r18
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
    UBRRH = ubrr_value >> 8;
     c2e:	e0 e4       	ldi	r30, 0x40	; 64
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	89 2f       	mov	r24, r25
     c38:	99 27       	eor	r25, r25
     c3a:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
     c3c:	e9 e2       	ldi	r30, 0x29	; 41
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	80 83       	st	Z, r24
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <UART_sendByte>:
/*
 * Description :
 * Send byte through UART.
 */
void UART_sendByte(const uint8 data)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c5e:	eb e2       	ldi	r30, 0x2B	; 43
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	80 72       	andi	r24, 0x20	; 32
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	b9 f3       	breq	.-18     	; 0xc5e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c70:	ec e2       	ldi	r30, 0x2C	; 44
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <UART_receiveByte>:
/*
 * Description :
 * Receive byte from UART.
 */
uint8 UART_receiveByte(void)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c88:	eb e2       	ldi	r30, 0x2B	; 43
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	dc f7       	brge	.-10     	; 0xc88 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <UART_sendString>:
/*
 * Description :
 * Send a string through UART.
 */
void UART_sendString(const uint8 *Str)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_sendString+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cae:	19 82       	std	Y+1, r1	; 0x01
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	fc 01       	movw	r30, r24
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	80 81       	ld	r24, Z
     cc4:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
		i++;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	9b 81       	ldd	r25, Y+3	; 0x03
     cd8:	fc 01       	movw	r30, r24
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	80 81       	ld	r24, Z
     ce0:	88 23       	and	r24, r24
     ce2:	39 f7       	brne	.-50     	; 0xcb2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <UART_receiveString>:
/*
 * Description :
 * Receive a string through UART until '#' character.
 */
void UART_receiveString(uint8 *Str)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <UART_receiveString+0xa>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d04:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	8c 01       	movw	r16, r24
     d12:	02 0f       	add	r16, r18
     d14:	13 1f       	adc	r17, r19
     d16:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 83       	st	Z, r24
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	8c 01       	movw	r16, r24
     d32:	02 0f       	add	r16, r18
     d34:	13 1f       	adc	r17, r19
     d36:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	fc 01       	movw	r30, r24
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	80 81       	ld	r24, Z
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	31 f7       	brne	.-52     	; 0xd20 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	10 82       	st	Z, r1
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <Timer_init>:
static volatile void (*g_timer0CallbackPtr)(void) = NULL_PTR;
static volatile void (*g_timer1CallbackPtr)(void) = NULL_PTR;
static volatile void (*g_timer2CallbackPtr)(void) = NULL_PTR;

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <Timer_init+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <Timer_init+0x8>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
    switch(Config_Ptr->timer_ID)
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3c 83       	std	Y+4, r19	; 0x04
     d92:	2b 83       	std	Y+3, r18	; 0x03
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <Timer_init+0x2a>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <Timer_init+0xb0>
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <Timer_init+0x36>
     daa:	79 c0       	rjmp	.+242    	; 0xe9e <Timer_init+0x128>
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	09 f0       	breq	.+2      	; 0xdb6 <Timer_init+0x40>
     db4:	ab c0       	rjmp	.+342    	; 0xf0c <Timer_init+0x196>
    {
        case TIMER0_ID:
            /* Set initial value */
            TCNT0 = Config_Ptr->timer_initialValue;
     db6:	a2 e5       	ldi	r26, 0x52	; 82
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	86 81       	ldd	r24, Z+6	; 0x06
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	59 f4       	brne	.+22     	; 0xde4 <Timer_init+0x6e>
                OCR0 = Config_Ptr->timer_compareMatchValue; /* Set compare match value */
     dce:	ac e5       	ldi	r26, 0x5C	; 92
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	8c 93       	st	X, r24
                TCCR0 = (1<<WGM01); /* Set to CTC mode */
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	80 83       	st	Z, r24
            }
            /* Set clock prescaler */
            TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	98 2f       	mov	r25, r24
     df0:	98 7f       	andi	r25, 0xF8	; 248
     df2:	e9 81       	ldd	r30, Y+1	; 0x01
     df4:	fa 81       	ldd	r31, Y+2	; 0x02
     df6:	85 81       	ldd	r24, Z+5	; 0x05
     df8:	89 2b       	or	r24, r25
     dfa:	8c 93       	st	X, r24
            /* Enable interrupt */
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	86 81       	ldd	r24, Z+6	; 0x06
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	41 f4       	brne	.+16     	; 0xe16 <Timer_init+0xa0>
                SET_BIT(TIMSK, OCIE0); /* Enable Timer0 Compare Interrupt */
     e06:	a9 e5       	ldi	r26, 0x59	; 89
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e9 e5       	ldi	r30, 0x59	; 89
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	8c 93       	st	X, r24
     e14:	7b c0       	rjmp	.+246    	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE0); /* Enable Timer0 Overflow Interrupt */
     e16:	a9 e5       	ldi	r26, 0x59	; 89
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e9 e5       	ldi	r30, 0x59	; 89
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	8c 93       	st	X, r24
     e24:	73 c0       	rjmp	.+230    	; 0xf0c <Timer_init+0x196>
            }
            break;
        case TIMER1_ID:
            /* Set initial value */
            TCNT1 = Config_Ptr->timer_initialValue;
     e26:	ac e4       	ldi	r26, 0x4C	; 76
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     e38:	e9 81       	ldd	r30, Y+1	; 0x01
     e3a:	fa 81       	ldd	r31, Y+2	; 0x02
     e3c:	86 81       	ldd	r24, Z+6	; 0x06
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	69 f4       	brne	.+26     	; 0xe5c <Timer_init+0xe6>
                OCR1A = Config_Ptr->timer_compareMatchValue;
     e42:	aa e4       	ldi	r26, 0x4A	; 74
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
                TCCR1A = (1<<WGM12); /* Set to CTC mode */
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	88 e0       	ldi	r24, 0x08	; 8
     e5a:	80 83       	st	Z, r24
            }
            TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
     e5c:	ae e4       	ldi	r26, 0x4E	; 78
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ee e4       	ldi	r30, 0x4E	; 78
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	98 2f       	mov	r25, r24
     e68:	98 7f       	andi	r25, 0xF8	; 248
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	85 81       	ldd	r24, Z+5	; 0x05
     e70:	89 2b       	or	r24, r25
     e72:	8c 93       	st	X, r24
            /* Enable interrupt */
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	86 81       	ldd	r24, Z+6	; 0x06
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	41 f4       	brne	.+16     	; 0xe8e <Timer_init+0x118>
                SET_BIT(TIMSK, OCIE1A);
     e7e:	a9 e5       	ldi	r26, 0x59	; 89
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e9 e5       	ldi	r30, 0x59	; 89
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	8c 93       	st	X, r24
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE1);
     e8e:	a9 e5       	ldi	r26, 0x59	; 89
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e9 e5       	ldi	r30, 0x59	; 89
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	8c 93       	st	X, r24
     e9c:	37 c0       	rjmp	.+110    	; 0xf0c <Timer_init+0x196>
            }
            break;
        case TIMER2_ID:
            TCNT2 = Config_Ptr->timer_initialValue;
     e9e:	a4 e4       	ldi	r26, 0x44	; 68
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e9 81       	ldd	r30, Y+1	; 0x01
     ea4:	fa 81       	ldd	r31, Y+2	; 0x02
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	86 81       	ldd	r24, Z+6	; 0x06
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	59 f4       	brne	.+22     	; 0xecc <Timer_init+0x156>
                OCR2 = Config_Ptr->timer_compareMatchValue;
     eb6:	a3 e4       	ldi	r26, 0x43	; 67
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	8c 93       	st	X, r24
                TCCR2 = (1<<WGM21);
     ec4:	e5 e4       	ldi	r30, 0x45	; 69
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	80 83       	st	Z, r24
            }
            TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock);
     ecc:	a5 e4       	ldi	r26, 0x45	; 69
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e4       	ldi	r30, 0x45	; 69
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	98 2f       	mov	r25, r24
     ed8:	98 7f       	andi	r25, 0xF8	; 248
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	85 81       	ldd	r24, Z+5	; 0x05
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == TIMER_COMPARE_MODE) {
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	86 81       	ldd	r24, Z+6	; 0x06
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	41 f4       	brne	.+16     	; 0xefe <Timer_init+0x188>
                SET_BIT(TIMSK, OCIE2);
     eee:	a9 e5       	ldi	r26, 0x59	; 89
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e9 e5       	ldi	r30, 0x59	; 89
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	8c 93       	st	X, r24
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <Timer_init+0x196>
            } else {
                SET_BIT(TIMSK, TOIE2);
     efe:	a9 e5       	ldi	r26, 0x59	; 89
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e9 e5       	ldi	r30, 0x59	; 89
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	8c 93       	st	X, r24
            }
            break;
    }
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <Timer_deInit>:

void Timer_deInit(uint8 timer_ID)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <Timer_deInit+0x6>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_ID)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3b 83       	std	Y+3, r19	; 0x03
     f30:	2a 83       	std	Y+2, r18	; 0x02
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	d9 f0       	breq	.+54     	; 0xf72 <Timer_deInit+0x58>
     f3c:	2a 81       	ldd	r18, Y+2	; 0x02
     f3e:	3b 81       	ldd	r19, Y+3	; 0x03
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	59 f1       	breq	.+86     	; 0xf9c <Timer_deInit+0x82>
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	c1 f5       	brne	.+112    	; 0xfbe <Timer_deInit+0xa4>
    {
        case TIMER0_ID:
            TCCR0 = 0;
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE0);
     f54:	a9 e5       	ldi	r26, 0x59	; 89
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e9 e5       	ldi	r30, 0x59	; 89
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE0);
     f62:	a9 e5       	ldi	r26, 0x59	; 89
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e9 e5       	ldi	r30, 0x59	; 89
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
     f70:	26 c0       	rjmp	.+76     	; 0xfbe <Timer_deInit+0xa4>
            break;
        case TIMER1_ID:
            TCCR1A = 0;
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	10 82       	st	Z, r1
            TCCR1B = 0;
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE1A);
     f7e:	a9 e5       	ldi	r26, 0x59	; 89
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 e5       	ldi	r30, 0x59	; 89
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7e       	andi	r24, 0xEF	; 239
     f8a:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE1);
     f8c:	a9 e5       	ldi	r26, 0x59	; 89
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e9 e5       	ldi	r30, 0x59	; 89
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	8c 93       	st	X, r24
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <Timer_deInit+0xa4>
            break;
        case TIMER2_ID:
            TCCR2 = 0;
     f9c:	e5 e4       	ldi	r30, 0x45	; 69
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1
            CLEAR_BIT(TIMSK, OCIE2);
     fa2:	a9 e5       	ldi	r26, 0x59	; 89
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 e5       	ldi	r30, 0x59	; 89
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 77       	andi	r24, 0x7F	; 127
     fae:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE2);
     fb0:	a9 e5       	ldi	r26, 0x59	; 89
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e9 e5       	ldi	r30, 0x59	; 89
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	8c 93       	st	X, r24
            break;
    }
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), uint8 timer_ID)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <Timer_setCallBack+0x6>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <Timer_setCallBack+0x8>
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6b 83       	std	Y+3, r22	; 0x03
    switch(timer_ID)
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	81 f0       	breq	.+32     	; 0x1012 <Timer_setCallBack+0x48>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	91 f0       	breq	.+36     	; 0x1020 <Timer_setCallBack+0x56>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 f4       	brne	.+40     	; 0x102c <Timer_setCallBack+0x62>
    {
        case TIMER0_ID:
            g_timer0CallbackPtr = a_ptr;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	90 93 7d 00 	sts	0x007D, r25
    100c:	80 93 7c 00 	sts	0x007C, r24
    1010:	0d c0       	rjmp	.+26     	; 0x102c <Timer_setCallBack+0x62>
            break;
        case TIMER1_ID:
            g_timer1CallbackPtr = a_ptr;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	90 93 7f 00 	sts	0x007F, r25
    101a:	80 93 7e 00 	sts	0x007E, r24
    101e:	06 c0       	rjmp	.+12     	; 0x102c <Timer_setCallBack+0x62>
            break;
        case TIMER2_ID:
            g_timer2CallbackPtr = a_ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 81 00 	sts	0x0081, r25
    1028:	80 93 80 00 	sts	0x0080, r24
            break;
    }
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <__vector_11>:

/* ISR Definitions */
ISR(TIMER0_OVF_vect)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    if(g_timer0CallbackPtr != NULL_PTR)
    1066:	80 91 7c 00 	lds	r24, 0x007C
    106a:	90 91 7d 00 	lds	r25, 0x007D
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	29 f0       	breq	.+10     	; 0x107c <__vector_11+0x40>
    {
        (*g_timer0CallbackPtr)();
    1072:	e0 91 7c 00 	lds	r30, 0x007C
    1076:	f0 91 7d 00 	lds	r31, 0x007D
    107a:	09 95       	icall
    }
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    if(g_timer0CallbackPtr != NULL_PTR)
    10cc:	80 91 7c 00 	lds	r24, 0x007C
    10d0:	90 91 7d 00 	lds	r25, 0x007D
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <__vector_10+0x40>
    {
        (*g_timer0CallbackPtr)();
    10d8:	e0 91 7c 00 	lds	r30, 0x007C
    10dc:	f0 91 7d 00 	lds	r31, 0x007D
    10e0:	09 95       	icall
    }
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	0f 92       	push	r0
    1110:	11 24       	eor	r1, r1
    1112:	2f 93       	push	r18
    1114:	3f 93       	push	r19
    1116:	4f 93       	push	r20
    1118:	5f 93       	push	r21
    111a:	6f 93       	push	r22
    111c:	7f 93       	push	r23
    111e:	8f 93       	push	r24
    1120:	9f 93       	push	r25
    1122:	af 93       	push	r26
    1124:	bf 93       	push	r27
    1126:	ef 93       	push	r30
    1128:	ff 93       	push	r31
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    if(g_timer1CallbackPtr != NULL_PTR)
    1132:	80 91 7e 00 	lds	r24, 0x007E
    1136:	90 91 7f 00 	lds	r25, 0x007F
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	29 f0       	breq	.+10     	; 0x1148 <__vector_9+0x40>
    {
        (*g_timer1CallbackPtr)();
    113e:	e0 91 7e 00 	lds	r30, 0x007E
    1142:	f0 91 7f 00 	lds	r31, 0x007F
    1146:	09 95       	icall
    }
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    if(g_timer1CallbackPtr != NULL_PTR)
    1198:	80 91 7e 00 	lds	r24, 0x007E
    119c:	90 91 7f 00 	lds	r25, 0x007F
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__vector_7+0x40>
    {
        (*g_timer1CallbackPtr)();
    11a4:	e0 91 7e 00 	lds	r30, 0x007E
    11a8:	f0 91 7f 00 	lds	r31, 0x007F
    11ac:	09 95       	icall
    }
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    if(g_timer2CallbackPtr != NULL_PTR)
    11fe:	80 91 80 00 	lds	r24, 0x0080
    1202:	90 91 81 00 	lds	r25, 0x0081
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_5+0x40>
    {
        (*g_timer2CallbackPtr)();
    120a:	e0 91 80 00 	lds	r30, 0x0080
    120e:	f0 91 81 00 	lds	r31, 0x0081
    1212:	09 95       	icall
    }
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    if(g_timer2CallbackPtr != NULL_PTR)
    1264:	80 91 80 00 	lds	r24, 0x0080
    1268:	90 91 81 00 	lds	r25, 0x0081
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f0       	breq	.+10     	; 0x127a <__vector_4+0x40>
    {
        (*g_timer2CallbackPtr)();
    1270:	e0 91 80 00 	lds	r30, 0x0080
    1274:	f0 91 81 00 	lds	r31, 0x0081
    1278:	09 95       	icall
    }
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <PWM_Timer0_Start>:
 *
 * Parameters:
 *    - duty_cycle: The PWM duty cycle percentage (0% to 100%).
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Initialize Timer0 counter register */
    12ac:	e2 e5       	ldi	r30, 0x52	; 82
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	10 82       	st	Z, r1

	/* Set Output Compare Register (OCR0) based on duty cycle percentage */
	OCR0 = (duty_cycle * 255) / 100;
    12b2:	ec e5       	ldi	r30, 0x5C	; 92
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	48 2f       	mov	r20, r24
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	ca 01       	movw	r24, r20
    12be:	9c 01       	movw	r18, r24
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	c9 01       	movw	r24, r18
    12c6:	96 95       	lsr	r25
    12c8:	98 2f       	mov	r25, r24
    12ca:	88 27       	eor	r24, r24
    12cc:	97 95       	ror	r25
    12ce:	87 95       	ror	r24
    12d0:	82 1b       	sub	r24, r18
    12d2:	93 0b       	sbc	r25, r19
    12d4:	84 0f       	add	r24, r20
    12d6:	95 1f       	adc	r25, r21
    12d8:	24 e6       	ldi	r18, 0x64	; 100
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	b9 01       	movw	r22, r18
    12de:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodhi4>
    12e2:	cb 01       	movw	r24, r22
    12e4:	80 83       	st	Z, r24
	/* Configure Timer0:
	 * - Fast PWM Mode (WGM00 & WGM01 = 1)
	 * - Non-inverting mode (COM01 = 1, COM00 = 0)
	 * - Prescaler 64 (CS02 = 0, CS01 = 1, CS00 = 1)
	 */
	TCCR0 |= 0x6B;
    12e6:	a3 e5       	ldi	r26, 0x53	; 83
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e3 e5       	ldi	r30, 0x53	; 83
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8b 66       	ori	r24, 0x6B	; 107
    12f2:	8c 93       	st	X, r24

	/* Set PB3 (OC0) as output for PWM signal */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
}
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <PIR_init>:

/*
 * Description:
 * Initializes the PIR sensor by configuring the GPIO pin as an output.
 */
void PIR_init(void){
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_OUTPUT);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <PIR_getState>:
 *
 * Returns:
 *    - uint8: LOGIC_HIGH (1) if motion is detected, LOGIC_LOW (0) otherwise.
 */

uint8 PIR_getState(void){
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	uint8 motion_value;

	/* Check if the PIR sensor pin is set (motion detected) */
	if(BIT_IS_SET(PIR_SENSOR_PIN_REG, PIR_SENSOR_PIN)){
    1328:	e3 e3       	ldi	r30, 0x33	; 51
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	84 70       	andi	r24, 0x04	; 4
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	19 f0       	breq	.+6      	; 0x1340 <PIR_getState+0x22>
		motion_value = LOGIC_HIGH;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <PIR_getState+0x24>
	}
	else{
		motion_value = LOGIC_LOW;
    1340:	19 82       	std	Y+1, r1	; 0x01
	}

	return motion_value;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <TWI_init>:
/*******************************************************************************
 *                      Function Definitions                                   *
 *******************************************************************************/

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <TWI_init+0x6>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
     *     Normal Mode       100 Kb/s
     *     Fast Mode         400 Kb/s
     *     Fast Mode Plus    1 Mb/s
     *     High-Speed Mode   3.4 Mb/s (rarely used)
     */
    TWBR = Config_Ptr->bit_rate;
    135a:	20 e2       	ldi	r18, 0x20	; 32
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	81 81       	ldd	r24, Z+1	; 0x01
    1364:	92 81       	ldd	r25, Z+2	; 0x02
    1366:	a3 81       	ldd	r26, Z+3	; 0x03
    1368:	b4 81       	ldd	r27, Z+4	; 0x04
    136a:	f9 01       	movw	r30, r18
    136c:	80 83       	st	Z, r24
    TWSR = Config_Ptr->twi_pre;
    136e:	a1 e2       	ldi	r26, 0x21	; 33
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	85 81       	ldd	r24, Z+5	; 0x05
    1378:	8c 93       	st	X, r24

    /* Set the Two Wire Bus address for this device (used when it's a slave).
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address & 0x7F) << 1);
    137a:	a2 e2       	ldi	r26, 0x22	; 34
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e9 81       	ldd	r30, Y+1	; 0x01
    1380:	fa 81       	ldd	r31, Y+2	; 0x02
    1382:	80 81       	ld	r24, Z
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	8c 93       	st	X, r24

    /* Enable TWI module */
    TWCR = (1<<TWEN);
    138e:	e6 e5       	ldi	r30, 0x56	; 86
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	80 83       	st	Z, r24
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TWI_start>:

void TWI_start(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the start bit (TWINT=1).
     * Set the TWSTA bit to generate a start condition (TWSTA=1).
     * Enable the TWI module (TWEN=1).
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	84 ea       	ldi	r24, 0xA4	; 164
    13ae:	80 83       	st	Z, r24
    
    /* Wait for the TWINT flag to be set, indicating the start bit was sent */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13b0:	e6 e5       	ldi	r30, 0x56	; 86
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	dc f7       	brge	.-10     	; 0x13b0 <TWI_start+0x10>
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <TWI_stop>:

void TWI_stop(void)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before sending the stop bit (TWINT=1).
     * Set the TWSTO bit to generate a stop condition (TWSTO=1).
     * Enable the TWI module (TWEN=1).
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13c8:	e6 e5       	ldi	r30, 0x56	; 86
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	84 e9       	ldi	r24, 0x94	; 148
    13ce:	80 83       	st	Z, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
    /* Load the data byte into the TWI data register */
    TWDR = data;
    13e2:	e3 e2       	ldi	r30, 0x23	; 35
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	80 83       	st	Z, r24

    /*
     * Clear the TWINT flag before sending the data byte (TWINT=1).
     * Enable the TWI module (TWEN=1).
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    13ea:	e6 e5       	ldi	r30, 0x56	; 86
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	84 e8       	ldi	r24, 0x84	; 132
    13f0:	80 83       	st	Z, r24

    /* Wait for the TWINT flag to be set, indicating the data byte was sent */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	dc f7       	brge	.-10     	; 0x13f2 <TWI_writeByte+0x1c>
}
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading data (TWINT=1).
     * Enable sending ACK after receiving data (TWEA=1).
     * Enable the TWI module (TWEN=1).
     */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    140c:	e6 e5       	ldi	r30, 0x56	; 86
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	84 ec       	ldi	r24, 0xC4	; 196
    1412:	80 83       	st	Z, r24

    /* Wait for the TWINT flag to be set, indicating data was received */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1414:	e6 e5       	ldi	r30, 0x56	; 86
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 23       	and	r24, r24
    141c:	dc f7       	brge	.-10     	; 0x1414 <TWI_readByteWithACK+0x10>

    /* Return the received data byte */
    return TWDR;
    141e:	e3 e2       	ldi	r30, 0x23	; 35
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading data (TWINT=1).
     * Enable the TWI module (TWEN=1).
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1432:	e6 e5       	ldi	r30, 0x56	; 86
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	84 e8       	ldi	r24, 0x84	; 132
    1438:	80 83       	st	Z, r24

    /* Wait for the TWINT flag to be set, indicating data was received */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    143a:	e6 e5       	ldi	r30, 0x56	; 86
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	dc f7       	brge	.-10     	; 0x143a <TWI_readByteWithNACK+0x10>

    /* Return the received data byte */
    return TWDR;
    1444:	e3 e2       	ldi	r30, 0x23	; 35
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    uint8 status;

    /* Mask the TWSR register to get the last 5 status bits (eliminate the first 3) */
    status = TWSR & 0xF8;
    145a:	e1 e2       	ldi	r30, 0x21	; 33
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	88 7f       	andi	r24, 0xF8	; 248
    1462:	89 83       	std	Y+1, r24	; 0x01

    /* Return the status value */
    return status;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_setupPinDirection+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_setupPinDirection+0x8>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
    1480:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	08 f0       	brcs	.+2      	; 0x148a <GPIO_setupPinDirection+0x1c>
    1488:	d5 c0       	rjmp	.+426    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	08 f0       	brcs	.+2      	; 0x1492 <GPIO_setupPinDirection+0x24>
    1490:	d1 c0       	rjmp	.+418    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3d 83       	std	Y+5, r19	; 0x05
    149a:	2c 83       	std	Y+4, r18	; 0x04
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <GPIO_setupPinDirection+0x3a>
    14a6:	43 c0       	rjmp	.+134    	; 0x152e <GPIO_setupPinDirection+0xc0>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	2c f4       	brge	.+10     	; 0x14bc <GPIO_setupPinDirection+0x4e>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <GPIO_setupPinDirection+0x68>
    14ba:	bc c0       	rjmp	.+376    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x5a>
    14c6:	5f c0       	rjmp	.+190    	; 0x1586 <GPIO_setupPinDirection+0x118>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <GPIO_setupPinDirection+0x66>
    14d2:	85 c0       	rjmp	.+266    	; 0x15de <GPIO_setupPinDirection+0x170>
    14d4:	af c0       	rjmp	.+350    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	a1 f4       	brne	.+40     	; 0x1504 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14dc:	aa e3       	ldi	r26, 0x3A	; 58
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ea e3       	ldi	r30, 0x3A	; 58
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_setupPinDirection+0x8c>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_setupPinDirection+0x88>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	98 c0       	rjmp	.+304    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1504:	aa e3       	ldi	r26, 0x3A	; 58
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0xb4>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0xb0>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	83 c0       	rjmp	.+262    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1534:	a7 e3       	ldi	r26, 0x37	; 55
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_setupPinDirection+0xe4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_setupPinDirection+0xe0>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	6c c0       	rjmp	.+216    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    155c:	a7 e3       	ldi	r26, 0x37	; 55
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e7 e3       	ldi	r30, 0x37	; 55
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0x10c>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0x108>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	57 c0       	rjmp	.+174    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_setupPinDirection+0x13c>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_setupPinDirection+0x138>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_setupPinDirection+0x164>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_setupPinDirection+0x160>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	2b c0       	rjmp	.+86     	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	a1 f4       	brne	.+40     	; 0x160c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15e4:	a1 e3       	ldi	r26, 0x31	; 49
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e1 e3       	ldi	r30, 0x31	; 49
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_setupPinDirection+0x194>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_setupPinDirection+0x190>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    160c:	a1 e3       	ldi	r26, 0x31	; 49
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_setupPinDirection+0x1bc>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_setupPinDirection+0x1b8>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_writePin+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_writePin+0x8>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
    1656:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT){
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	08 f0       	brcs	.+2      	; 0x1660 <GPIO_writePin+0x1c>
    165e:	d5 c0       	rjmp	.+426    	; 0x180a <GPIO_writePin+0x1c6>
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GPIO_writePin+0x24>
    1666:	d1 c0       	rjmp	.+418    	; 0x180a <GPIO_writePin+0x1c6>
		/* DO NOTHING */
	}
	else{
		switch(port_num){
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <GPIO_writePin+0x3a>
    167c:	43 c0       	rjmp	.+134    	; 0x1704 <GPIO_writePin+0xc0>
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <GPIO_writePin+0x4e>
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	71 f0       	breq	.+28     	; 0x16ac <GPIO_writePin+0x68>
    1690:	bc c0       	rjmp	.+376    	; 0x180a <GPIO_writePin+0x1c6>
    1692:	2c 81       	ldd	r18, Y+4	; 0x04
    1694:	3d 81       	ldd	r19, Y+5	; 0x05
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_writePin+0x5a>
    169c:	5f c0       	rjmp	.+190    	; 0x175c <GPIO_writePin+0x118>
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_writePin+0x66>
    16a8:	85 c0       	rjmp	.+266    	; 0x17b4 <GPIO_writePin+0x170>
    16aa:	af c0       	rjmp	.+350    	; 0x180a <GPIO_writePin+0x1c6>
		
		case PORTA_ID:

			if(value == LOGIC_HIGH){
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	a1 f4       	brne	.+40     	; 0x16da <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    16b2:	ab e3       	ldi	r26, 0x3B	; 59
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <GPIO_writePin+0x8c>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <GPIO_writePin+0x88>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	98 c0       	rjmp	.+304    	; 0x180a <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTA,pin_num);
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0xb4>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0xb0>
    16fc:	80 95       	com	r24
    16fe:	84 23       	and	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	83 c0       	rjmp	.+262    	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
			
		case PORTB_ID:
		
			if(value == LOGIC_HIGH){
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    170a:	a8 e3       	ldi	r26, 0x38	; 56
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_writePin+0xe4>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_writePin+0xe0>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	6c c0       	rjmp	.+216    	; 0x180a <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTB,pin_num);
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0x10c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0x108>
    1754:	80 95       	com	r24
    1756:	84 23       	and	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	57 c0       	rjmp	.+174    	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
		
		case PORTC_ID:
		
			if(value == LOGIC_HIGH){
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1762:	a5 e3       	ldi	r26, 0x35	; 53
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e3       	ldi	r30, 0x35	; 53
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_writePin+0x13c>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_writePin+0x138>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	40 c0       	rjmp	.+128    	; 0x180a <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTC,pin_num);
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_writePin+0x164>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_writePin+0x160>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	2b c0       	rjmp	.+86     	; 0x180a <GPIO_writePin+0x1c6>
			}
			break;
			
		case PORTD_ID:
		
			if(value == LOGIC_HIGH){
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_writePin+0x194>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_writePin+0x190>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <GPIO_writePin+0x1c6>
			}
			
			else{
				CLEAR_BIT(PORTD,pin_num);
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_writePin+0x1bc>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_writePin+0x1b8>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <GPIO_readPin+0x6>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <GPIO_readPin+0x8>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_readPin+0xa>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT){
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	18 f4       	brcc	.+6      	; 0x1838 <GPIO_readPin+0x1e>
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	88 30       	cpi	r24, 0x08	; 8
    1836:	10 f0       	brcs	.+4      	; 0x183c <GPIO_readPin+0x22>
		return 0;
    1838:	1d 82       	std	Y+5, r1	; 0x05
    183a:	82 c0       	rjmp	.+260    	; 0x1940 <GPIO_readPin+0x126>
	}
	else{
		
		switch(port_num){
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	4b 81       	ldd	r20, Y+3	; 0x03
    1848:	5c 81       	ldd	r21, Y+4	; 0x04
    184a:	41 30       	cpi	r20, 0x01	; 1
    184c:	51 05       	cpc	r21, r1
    184e:	79 f1       	breq	.+94     	; 0x18ae <GPIO_readPin+0x94>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	91 05       	cpc	r25, r1
    1858:	34 f4       	brge	.+12     	; 0x1866 <GPIO_readPin+0x4c>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	69 f0       	breq	.+26     	; 0x187e <GPIO_readPin+0x64>
    1864:	6c c0       	rjmp	.+216    	; 0x193e <GPIO_readPin+0x124>
    1866:	4b 81       	ldd	r20, Y+3	; 0x03
    1868:	5c 81       	ldd	r21, Y+4	; 0x04
    186a:	42 30       	cpi	r20, 0x02	; 2
    186c:	51 05       	cpc	r21, r1
    186e:	b9 f1       	breq	.+110    	; 0x18de <GPIO_readPin+0xc4>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <GPIO_readPin+0x62>
    187a:	49 c0       	rjmp	.+146    	; 0x190e <GPIO_readPin+0xf4>
    187c:	60 c0       	rjmp	.+192    	; 0x193e <GPIO_readPin+0x124>
		
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    187e:	e9 e3       	ldi	r30, 0x39	; 57
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_readPin+0x7c>
    1892:	55 95       	asr	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_readPin+0x78>
    189a:	ca 01       	movw	r24, r20
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	90 70       	andi	r25, 0x00	; 0
    18a0:	88 23       	and	r24, r24
    18a2:	19 f0       	breq	.+6      	; 0x18aa <GPIO_readPin+0x90>
				return 1;
    18a4:	51 e0       	ldi	r21, 0x01	; 1
    18a6:	5d 83       	std	Y+5, r21	; 0x05
    18a8:	4b c0       	rjmp	.+150    	; 0x1940 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    18aa:	1d 82       	std	Y+5, r1	; 0x05
    18ac:	49 c0       	rjmp	.+146    	; 0x1940 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    18ae:	e6 e3       	ldi	r30, 0x36	; 54
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_readPin+0xac>
    18c2:	55 95       	asr	r21
    18c4:	47 95       	ror	r20
    18c6:	8a 95       	dec	r24
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_readPin+0xa8>
    18ca:	ca 01       	movw	r24, r20
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	90 70       	andi	r25, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	19 f0       	breq	.+6      	; 0x18da <GPIO_readPin+0xc0>
				return 1;
    18d4:	51 e0       	ldi	r21, 0x01	; 1
    18d6:	5d 83       	std	Y+5, r21	; 0x05
    18d8:	33 c0       	rjmp	.+102    	; 0x1940 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    18da:	1d 82       	std	Y+5, r1	; 0x05
    18dc:	31 c0       	rjmp	.+98     	; 0x1940 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    18de:	e3 e3       	ldi	r30, 0x33	; 51
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_readPin+0xdc>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_readPin+0xd8>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	88 23       	and	r24, r24
    1902:	19 f0       	breq	.+6      	; 0x190a <GPIO_readPin+0xf0>
				return 1;
    1904:	51 e0       	ldi	r21, 0x01	; 1
    1906:	5d 83       	std	Y+5, r21	; 0x05
    1908:	1b c0       	rjmp	.+54     	; 0x1940 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    190a:	1d 82       	std	Y+5, r1	; 0x05
    190c:	19 c0       	rjmp	.+50     	; 0x1940 <GPIO_readPin+0x126>
			}
			break;
			
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    190e:	e0 e3       	ldi	r30, 0x30	; 48
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_readPin+0x10c>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_readPin+0x108>
    192a:	ca 01       	movw	r24, r20
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	88 23       	and	r24, r24
    1932:	19 f0       	breq	.+6      	; 0x193a <GPIO_readPin+0x120>
				return 1;
    1934:	51 e0       	ldi	r21, 0x01	; 1
    1936:	5d 83       	std	Y+5, r21	; 0x05
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <GPIO_readPin+0x126>
			}
			else{
				return 0; 
    193a:	1d 82       	std	Y+5, r1	; 0x05
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <GPIO_readPin+0x126>
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	8e 83       	std	Y+6, r24	; 0x06
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	26 96       	adiw	r28, 0x06	; 6
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_setupPortDirection+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_setupPortDirection+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	90 f5       	brcc	.+100    	; 0x19d2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3c 83       	std	Y+4, r19	; 0x04
    1976:	2b 83       	std	Y+3, r18	; 0x03
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	d1 f0       	breq	.+52     	; 0x19b6 <GPIO_setupPortDirection+0x5e>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <GPIO_setupPortDirection+0x3e>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	61 f0       	breq	.+24     	; 0x19ac <GPIO_setupPortDirection+0x54>
    1994:	1e c0       	rjmp	.+60     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	81 f0       	breq	.+32     	; 0x19c0 <GPIO_setupPortDirection+0x68>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <GPIO_setupPortDirection+0x72>
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	0e c0       	rjmp	.+28     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c0:	e4 e3       	ldi	r30, 0x34	; 52
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	80 83       	st	Z, r24
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <GPIO_writePort+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_writePort+0x8>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	90 f5       	brcc	.+100    	; 0x1a5a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}

	else{

		switch(port_num){
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3c 83       	std	Y+4, r19	; 0x04
    19fe:	2b 83       	std	Y+3, r18	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	d1 f0       	breq	.+52     	; 0x1a3e <GPIO_writePort+0x5e>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <GPIO_writePort+0x3e>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <GPIO_writePort+0x54>
    1a1c:	1e c0       	rjmp	.+60     	; 0x1a5a <GPIO_writePort+0x7a>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <GPIO_writePort+0x68>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	91 05       	cpc	r25, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <GPIO_writePort+0x72>
    1a32:	13 c0       	rjmp	.+38     	; 0x1a5a <GPIO_writePort+0x7a>

			case PORTA_ID:
				PORTA = value;
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	0e c0       	rjmp	.+28     	; 0x1a5a <GPIO_writePort+0x7a>
				break;

			case PORTB_ID:
				PORTB = value;
    1a3e:	e8 e3       	ldi	r30, 0x38	; 56
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
    1a46:	09 c0       	rjmp	.+18     	; 0x1a5a <GPIO_writePort+0x7a>
				break;

			case PORTC_ID:
				PORTC = value;
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <GPIO_writePort+0x7a>
				break;

			case PORTD_ID:
				PORTD = value;
    1a52:	e2 e3       	ldi	r30, 0x32	; 50
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
				break;
		}
	}
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <GPIO_readPort+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_readPort+0x8>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS){
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	10 f0       	brcs	.+4      	; 0x1a82 <GPIO_readPort+0x1a>
		return 0;
    1a7e:	1c 82       	std	Y+4, r1	; 0x04
    1a80:	34 c0       	rjmp	.+104    	; 0x1aea <GPIO_readPort+0x82>
	}

	else{

		switch(port_num){
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	3b 83       	std	Y+3, r19	; 0x03
    1a8a:	2a 83       	std	Y+2, r18	; 0x02
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	91 05       	cpc	r25, r1
    1a94:	d1 f0       	breq	.+52     	; 0x1aca <GPIO_readPort+0x62>
    1a96:	2a 81       	ldd	r18, Y+2	; 0x02
    1a98:	3b 81       	ldd	r19, Y+3	; 0x03
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <GPIO_readPort+0x42>
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <GPIO_readPort+0x58>
    1aa8:	1f c0       	rjmp	.+62     	; 0x1ae8 <GPIO_readPort+0x80>
    1aaa:	2a 81       	ldd	r18, Y+2	; 0x02
    1aac:	3b 81       	ldd	r19, Y+3	; 0x03
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	81 f0       	breq	.+32     	; 0x1ad4 <GPIO_readPort+0x6c>
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	91 05       	cpc	r25, r1
    1abc:	81 f0       	breq	.+32     	; 0x1ade <GPIO_readPort+0x76>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <GPIO_readPort+0x80>

		case PORTA_ID:
			return PINA;
    1ac0:	e9 e3       	ldi	r30, 0x39	; 57
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	90 81       	ld	r25, Z
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	10 c0       	rjmp	.+32     	; 0x1aea <GPIO_readPort+0x82>

		case PORTB_ID:
			return PINB;
    1aca:	e6 e3       	ldi	r30, 0x36	; 54
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	20 81       	ld	r18, Z
    1ad0:	2c 83       	std	Y+4, r18	; 0x04
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <GPIO_readPort+0x82>

		case PORTC_ID:
			return PINC;
    1ad4:	e3 e3       	ldi	r30, 0x33	; 51
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	30 81       	ld	r19, Z
    1ada:	3c 83       	std	Y+4, r19	; 0x04
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <GPIO_readPort+0x82>

		case PORTD_ID:
			return PIND;
    1ade:	e0 e3       	ldi	r30, 0x30	; 48
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8c 83       	std	Y+4, r24	; 0x04
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <GPIO_readPort+0x82>
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_readPort+0x86>

		}

	}
}
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	9d 83       	std	Y+5, r25	; 0x05
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../I2C/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <EEPROM_writeByte+0x6>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <EEPROM_writeByte+0x8>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b12:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b16:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1b1a:	88 30       	cpi	r24, 0x08	; 8
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <EEPROM_writeByte+0x22>
        return ERROR;
    1b1e:	1c 82       	std	Y+4, r1	; 0x04
    1b20:	28 c0       	rjmp	.+80     	; 0x1b72 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	80 70       	andi	r24, 0x00	; 0
    1b28:	97 70       	andi	r25, 0x07	; 7
    1b2a:	88 0f       	add	r24, r24
    1b2c:	89 2f       	mov	r24, r25
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 0b       	sbc	r25, r25
    1b32:	91 95       	neg	r25
    1b34:	80 6a       	ori	r24, 0xA0	; 160
    1b36:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b3a:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1b3e:	88 31       	cpi	r24, 0x18	; 24
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <EEPROM_writeByte+0x46>
        return ERROR; 
    1b42:	1c 82       	std	Y+4, r1	; 0x04
    1b44:	16 c0       	rjmp	.+44     	; 0x1b72 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b4c:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1b50:	88 32       	cpi	r24, 0x28	; 40
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <EEPROM_writeByte+0x58>
        return ERROR;
    1b54:	1c 82       	std	Y+4, r1	; 0x04
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b5e:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1b62:	88 32       	cpi	r24, 0x28	; 40
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <EEPROM_writeByte+0x6a>
        return ERROR;
    1b66:	1c 82       	std	Y+4, r1	; 0x04
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b6a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <TWI_stop>
	
    return SUCCESS;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	8c 83       	std	Y+4, r24	; 0x04
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <EEPROM_readByte+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <EEPROM_readByte+0x8>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	7c 83       	std	Y+4, r23	; 0x04
    1b96:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b98:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b9c:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1ba0:	88 30       	cpi	r24, 0x08	; 8
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <EEPROM_readByte+0x26>
        return ERROR;
    1ba4:	1d 82       	std	Y+5, r1	; 0x05
    1ba6:	44 c0       	rjmp	.+136    	; 0x1c30 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	80 70       	andi	r24, 0x00	; 0
    1bae:	97 70       	andi	r25, 0x07	; 7
    1bb0:	88 0f       	add	r24, r24
    1bb2:	89 2f       	mov	r24, r25
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	91 95       	neg	r25
    1bba:	80 6a       	ori	r24, 0xA0	; 160
    1bbc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1bc0:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1bc4:	88 31       	cpi	r24, 0x18	; 24
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <EEPROM_readByte+0x4a>
        return ERROR;
    1bc8:	1d 82       	std	Y+5, r1	; 0x05
    1bca:	32 c0       	rjmp	.+100    	; 0x1c30 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bd2:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1bd6:	88 32       	cpi	r24, 0x28	; 40
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <EEPROM_readByte+0x5c>
        return ERROR;
    1bda:	1d 82       	std	Y+5, r1	; 0x05
    1bdc:	29 c0       	rjmp	.+82     	; 0x1c30 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1bde:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1be2:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1be6:	80 31       	cpi	r24, 0x10	; 16
    1be8:	11 f0       	breq	.+4      	; 0x1bee <EEPROM_readByte+0x6c>
        return ERROR;
    1bea:	1d 82       	std	Y+5, r1	; 0x05
    1bec:	21 c0       	rjmp	.+66     	; 0x1c30 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	80 70       	andi	r24, 0x00	; 0
    1bf4:	97 70       	andi	r25, 0x07	; 7
    1bf6:	88 0f       	add	r24, r24
    1bf8:	89 2f       	mov	r24, r25
    1bfa:	88 1f       	adc	r24, r24
    1bfc:	99 0b       	sbc	r25, r25
    1bfe:	91 95       	neg	r25
    1c00:	81 6a       	ori	r24, 0xA1	; 161
    1c02:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c06:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1c0a:	80 34       	cpi	r24, 0x40	; 64
    1c0c:	11 f0       	breq	.+4      	; 0x1c12 <EEPROM_readByte+0x90>
        return ERROR;
    1c0e:	1d 82       	std	Y+5, r1	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c12:	0e 94 15 0a 	call	0x142a	; 0x142a <TWI_readByteWithNACK>
    1c16:	eb 81       	ldd	r30, Y+3	; 0x03
    1c18:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c1c:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_getStatus>
    1c20:	88 35       	cpi	r24, 0x58	; 88
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <EEPROM_readByte+0xa6>
        return ERROR;
    1c24:	1d 82       	std	Y+5, r1	; 0x05
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c28:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <TWI_stop>

    return SUCCESS;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <DC_MOTOR_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DC_MOTOR_init(void){
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62

	/* Setup the DC Motor pins direction */
	GPIO_setupPinDirection(DC_MOTOR_PIN1_PORT, DC_MOTOR_IN1_PIN, PIN_OUTPUT);
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	66 e0       	ldi	r22, 0x06	; 6
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PIN2_PORT, DC_MOTOR_IN2_PIN, PIN_OUTPUT);
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>

	/* Stop the motor at first */
	DC_MOTOR_rotate(STOP, 0);
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DC_MOTOR_rotate>

}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <DC_MOTOR_rotate>:


void DC_MOTOR_rotate(DC_MOTOR_state state, uint8 speed){
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <DC_MOTOR_rotate+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	6a 83       	std	Y+2, r22	; 0x02


	/* Set the duty cycle of the PWM */
	PWM_Timer0_Start(speed);
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <PWM_Timer0_Start>

	/* Setup DC Motor pins to rotate clock wise*/
	if(state == CW){
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	88 23       	and	r24, r24
    1c84:	59 f4       	brne	.+22     	; 0x1c9c <DC_MOTOR_rotate+0x30>
		GPIO_writePin(DC_MOTOR_PIN1_PORT, DC_MOTOR_IN1_PIN, LOGIC_HIGH);
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	66 e0       	ldi	r22, 0x06	; 6
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT, DC_MOTOR_IN2_PIN, LOGIC_LOW);
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	67 e0       	ldi	r22, 0x07	; 7
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    1c9a:	18 c0       	rjmp	.+48     	; 0x1ccc <DC_MOTOR_rotate+0x60>
	}

	/* Setup DC Motor pins to rotate anti-clock wise*/
	else if(state == ACW){
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	59 f4       	brne	.+22     	; 0x1cb8 <DC_MOTOR_rotate+0x4c>
		GPIO_writePin(DC_MOTOR_PIN1_PORT, DC_MOTOR_IN1_PIN, LOGIC_LOW);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	66 e0       	ldi	r22, 0x06	; 6
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT, DC_MOTOR_IN2_PIN, LOGIC_HIGH);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	67 e0       	ldi	r22, 0x07	; 7
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
    1cb6:	0a c0       	rjmp	.+20     	; 0x1ccc <DC_MOTOR_rotate+0x60>
	}

	/* Setup DC Motor pins to stop */
	else{
		GPIO_writePin(DC_MOTOR_PIN1_PORT, DC_MOTOR_IN1_PIN, LOGIC_LOW);
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	66 e0       	ldi	r22, 0x06	; 6
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PIN2_PORT, DC_MOTOR_IN2_PIN, LOGIC_LOW);
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	67 e0       	ldi	r22, 0x07	; 7
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>

	}


}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <BUZZER_init>:

 *******************************************************************************/

#include "buzzer.h"

void BUZZER_init(void){
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62

	/* setup the pin direction to be output */
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	67 e0       	ldi	r22, 0x07	; 7
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_setupPinDirection>

	/* off buzzer initially*/
	BUZZER_off();
    1ce8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <BUZZER_off>

}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <BUZZER_on>:

void BUZZER_on(void){
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62

	/* write logic high on the pin to enable the buzzer */
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	67 e0       	ldi	r22, 0x07	; 7
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>

}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <BUZZER_off>:

void BUZZER_off(void){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62

	/* write logic low on the pin to disable the buzzer */
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	67 e0       	ldi	r22, 0x07	; 7
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePin>

}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <Timer1_handler>:
uint8 i = 0;

/*
 * ISR Callback for Timer1: Increments counter variable with each timer interrupt.
 */
void Timer1_handler(void) {
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    ++counter;
    1d2a:	80 91 82 00 	lds	r24, 0x0082
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	80 93 82 00 	sts	0x0082, r24
}
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <main>:

int main() {
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	c9 56       	subi	r28, 0x69	; 105
    1d48:	d0 40       	sbci	r29, 0x00	; 0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61

    // UART Configuration and Initialization
    UART_ConfigType uart_cfg = { UART_8_BIT, UART_PARITY_DISABLED,
            UART_1_STOP_BIT, 9600 };
    1d54:	ce 01       	movw	r24, r28
    1d56:	89 5b       	subi	r24, 0xB9	; 185
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	6d 96       	adiw	r28, 0x1d	; 29
    1d5c:	9f af       	std	Y+63, r25	; 0x3f
    1d5e:	8e af       	std	Y+62, r24	; 0x3e
    1d60:	6d 97       	sbiw	r28, 0x1d	; 29
    1d62:	85 e7       	ldi	r24, 0x75	; 117
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	6f 96       	adiw	r28, 0x1f	; 31
    1d68:	9f af       	std	Y+63, r25	; 0x3f
    1d6a:	8e af       	std	Y+62, r24	; 0x3e
    1d6c:	6f 97       	sbiw	r28, 0x1f	; 31
    1d6e:	97 e0       	ldi	r25, 0x07	; 7
    1d70:	a0 96       	adiw	r28, 0x20	; 32
    1d72:	9f af       	std	Y+63, r25	; 0x3f
    1d74:	a0 97       	sbiw	r28, 0x20	; 32
    1d76:	6f 96       	adiw	r28, 0x1f	; 31
    1d78:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d7c:	6f 97       	sbiw	r28, 0x1f	; 31
    1d7e:	00 80       	ld	r0, Z
    1d80:	6f 96       	adiw	r28, 0x1f	; 31
    1d82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d86:	6f 97       	sbiw	r28, 0x1f	; 31
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	6f 96       	adiw	r28, 0x1f	; 31
    1d8c:	9f af       	std	Y+63, r25	; 0x3f
    1d8e:	8e af       	std	Y+62, r24	; 0x3e
    1d90:	6f 97       	sbiw	r28, 0x1f	; 31
    1d92:	6d 96       	adiw	r28, 0x1d	; 29
    1d94:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d96:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d98:	6d 97       	sbiw	r28, 0x1d	; 29
    1d9a:	00 82       	st	Z, r0
    1d9c:	6d 96       	adiw	r28, 0x1d	; 29
    1d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1da2:	6d 97       	sbiw	r28, 0x1d	; 29
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	6d 96       	adiw	r28, 0x1d	; 29
    1da8:	9f af       	std	Y+63, r25	; 0x3f
    1daa:	8e af       	std	Y+62, r24	; 0x3e
    1dac:	6d 97       	sbiw	r28, 0x1d	; 29
    1dae:	a0 96       	adiw	r28, 0x20	; 32
    1db0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1db2:	a0 97       	sbiw	r28, 0x20	; 32
    1db4:	91 50       	subi	r25, 0x01	; 1
    1db6:	a0 96       	adiw	r28, 0x20	; 32
    1db8:	9f af       	std	Y+63, r25	; 0x3f
    1dba:	a0 97       	sbiw	r28, 0x20	; 32
    1dbc:	a0 96       	adiw	r28, 0x20	; 32
    1dbe:	ef ad       	ldd	r30, Y+63	; 0x3f
    1dc0:	a0 97       	sbiw	r28, 0x20	; 32
    1dc2:	ee 23       	and	r30, r30
    1dc4:	c1 f6       	brne	.-80     	; 0x1d76 <main+0x3c>
    UART_init(&uart_cfg);
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	89 5b       	subi	r24, 0xB9	; 185
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

    // Buzzer Initialization
    BUZZER_init();
    1dd0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <BUZZER_init>

    // I2C Configuration and Initialization
    TWI_ConfigType i2c_cfg = { 0x01, 2, TWI_PRE_1 };
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	82 5b       	subi	r24, 0xB2	; 178
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	a2 96       	adiw	r28, 0x22	; 34
    1ddc:	9f af       	std	Y+63, r25	; 0x3f
    1dde:	8e af       	std	Y+62, r24	; 0x3e
    1de0:	a2 97       	sbiw	r28, 0x22	; 34
    1de2:	8f e6       	ldi	r24, 0x6F	; 111
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a4 96       	adiw	r28, 0x24	; 36
    1de8:	9f af       	std	Y+63, r25	; 0x3f
    1dea:	8e af       	std	Y+62, r24	; 0x3e
    1dec:	a4 97       	sbiw	r28, 0x24	; 36
    1dee:	96 e0       	ldi	r25, 0x06	; 6
    1df0:	a5 96       	adiw	r28, 0x25	; 37
    1df2:	9f af       	std	Y+63, r25	; 0x3f
    1df4:	a5 97       	sbiw	r28, 0x25	; 37
    1df6:	a4 96       	adiw	r28, 0x24	; 36
    1df8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dfc:	a4 97       	sbiw	r28, 0x24	; 36
    1dfe:	00 80       	ld	r0, Z
    1e00:	a4 96       	adiw	r28, 0x24	; 36
    1e02:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e06:	a4 97       	sbiw	r28, 0x24	; 36
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	a4 96       	adiw	r28, 0x24	; 36
    1e0c:	9f af       	std	Y+63, r25	; 0x3f
    1e0e:	8e af       	std	Y+62, r24	; 0x3e
    1e10:	a4 97       	sbiw	r28, 0x24	; 36
    1e12:	a2 96       	adiw	r28, 0x22	; 34
    1e14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e18:	a2 97       	sbiw	r28, 0x22	; 34
    1e1a:	00 82       	st	Z, r0
    1e1c:	a2 96       	adiw	r28, 0x22	; 34
    1e1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e20:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e22:	a2 97       	sbiw	r28, 0x22	; 34
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	a2 96       	adiw	r28, 0x22	; 34
    1e28:	9f af       	std	Y+63, r25	; 0x3f
    1e2a:	8e af       	std	Y+62, r24	; 0x3e
    1e2c:	a2 97       	sbiw	r28, 0x22	; 34
    1e2e:	a5 96       	adiw	r28, 0x25	; 37
    1e30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e32:	a5 97       	sbiw	r28, 0x25	; 37
    1e34:	91 50       	subi	r25, 0x01	; 1
    1e36:	a5 96       	adiw	r28, 0x25	; 37
    1e38:	9f af       	std	Y+63, r25	; 0x3f
    1e3a:	a5 97       	sbiw	r28, 0x25	; 37
    1e3c:	a5 96       	adiw	r28, 0x25	; 37
    1e3e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e40:	a5 97       	sbiw	r28, 0x25	; 37
    1e42:	ee 23       	and	r30, r30
    1e44:	c1 f6       	brne	.-80     	; 0x1df6 <main+0xbc>
    TWI_init(&i2c_cfg);
    1e46:	ce 01       	movw	r24, r28
    1e48:	82 5b       	subi	r24, 0xB2	; 178
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	0e 94 a6 09 	call	0x134c	; 0x134c <TWI_init>

    // Motor Initialization
    DC_MOTOR_init();
    1e50:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DC_MOTOR_init>

    // PIR Sensor Initialization
    PIR_init();
    1e54:	0e 94 83 09 	call	0x1306	; 0x1306 <PIR_init>

    // Timer1 Configuration and Initialization for timeout tracking
    SREG |= (1<<7);  // Enable global interrupts
    1e58:	af e5       	ldi	r26, 0x5F	; 95
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ef e5       	ldi	r30, 0x5F	; 95
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	80 68       	ori	r24, 0x80	; 128
    1e64:	8c 93       	st	X, r24
    Timer_ConfigType timer1 = { 0, 31250, TIMER1_ID, TIMER_PRESCALE_256,
            TIMER_COMPARE_MODE };
    1e66:	ce 01       	movw	r24, r28
    1e68:	8c 5a       	subi	r24, 0xAC	; 172
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	a7 96       	adiw	r28, 0x27	; 39
    1e6e:	9f af       	std	Y+63, r25	; 0x3f
    1e70:	8e af       	std	Y+62, r24	; 0x3e
    1e72:	a7 97       	sbiw	r28, 0x27	; 39
    1e74:	88 e6       	ldi	r24, 0x68	; 104
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 96       	adiw	r28, 0x29	; 41
    1e7a:	9f af       	std	Y+63, r25	; 0x3f
    1e7c:	8e af       	std	Y+62, r24	; 0x3e
    1e7e:	a9 97       	sbiw	r28, 0x29	; 41
    1e80:	97 e0       	ldi	r25, 0x07	; 7
    1e82:	aa 96       	adiw	r28, 0x2a	; 42
    1e84:	9f af       	std	Y+63, r25	; 0x3f
    1e86:	aa 97       	sbiw	r28, 0x2a	; 42
    1e88:	a9 96       	adiw	r28, 0x29	; 41
    1e8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e8e:	a9 97       	sbiw	r28, 0x29	; 41
    1e90:	00 80       	ld	r0, Z
    1e92:	a9 96       	adiw	r28, 0x29	; 41
    1e94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e98:	a9 97       	sbiw	r28, 0x29	; 41
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	a9 96       	adiw	r28, 0x29	; 41
    1e9e:	9f af       	std	Y+63, r25	; 0x3f
    1ea0:	8e af       	std	Y+62, r24	; 0x3e
    1ea2:	a9 97       	sbiw	r28, 0x29	; 41
    1ea4:	a7 96       	adiw	r28, 0x27	; 39
    1ea6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ea8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eaa:	a7 97       	sbiw	r28, 0x27	; 39
    1eac:	00 82       	st	Z, r0
    1eae:	a7 96       	adiw	r28, 0x27	; 39
    1eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb4:	a7 97       	sbiw	r28, 0x27	; 39
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	a7 96       	adiw	r28, 0x27	; 39
    1eba:	9f af       	std	Y+63, r25	; 0x3f
    1ebc:	8e af       	std	Y+62, r24	; 0x3e
    1ebe:	a7 97       	sbiw	r28, 0x27	; 39
    1ec0:	aa 96       	adiw	r28, 0x2a	; 42
    1ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ec4:	aa 97       	sbiw	r28, 0x2a	; 42
    1ec6:	91 50       	subi	r25, 0x01	; 1
    1ec8:	aa 96       	adiw	r28, 0x2a	; 42
    1eca:	9f af       	std	Y+63, r25	; 0x3f
    1ecc:	aa 97       	sbiw	r28, 0x2a	; 42
    1ece:	aa 96       	adiw	r28, 0x2a	; 42
    1ed0:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ed2:	aa 97       	sbiw	r28, 0x2a	; 42
    1ed4:	ee 23       	and	r30, r30
    1ed6:	c1 f6       	brne	.-80     	; 0x1e88 <main+0x14e>
    Timer_init(&timer1);
    1ed8:	ce 01       	movw	r24, r28
    1eda:	8c 5a       	subi	r24, 0xAC	; 172
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	0e 94 bb 06 	call	0xd76	; 0xd76 <Timer_init>
    Timer_setCallBack(Timer1_handler, TIMER1_ID);
    1ee2:	81 e9       	ldi	r24, 0x91	; 145
    1ee4:	9e e0       	ldi	r25, 0x0E	; 14
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	0e 94 e5 07 	call	0xfca	; 0xfca <Timer_setCallBack>


    while(1) {
        // Listen for program command from UART
        PROG_status = UART_receiveByte();
    1eec:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    1ef0:	80 93 83 00 	sts	0x0083, r24

        // Handling password creation and verification process
        if (PROG_status == PASS_LOAD) {
    1ef4:	80 91 83 00 	lds	r24, 0x0083
    1ef8:	80 3a       	cpi	r24, 0xA0	; 160
    1efa:	09 f0       	breq	.+2      	; 0x1efe <main+0x1c4>
    1efc:	e6 c0       	rjmp	.+460    	; 0x20ca <main+0x390>

            // Receive new password (10 bytes: 5 for password and 5 for confirmation)
            for (i = 0; i < 10; ++i) {
    1efe:	10 92 90 00 	sts	0x0090, r1
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <main+0x1e8>
                pass[i] = UART_receiveByte();
    1f04:	80 91 90 00 	lds	r24, 0x0090
    1f08:	08 2f       	mov	r16, r24
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    1f10:	f8 01       	movw	r30, r16
    1f12:	ea 57       	subi	r30, 0x7A	; 122
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 83       	st	Z, r24

        // Handling password creation and verification process
        if (PROG_status == PASS_LOAD) {

            // Receive new password (10 bytes: 5 for password and 5 for confirmation)
            for (i = 0; i < 10; ++i) {
    1f18:	80 91 90 00 	lds	r24, 0x0090
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	80 93 90 00 	sts	0x0090, r24
    1f22:	80 91 90 00 	lds	r24, 0x0090
    1f26:	8a 30       	cpi	r24, 0x0A	; 10
    1f28:	68 f3       	brcs	.-38     	; 0x1f04 <main+0x1ca>
                pass[i] = UART_receiveByte();
            }

            // Verify if the new password matches the confirmation input
            for (i = 0; i < 5; ++i) {
    1f2a:	10 92 90 00 	sts	0x0090, r1
    1f2e:	1c c0       	rjmp	.+56     	; 0x1f68 <main+0x22e>
                if (pass[i] != pass[i + 5]) {
    1f30:	80 91 90 00 	lds	r24, 0x0090
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ea 57       	subi	r30, 0x7A	; 122
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	20 81       	ld	r18, Z
    1f40:	80 91 90 00 	lds	r24, 0x0090
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	05 96       	adiw	r24, 0x05	; 5
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	ea 57       	subi	r30, 0x7A	; 122
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	28 17       	cp	r18, r24
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <main+0x224>
                    // Notify HMI of mismatch in password confirmation
                    UART_sendByte(PASS_FAIL);
    1f56:	80 ef       	ldi	r24, 0xF0	; 240
    1f58:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <main+0x236>
            for (i = 0; i < 10; ++i) {
                pass[i] = UART_receiveByte();
            }

            // Verify if the new password matches the confirmation input
            for (i = 0; i < 5; ++i) {
    1f5e:	80 91 90 00 	lds	r24, 0x0090
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	80 93 90 00 	sts	0x0090, r24
    1f68:	80 91 90 00 	lds	r24, 0x0090
    1f6c:	85 30       	cpi	r24, 0x05	; 5
    1f6e:	00 f3       	brcs	.-64     	; 0x1f30 <main+0x1f6>
                    UART_sendByte(PASS_FAIL);
                    break;
                }
            }

            if (i == 5) {  // Password successfully matched
    1f70:	80 91 90 00 	lds	r24, 0x0090
    1f74:	85 30       	cpi	r24, 0x05	; 5
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <main+0x240>
    1f78:	b9 cf       	rjmp	.-142    	; 0x1eec <main+0x1b2>
                UART_sendByte(PASS_CORRECT);  // Notify HMI of successful match
    1f7a:	80 ec       	ldi	r24, 0xC0	; 192
    1f7c:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>

                // Save new password to EEPROM
                for (i = 0; i < 5; ++i) {
    1f80:	10 92 90 00 	sts	0x0090, r1
    1f84:	9c c0       	rjmp	.+312    	; 0x20be <main+0x384>
                    status = EEPROM_writeByte(START_ADDRESS + i, pass[i]);
    1f86:	80 91 90 00 	lds	r24, 0x0090
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	80 91 90 00 	lds	r24, 0x0090
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	fc 01       	movw	r30, r24
    1f98:	ea 57       	subi	r30, 0x7A	; 122
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	20 81       	ld	r18, Z
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	62 2f       	mov	r22, r18
    1fa2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <EEPROM_writeByte>
    1fa6:	80 93 84 00 	sts	0x0084, r24
    1faa:	fe 01       	movw	r30, r28
    1fac:	ed 5b       	subi	r30, 0xBD	; 189
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e2       	ldi	r26, 0x20	; 32
    1fb6:	b1 e4       	ldi	r27, 0x41	; 65
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	01 5c       	subi	r16, 0xC1	; 193
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ed 5b       	subi	r30, 0xBD	; 189
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a ef       	ldi	r20, 0xFA	; 250
    1fda:	54 e4       	ldi	r21, 0x44	; 68
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ff 96       	adiw	r30, 0x3f	; 63
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <main+0x2da>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e af       	std	Y+62, r25	; 0x3e
    2010:	8d af       	std	Y+61, r24	; 0x3d
    2012:	46 c0       	rjmp	.+140    	; 0x20a0 <main+0x366>
	else if (__tmp > 65535)
    2014:	fe 01       	movw	r30, r28
    2016:	ff 96       	adiw	r30, 0x3f	; 63
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	64 f5       	brge	.+88     	; 0x2088 <main+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	fe 01       	movw	r30, r28
    2032:	ed 5b       	subi	r30, 0xBD	; 189
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e af       	std	Y+62, r25	; 0x3e
    205c:	8d af       	std	Y+61, r24	; 0x3d
    205e:	0f c0       	rjmp	.+30     	; 0x207e <main+0x344>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c af       	std	Y+60, r25	; 0x3c
    2066:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2068:	8b ad       	ldd	r24, Y+59	; 0x3b
    206a:	9c ad       	ldd	r25, Y+60	; 0x3c
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <main+0x332>
    2070:	9c af       	std	Y+60, r25	; 0x3c
    2072:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d ad       	ldd	r24, Y+61	; 0x3d
    2076:	9e ad       	ldd	r25, Y+62	; 0x3e
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e af       	std	Y+62, r25	; 0x3e
    207c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2080:	9e ad       	ldd	r25, Y+62	; 0x3e
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <main+0x326>
    2086:	16 c0       	rjmp	.+44     	; 0x20b4 <main+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	fe 01       	movw	r30, r28
    208a:	ff 96       	adiw	r30, 0x3f	; 63
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9e af       	std	Y+62, r25	; 0x3e
    209e:	8d af       	std	Y+61, r24	; 0x3d
    20a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a4:	9a af       	std	Y+58, r25	; 0x3a
    20a6:	89 af       	std	Y+57, r24	; 0x39
    20a8:	89 ad       	ldd	r24, Y+57	; 0x39
    20aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <main+0x372>
    20b0:	9a af       	std	Y+58, r25	; 0x3a
    20b2:	89 af       	std	Y+57, r24	; 0x39

            if (i == 5) {  // Password successfully matched
                UART_sendByte(PASS_CORRECT);  // Notify HMI of successful match

                // Save new password to EEPROM
                for (i = 0; i < 5; ++i) {
    20b4:	80 91 90 00 	lds	r24, 0x0090
    20b8:	8f 5f       	subi	r24, 0xFF	; 255
    20ba:	80 93 90 00 	sts	0x0090, r24
    20be:	80 91 90 00 	lds	r24, 0x0090
    20c2:	85 30       	cpi	r24, 0x05	; 5
    20c4:	08 f4       	brcc	.+2      	; 0x20c8 <main+0x38e>
    20c6:	5f cf       	rjmp	.-322    	; 0x1f86 <main+0x24c>
    20c8:	11 cf       	rjmp	.-478    	; 0x1eec <main+0x1b2>
                    status = EEPROM_writeByte(START_ADDRESS + i, pass[i]);
                    _delay_ms(10); // Delay for EEPROM write
                }
            }
        } else if (PROG_status == PASS_IN) {
    20ca:	80 91 83 00 	lds	r24, 0x0083
    20ce:	81 3f       	cpi	r24, 0xF1	; 241
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <main+0x39a>
    20d2:	74 c1       	rjmp	.+744    	; 0x23bc <main+0x682>
            // Receive and validate user-entered password

            for (i = 0; i < 5; ++i) {
    20d4:	10 92 90 00 	sts	0x0090, r1
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <main+0x3be>
                pass[i] = UART_receiveByte();
    20da:	80 91 90 00 	lds	r24, 0x0090
    20de:	08 2f       	mov	r16, r24
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    20e6:	f8 01       	movw	r30, r16
    20e8:	ea 57       	subi	r30, 0x7A	; 122
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 83       	st	Z, r24
                }
            }
        } else if (PROG_status == PASS_IN) {
            // Receive and validate user-entered password

            for (i = 0; i < 5; ++i) {
    20ee:	80 91 90 00 	lds	r24, 0x0090
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	80 93 90 00 	sts	0x0090, r24
    20f8:	80 91 90 00 	lds	r24, 0x0090
    20fc:	85 30       	cpi	r24, 0x05	; 5
    20fe:	68 f3       	brcs	.-38     	; 0x20da <main+0x3a0>
                pass[i] = UART_receiveByte();
            }

            // Retrieve stored password from EEPROM for comparison
            for (i = 5; i < 10; ++i) {
    2100:	85 e0       	ldi	r24, 0x05	; 5
    2102:	80 93 90 00 	sts	0x0090, r24
    2106:	8a c0       	rjmp	.+276    	; 0x221c <main+0x4e2>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
    2108:	80 91 90 00 	lds	r24, 0x0090
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	05 97       	sbiw	r24, 0x05	; 5
    2112:	ac 01       	movw	r20, r24
    2114:	80 91 90 00 	lds	r24, 0x0090
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9c 01       	movw	r18, r24
    211e:	2a 57       	subi	r18, 0x7A	; 122
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	ca 01       	movw	r24, r20
    2124:	b9 01       	movw	r22, r18
    2126:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <EEPROM_readByte>
    212a:	80 93 84 00 	sts	0x0084, r24
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e2       	ldi	r26, 0x20	; 32
    2134:	b1 e4       	ldi	r27, 0x41	; 65
    2136:	8d ab       	std	Y+53, r24	; 0x35
    2138:	9e ab       	std	Y+54, r25	; 0x36
    213a:	af ab       	std	Y+55, r26	; 0x37
    213c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6d a9       	ldd	r22, Y+53	; 0x35
    2140:	7e a9       	ldd	r23, Y+54	; 0x36
    2142:	8f a9       	ldd	r24, Y+55	; 0x37
    2144:	98 ad       	ldd	r25, Y+56	; 0x38
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	89 ab       	std	Y+49, r24	; 0x31
    2158:	9a ab       	std	Y+50, r25	; 0x32
    215a:	ab ab       	std	Y+51, r26	; 0x33
    215c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215e:	69 a9       	ldd	r22, Y+49	; 0x31
    2160:	7a a9       	ldd	r23, Y+50	; 0x32
    2162:	8b a9       	ldd	r24, Y+51	; 0x33
    2164:	9c a9       	ldd	r25, Y+52	; 0x34
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <main+0x446>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <main+0x4c4>
	else if (__tmp > 65535)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <main+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6d a9       	ldd	r22, Y+53	; 0x35
    219a:	7e a9       	ldd	r23, Y+54	; 0x36
    219c:	8f a9       	ldd	r24, Y+55	; 0x37
    219e:	98 ad       	ldd	r25, Y+56	; 0x38
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	98 ab       	std	Y+48, r25	; 0x30
    21be:	8f a7       	std	Y+47, r24	; 0x2f
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <main+0x4a6>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
    21ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    21cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <main+0x494>
    21d2:	9e a7       	std	Y+46, r25	; 0x2e
    21d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <main+0x488>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <main+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
    2206:	8b a5       	ldd	r24, Y+43	; 0x2b
    2208:	9c a5       	ldd	r25, Y+44	; 0x2c
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <main+0x4d0>
    220e:	9c a7       	std	Y+44, r25	; 0x2c
    2210:	8b a7       	std	Y+43, r24	; 0x2b
            for (i = 0; i < 5; ++i) {
                pass[i] = UART_receiveByte();
            }

            // Retrieve stored password from EEPROM for comparison
            for (i = 5; i < 10; ++i) {
    2212:	80 91 90 00 	lds	r24, 0x0090
    2216:	8f 5f       	subi	r24, 0xFF	; 255
    2218:	80 93 90 00 	sts	0x0090, r24
    221c:	80 91 90 00 	lds	r24, 0x0090
    2220:	8a 30       	cpi	r24, 0x0A	; 10
    2222:	08 f4       	brcc	.+2      	; 0x2226 <main+0x4ec>
    2224:	71 cf       	rjmp	.-286    	; 0x2108 <main+0x3ce>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
                _delay_ms(10); // Delay for EEPROM read
            }

            // Compare entered password with stored password
            for (i = 0; i < 5; ++i) {
    2226:	10 92 90 00 	sts	0x0090, r1
    222a:	1c c0       	rjmp	.+56     	; 0x2264 <main+0x52a>
                if (pass[i] != pass[i + 5]) {
    222c:	80 91 90 00 	lds	r24, 0x0090
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	fc 01       	movw	r30, r24
    2236:	ea 57       	subi	r30, 0x7A	; 122
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	20 81       	ld	r18, Z
    223c:	80 91 90 00 	lds	r24, 0x0090
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	05 96       	adiw	r24, 0x05	; 5
    2246:	fc 01       	movw	r30, r24
    2248:	ea 57       	subi	r30, 0x7A	; 122
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	28 17       	cp	r18, r24
    2250:	21 f0       	breq	.+8      	; 0x225a <main+0x520>
                    UART_sendByte(PASS_FAIL);  // Notify HMI of failure
    2252:	80 ef       	ldi	r24, 0xF0	; 240
    2254:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    2258:	09 c0       	rjmp	.+18     	; 0x226c <main+0x532>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
                _delay_ms(10); // Delay for EEPROM read
            }

            // Compare entered password with stored password
            for (i = 0; i < 5; ++i) {
    225a:	80 91 90 00 	lds	r24, 0x0090
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	80 93 90 00 	sts	0x0090, r24
    2264:	80 91 90 00 	lds	r24, 0x0090
    2268:	85 30       	cpi	r24, 0x05	; 5
    226a:	00 f3       	brcs	.-64     	; 0x222c <main+0x4f2>
                    UART_sendByte(PASS_FAIL);  // Notify HMI of failure
                    break;
                }
            }

            if (i == 5) {
    226c:	80 91 90 00 	lds	r24, 0x0090
    2270:	85 30       	cpi	r24, 0x05	; 5
    2272:	09 f0       	breq	.+2      	; 0x2276 <main+0x53c>
    2274:	3b ce       	rjmp	.-906    	; 0x1eec <main+0x1b2>
                UART_sendByte(PASS_CORRECT);  // Password verification success
    2276:	80 ec       	ldi	r24, 0xC0	; 192
    2278:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>

                // Open door for 15 seconds
                DC_MOTOR_rotate(CW, 100);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	64 e6       	ldi	r22, 0x64	; 100
    2280:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DC_MOTOR_rotate>
                counter = 0;
    2284:	10 92 82 00 	sts	0x0082, r1
                while (counter < 5);
    2288:	80 91 82 00 	lds	r24, 0x0082
    228c:	85 30       	cpi	r24, 0x05	; 5
    228e:	e0 f3       	brcs	.-8      	; 0x2288 <main+0x54e>

                // Stop the motor (door closed)
                DC_MOTOR_rotate(STOP, 0);
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DC_MOTOR_rotate>

                // Check for any further people entering
                UART_sendByte(PEOPLE_IN);
    2298:	80 eb       	ldi	r24, 0xB0	; 176
    229a:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	aa ef       	ldi	r26, 0xFA	; 250
    22a4:	b3 e4       	ldi	r27, 0x43	; 67
    22a6:	8f a3       	std	Y+39, r24	; 0x27
    22a8:	98 a7       	std	Y+40, r25	; 0x28
    22aa:	a9 a7       	std	Y+41, r26	; 0x29
    22ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	6f a1       	ldd	r22, Y+39	; 0x27
    22b0:	78 a5       	ldd	r23, Y+40	; 0x28
    22b2:	89 a5       	ldd	r24, Y+41	; 0x29
    22b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a ef       	ldi	r20, 0xFA	; 250
    22bc:	54 e4       	ldi	r21, 0x44	; 68
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	8b a3       	std	Y+35, r24	; 0x23
    22c8:	9c a3       	std	Y+36, r25	; 0x24
    22ca:	ad a3       	std	Y+37, r26	; 0x25
    22cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ce:	6b a1       	ldd	r22, Y+35	; 0x23
    22d0:	7c a1       	ldd	r23, Y+36	; 0x24
    22d2:	8d a1       	ldd	r24, Y+37	; 0x25
    22d4:	9e a1       	ldd	r25, Y+38	; 0x26
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <main+0x5b6>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9a a3       	std	Y+34, r25	; 0x22
    22ec:	89 a3       	std	Y+33, r24	; 0x21
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <main+0x634>
	else if (__tmp > 65535)
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	4c f5       	brge	.+82     	; 0x235a <main+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	6f a1       	ldd	r22, Y+39	; 0x27
    230a:	78 a5       	ldd	r23, Y+40	; 0x28
    230c:	89 a5       	ldd	r24, Y+41	; 0x29
    230e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9a a3       	std	Y+34, r25	; 0x22
    232e:	89 a3       	std	Y+33, r24	; 0x21
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <main+0x616>
    2332:	88 ec       	ldi	r24, 0xC8	; 200
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	98 a3       	std	Y+32, r25	; 0x20
    2338:	8f 8f       	std	Y+31, r24	; 0x1f
    233a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    233c:	98 a1       	ldd	r25, Y+32	; 0x20
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <main+0x604>
    2342:	98 a3       	std	Y+32, r25	; 0x20
    2344:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2346:	89 a1       	ldd	r24, Y+33	; 0x21
    2348:	9a a1       	ldd	r25, Y+34	; 0x22
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	9a a1       	ldd	r25, Y+34	; 0x22
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	69 f7       	brne	.-38     	; 0x2332 <main+0x5f8>
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <main+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	6b a1       	ldd	r22, Y+35	; 0x23
    235c:	7c a1       	ldd	r23, Y+36	; 0x24
    235e:	8d a1       	ldd	r24, Y+37	; 0x25
    2360:	9e a1       	ldd	r25, Y+38	; 0x26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	9e 8f       	std	Y+30, r25	; 0x1e
    2374:	8d 8f       	std	Y+29, r24	; 0x1d
    2376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <main+0x640>
    237e:	9e 8f       	std	Y+30, r25	; 0x1e
    2380:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(500);
                do {
                    peopleIN = PIR_getState();
    2382:	0e 94 8f 09 	call	0x131e	; 0x131e <PIR_getState>
    2386:	80 93 85 00 	sts	0x0085, r24
                } while (peopleIN);
    238a:	80 91 85 00 	lds	r24, 0x0085
    238e:	88 23       	and	r24, r24
    2390:	c1 f7       	brne	.-16     	; 0x2382 <main+0x648>

                // Begin door closure sequence
                UART_sendByte(PEOPLE_NO);
    2392:	80 ed       	ldi	r24, 0xD0	; 208
    2394:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
                counter = 0;
    2398:	10 92 82 00 	sts	0x0082, r1
                DC_MOTOR_rotate(ACW, 100);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	64 e6       	ldi	r22, 0x64	; 100
    23a0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DC_MOTOR_rotate>
                while (counter < 5);
    23a4:	80 91 82 00 	lds	r24, 0x0082
    23a8:	85 30       	cpi	r24, 0x05	; 5
    23aa:	e0 f3       	brcs	.-8      	; 0x23a4 <main+0x66a>
                DC_MOTOR_rotate(STOP, 0);
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DC_MOTOR_rotate>
                UART_sendByte(DOOR_CLOSED);
    23b4:	83 ef       	ldi	r24, 0xF3	; 243
    23b6:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    23ba:	98 cd       	rjmp	.-1232   	; 0x1eec <main+0x1b2>
            }
        } else if (PROG_status == PASS_UPDATE) {
    23bc:	80 91 83 00 	lds	r24, 0x0083
    23c0:	80 3e       	cpi	r24, 0xE0	; 224
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <main+0x68c>
    23c4:	a7 c1       	rjmp	.+846    	; 0x2714 <main+0x9da>
            // Handle password update

            for (i = 0; i < 5; ++i) {
    23c6:	10 92 90 00 	sts	0x0090, r1
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <main+0x6b0>
                pass[i] = UART_receiveByte();
    23cc:	80 91 90 00 	lds	r24, 0x0090
    23d0:	08 2f       	mov	r16, r24
    23d2:	10 e0       	ldi	r17, 0x00	; 0
    23d4:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    23d8:	f8 01       	movw	r30, r16
    23da:	ea 57       	subi	r30, 0x7A	; 122
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 83       	st	Z, r24
                UART_sendByte(DOOR_CLOSED);
            }
        } else if (PROG_status == PASS_UPDATE) {
            // Handle password update

            for (i = 0; i < 5; ++i) {
    23e0:	80 91 90 00 	lds	r24, 0x0090
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	80 93 90 00 	sts	0x0090, r24
    23ea:	80 91 90 00 	lds	r24, 0x0090
    23ee:	85 30       	cpi	r24, 0x05	; 5
    23f0:	68 f3       	brcs	.-38     	; 0x23cc <main+0x692>
                pass[i] = UART_receiveByte();
            }

            // Retrieve stored password for verification
            for (i = 5; i < 10; ++i) {
    23f2:	85 e0       	ldi	r24, 0x05	; 5
    23f4:	80 93 90 00 	sts	0x0090, r24
    23f8:	8a c0       	rjmp	.+276    	; 0x250e <main+0x7d4>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
    23fa:	80 91 90 00 	lds	r24, 0x0090
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	05 97       	sbiw	r24, 0x05	; 5
    2404:	ac 01       	movw	r20, r24
    2406:	80 91 90 00 	lds	r24, 0x0090
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 01       	movw	r18, r24
    2410:	2a 57       	subi	r18, 0x7A	; 122
    2412:	3f 4f       	sbci	r19, 0xFF	; 255
    2414:	ca 01       	movw	r24, r20
    2416:	b9 01       	movw	r22, r18
    2418:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <EEPROM_readByte>
    241c:	80 93 84 00 	sts	0x0084, r24
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e2       	ldi	r26, 0x20	; 32
    2426:	b1 e4       	ldi	r27, 0x41	; 65
    2428:	89 8f       	std	Y+25, r24	; 0x19
    242a:	9a 8f       	std	Y+26, r25	; 0x1a
    242c:	ab 8f       	std	Y+27, r26	; 0x1b
    242e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	69 8d       	ldd	r22, Y+25	; 0x19
    2432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a ef       	ldi	r20, 0xFA	; 250
    243e:	54 e4       	ldi	r21, 0x44	; 68
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8d 8b       	std	Y+21, r24	; 0x15
    244a:	9e 8b       	std	Y+22, r25	; 0x16
    244c:	af 8b       	std	Y+23, r26	; 0x17
    244e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2450:	6d 89       	ldd	r22, Y+21	; 0x15
    2452:	7e 89       	ldd	r23, Y+22	; 0x16
    2454:	8f 89       	ldd	r24, Y+23	; 0x17
    2456:	98 8d       	ldd	r25, Y+24	; 0x18
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <main+0x738>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 8b       	std	Y+20, r25	; 0x14
    246e:	8b 8b       	std	Y+19, r24	; 0x13
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <main+0x7b6>
	else if (__tmp > 65535)
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	69 8d       	ldd	r22, Y+25	; 0x19
    248c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9c 8b       	std	Y+20, r25	; 0x14
    24b0:	8b 8b       	std	Y+19, r24	; 0x13
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <main+0x798>
    24b4:	88 ec       	ldi	r24, 0xC8	; 200
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9a 8b       	std	Y+18, r25	; 0x12
    24ba:	89 8b       	std	Y+17, r24	; 0x11
    24bc:	89 89       	ldd	r24, Y+17	; 0x11
    24be:	9a 89       	ldd	r25, Y+18	; 0x12
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <main+0x786>
    24c4:	9a 8b       	std	Y+18, r25	; 0x12
    24c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	9c 8b       	std	Y+20, r25	; 0x14
    24d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8b 89       	ldd	r24, Y+19	; 0x13
    24d4:	9c 89       	ldd	r25, Y+20	; 0x14
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <main+0x77a>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <main+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	6d 89       	ldd	r22, Y+21	; 0x15
    24de:	7e 89       	ldd	r23, Y+22	; 0x16
    24e0:	8f 89       	ldd	r24, Y+23	; 0x17
    24e2:	98 8d       	ldd	r25, Y+24	; 0x18
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9c 8b       	std	Y+20, r25	; 0x14
    24ee:	8b 8b       	std	Y+19, r24	; 0x13
    24f0:	8b 89       	ldd	r24, Y+19	; 0x13
    24f2:	9c 89       	ldd	r25, Y+20	; 0x14
    24f4:	98 8b       	std	Y+16, r25	; 0x10
    24f6:	8f 87       	std	Y+15, r24	; 0x0f
    24f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fa:	98 89       	ldd	r25, Y+16	; 0x10
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <main+0x7c2>
    2500:	98 8b       	std	Y+16, r25	; 0x10
    2502:	8f 87       	std	Y+15, r24	; 0x0f
            for (i = 0; i < 5; ++i) {
                pass[i] = UART_receiveByte();
            }

            // Retrieve stored password for verification
            for (i = 5; i < 10; ++i) {
    2504:	80 91 90 00 	lds	r24, 0x0090
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	80 93 90 00 	sts	0x0090, r24
    250e:	80 91 90 00 	lds	r24, 0x0090
    2512:	8a 30       	cpi	r24, 0x0A	; 10
    2514:	08 f4       	brcc	.+2      	; 0x2518 <main+0x7de>
    2516:	71 cf       	rjmp	.-286    	; 0x23fa <main+0x6c0>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
                _delay_ms(10);
            }

            // Verify current password before updating
            for (i = 0; i < 5; ++i) {
    2518:	10 92 90 00 	sts	0x0090, r1
    251c:	1c c0       	rjmp	.+56     	; 0x2556 <main+0x81c>
                if (pass[i] != pass[i + 5]) {
    251e:	80 91 90 00 	lds	r24, 0x0090
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	fc 01       	movw	r30, r24
    2528:	ea 57       	subi	r30, 0x7A	; 122
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	20 81       	ld	r18, Z
    252e:	80 91 90 00 	lds	r24, 0x0090
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	05 96       	adiw	r24, 0x05	; 5
    2538:	fc 01       	movw	r30, r24
    253a:	ea 57       	subi	r30, 0x7A	; 122
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	28 17       	cp	r18, r24
    2542:	21 f0       	breq	.+8      	; 0x254c <main+0x812>
                    UART_sendByte(PASS_FAIL);  // Current password mismatch
    2544:	80 ef       	ldi	r24, 0xF0	; 240
    2546:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    254a:	09 c0       	rjmp	.+18     	; 0x255e <main+0x824>
                status = EEPROM_readByte(START_ADDRESS + i - 5, &pass[i]);
                _delay_ms(10);
            }

            // Verify current password before updating
            for (i = 0; i < 5; ++i) {
    254c:	80 91 90 00 	lds	r24, 0x0090
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	80 93 90 00 	sts	0x0090, r24
    2556:	80 91 90 00 	lds	r24, 0x0090
    255a:	85 30       	cpi	r24, 0x05	; 5
    255c:	00 f3       	brcs	.-64     	; 0x251e <main+0x7e4>
                    UART_sendByte(PASS_FAIL);  // Current password mismatch
                    break;
                }
            }

            if (i == 5) {  // Password verified for update
    255e:	80 91 90 00 	lds	r24, 0x0090
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	09 f0       	breq	.+2      	; 0x2568 <main+0x82e>
    2566:	c2 cc       	rjmp	.-1660   	; 0x1eec <main+0x1b2>
                UART_sendByte(PASS_CORRECT);
    2568:	80 ec       	ldi	r24, 0xC0	; 192
    256a:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>

                // Receive new password
                for (i = 0; i < 10; ++i) {
    256e:	10 92 90 00 	sts	0x0090, r1
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <main+0x858>
                    pass[i] = UART_receiveByte();
    2574:	80 91 90 00 	lds	r24, 0x0090
    2578:	08 2f       	mov	r16, r24
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_receiveByte>
    2580:	f8 01       	movw	r30, r16
    2582:	ea 57       	subi	r30, 0x7A	; 122
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 83       	st	Z, r24

            if (i == 5) {  // Password verified for update
                UART_sendByte(PASS_CORRECT);

                // Receive new password
                for (i = 0; i < 10; ++i) {
    2588:	80 91 90 00 	lds	r24, 0x0090
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	80 93 90 00 	sts	0x0090, r24
    2592:	80 91 90 00 	lds	r24, 0x0090
    2596:	8a 30       	cpi	r24, 0x0A	; 10
    2598:	68 f3       	brcs	.-38     	; 0x2574 <main+0x83a>
                    pass[i] = UART_receiveByte();
                }

                // Verify new password confirmation
                for (i = 0; i < 5; ++i) {
    259a:	10 92 90 00 	sts	0x0090, r1
    259e:	1c c0       	rjmp	.+56     	; 0x25d8 <main+0x89e>
                    if (pass[i] != pass[i + 5]) {
    25a0:	80 91 90 00 	lds	r24, 0x0090
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	fc 01       	movw	r30, r24
    25aa:	ea 57       	subi	r30, 0x7A	; 122
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	20 81       	ld	r18, Z
    25b0:	80 91 90 00 	lds	r24, 0x0090
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	05 96       	adiw	r24, 0x05	; 5
    25ba:	fc 01       	movw	r30, r24
    25bc:	ea 57       	subi	r30, 0x7A	; 122
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	28 17       	cp	r18, r24
    25c4:	21 f0       	breq	.+8      	; 0x25ce <main+0x894>
                        UART_sendByte(PASS_FAIL);
    25c6:	80 ef       	ldi	r24, 0xF0	; 240
    25c8:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <main+0x8a6>
                for (i = 0; i < 10; ++i) {
                    pass[i] = UART_receiveByte();
                }

                // Verify new password confirmation
                for (i = 0; i < 5; ++i) {
    25ce:	80 91 90 00 	lds	r24, 0x0090
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	80 93 90 00 	sts	0x0090, r24
    25d8:	80 91 90 00 	lds	r24, 0x0090
    25dc:	85 30       	cpi	r24, 0x05	; 5
    25de:	00 f3       	brcs	.-64     	; 0x25a0 <main+0x866>
                        UART_sendByte(PASS_FAIL);
                        break;
                    }
                }

                if (i == 5) {  // New password confirmed
    25e0:	80 91 90 00 	lds	r24, 0x0090
    25e4:	85 30       	cpi	r24, 0x05	; 5
    25e6:	09 f0       	breq	.+2      	; 0x25ea <main+0x8b0>
    25e8:	81 cc       	rjmp	.-1790   	; 0x1eec <main+0x1b2>
                    UART_sendByte(PASS_CORRECT);
    25ea:	80 ec       	ldi	r24, 0xC0	; 192
    25ec:	0e 94 29 06 	call	0xc52	; 0xc52 <UART_sendByte>

                    // Save new password to EEPROM
                    for (i = 0; i < 5; ++i) {
    25f0:	10 92 90 00 	sts	0x0090, r1
    25f4:	89 c0       	rjmp	.+274    	; 0x2708 <main+0x9ce>
                        status = EEPROM_writeByte(START_ADDRESS + i, pass[i]);
    25f6:	80 91 90 00 	lds	r24, 0x0090
    25fa:	48 2f       	mov	r20, r24
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	80 91 90 00 	lds	r24, 0x0090
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	fc 01       	movw	r30, r24
    2608:	ea 57       	subi	r30, 0x7A	; 122
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	20 81       	ld	r18, Z
    260e:	ca 01       	movw	r24, r20
    2610:	62 2f       	mov	r22, r18
    2612:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <EEPROM_writeByte>
    2616:	80 93 84 00 	sts	0x0084, r24
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e2       	ldi	r26, 0x20	; 32
    2620:	b1 e4       	ldi	r27, 0x41	; 65
    2622:	8b 87       	std	Y+11, r24	; 0x0b
    2624:	9c 87       	std	Y+12, r25	; 0x0c
    2626:	ad 87       	std	Y+13, r26	; 0x0d
    2628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	6b 85       	ldd	r22, Y+11	; 0x0b
    262c:	7c 85       	ldd	r23, Y+12	; 0x0c
    262e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2630:	9e 85       	ldd	r25, Y+14	; 0x0e
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a ef       	ldi	r20, 0xFA	; 250
    2638:	54 e4       	ldi	r21, 0x44	; 68
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	a9 87       	std	Y+9, r26	; 0x09
    2648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <main+0x932>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <main+0x9b0>
	else if (__tmp > 65535)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <main+0x99c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	6b 85       	ldd	r22, Y+11	; 0x0b
    2686:	7c 85       	ldd	r23, Y+12	; 0x0c
    2688:	8d 85       	ldd	r24, Y+13	; 0x0d
    268a:	9e 85       	ldd	r25, Y+14	; 0x0e
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <main+0x992>
    26ae:	88 ec       	ldi	r24, 0xC8	; 200
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <main+0x980>
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <main+0x974>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <main+0x9c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <main+0x9bc>
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01

                if (i == 5) {  // New password confirmed
                    UART_sendByte(PASS_CORRECT);

                    // Save new password to EEPROM
                    for (i = 0; i < 5; ++i) {
    26fe:	80 91 90 00 	lds	r24, 0x0090
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	80 93 90 00 	sts	0x0090, r24
    2708:	80 91 90 00 	lds	r24, 0x0090
    270c:	85 30       	cpi	r24, 0x05	; 5
    270e:	08 f4       	brcc	.+2      	; 0x2712 <main+0x9d8>
    2710:	72 cf       	rjmp	.-284    	; 0x25f6 <main+0x8bc>
    2712:	ec cb       	rjmp	.-2088   	; 0x1eec <main+0x1b2>
                        status = EEPROM_writeByte(START_ADDRESS + i, pass[i]);
                        _delay_ms(10);
                    }
                }
            }
        } else if (PROG_status == ALARM_ON) {
    2714:	80 91 83 00 	lds	r24, 0x0083
    2718:	82 3f       	cpi	r24, 0xF2	; 242
    271a:	09 f0       	breq	.+2      	; 0x271e <main+0x9e4>
    271c:	e7 cb       	rjmp	.-2098   	; 0x1eec <main+0x1b2>
            // Activate alarm for a duration of 60 seconds
            BUZZER_on();
    271e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <BUZZER_on>
            counter = 0;
    2722:	10 92 82 00 	sts	0x0082, r1
            while (counter < 60);
    2726:	80 91 82 00 	lds	r24, 0x0082
    272a:	8c 33       	cpi	r24, 0x3C	; 60
    272c:	e0 f3       	brcs	.-8      	; 0x2726 <main+0x9ec>
            BUZZER_off();
    272e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <BUZZER_off>
    2732:	dc cb       	rjmp	.-2120   	; 0x1eec <main+0x1b2>

00002734 <__divmodhi4>:
    2734:	97 fb       	bst	r25, 7
    2736:	09 2e       	mov	r0, r25
    2738:	07 26       	eor	r0, r23
    273a:	0a d0       	rcall	.+20     	; 0x2750 <__divmodhi4_neg1>
    273c:	77 fd       	sbrc	r23, 7
    273e:	04 d0       	rcall	.+8      	; 0x2748 <__divmodhi4_neg2>
    2740:	2e d0       	rcall	.+92     	; 0x279e <__udivmodhi4>
    2742:	06 d0       	rcall	.+12     	; 0x2750 <__divmodhi4_neg1>
    2744:	00 20       	and	r0, r0
    2746:	1a f4       	brpl	.+6      	; 0x274e <__divmodhi4_exit>

00002748 <__divmodhi4_neg2>:
    2748:	70 95       	com	r23
    274a:	61 95       	neg	r22
    274c:	7f 4f       	sbci	r23, 0xFF	; 255

0000274e <__divmodhi4_exit>:
    274e:	08 95       	ret

00002750 <__divmodhi4_neg1>:
    2750:	f6 f7       	brtc	.-4      	; 0x274e <__divmodhi4_exit>
    2752:	90 95       	com	r25
    2754:	81 95       	neg	r24
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	08 95       	ret

0000275a <__udivmodsi4>:
    275a:	a1 e2       	ldi	r26, 0x21	; 33
    275c:	1a 2e       	mov	r1, r26
    275e:	aa 1b       	sub	r26, r26
    2760:	bb 1b       	sub	r27, r27
    2762:	fd 01       	movw	r30, r26
    2764:	0d c0       	rjmp	.+26     	; 0x2780 <__udivmodsi4_ep>

00002766 <__udivmodsi4_loop>:
    2766:	aa 1f       	adc	r26, r26
    2768:	bb 1f       	adc	r27, r27
    276a:	ee 1f       	adc	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	a2 17       	cp	r26, r18
    2770:	b3 07       	cpc	r27, r19
    2772:	e4 07       	cpc	r30, r20
    2774:	f5 07       	cpc	r31, r21
    2776:	20 f0       	brcs	.+8      	; 0x2780 <__udivmodsi4_ep>
    2778:	a2 1b       	sub	r26, r18
    277a:	b3 0b       	sbc	r27, r19
    277c:	e4 0b       	sbc	r30, r20
    277e:	f5 0b       	sbc	r31, r21

00002780 <__udivmodsi4_ep>:
    2780:	66 1f       	adc	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	1a 94       	dec	r1
    278a:	69 f7       	brne	.-38     	; 0x2766 <__udivmodsi4_loop>
    278c:	60 95       	com	r22
    278e:	70 95       	com	r23
    2790:	80 95       	com	r24
    2792:	90 95       	com	r25
    2794:	9b 01       	movw	r18, r22
    2796:	ac 01       	movw	r20, r24
    2798:	bd 01       	movw	r22, r26
    279a:	cf 01       	movw	r24, r30
    279c:	08 95       	ret

0000279e <__udivmodhi4>:
    279e:	aa 1b       	sub	r26, r26
    27a0:	bb 1b       	sub	r27, r27
    27a2:	51 e1       	ldi	r21, 0x11	; 17
    27a4:	07 c0       	rjmp	.+14     	; 0x27b4 <__udivmodhi4_ep>

000027a6 <__udivmodhi4_loop>:
    27a6:	aa 1f       	adc	r26, r26
    27a8:	bb 1f       	adc	r27, r27
    27aa:	a6 17       	cp	r26, r22
    27ac:	b7 07       	cpc	r27, r23
    27ae:	10 f0       	brcs	.+4      	; 0x27b4 <__udivmodhi4_ep>
    27b0:	a6 1b       	sub	r26, r22
    27b2:	b7 0b       	sbc	r27, r23

000027b4 <__udivmodhi4_ep>:
    27b4:	88 1f       	adc	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	5a 95       	dec	r21
    27ba:	a9 f7       	brne	.-22     	; 0x27a6 <__udivmodhi4_loop>
    27bc:	80 95       	com	r24
    27be:	90 95       	com	r25
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	08 95       	ret

000027c6 <__prologue_saves__>:
    27c6:	2f 92       	push	r2
    27c8:	3f 92       	push	r3
    27ca:	4f 92       	push	r4
    27cc:	5f 92       	push	r5
    27ce:	6f 92       	push	r6
    27d0:	7f 92       	push	r7
    27d2:	8f 92       	push	r8
    27d4:	9f 92       	push	r9
    27d6:	af 92       	push	r10
    27d8:	bf 92       	push	r11
    27da:	cf 92       	push	r12
    27dc:	df 92       	push	r13
    27de:	ef 92       	push	r14
    27e0:	ff 92       	push	r15
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	ca 1b       	sub	r28, r26
    27f0:	db 0b       	sbc	r29, r27
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	09 94       	ijmp

000027fe <__epilogue_restores__>:
    27fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2800:	39 88       	ldd	r3, Y+17	; 0x11
    2802:	48 88       	ldd	r4, Y+16	; 0x10
    2804:	5f 84       	ldd	r5, Y+15	; 0x0f
    2806:	6e 84       	ldd	r6, Y+14	; 0x0e
    2808:	7d 84       	ldd	r7, Y+13	; 0x0d
    280a:	8c 84       	ldd	r8, Y+12	; 0x0c
    280c:	9b 84       	ldd	r9, Y+11	; 0x0b
    280e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2810:	b9 84       	ldd	r11, Y+9	; 0x09
    2812:	c8 84       	ldd	r12, Y+8	; 0x08
    2814:	df 80       	ldd	r13, Y+7	; 0x07
    2816:	ee 80       	ldd	r14, Y+6	; 0x06
    2818:	fd 80       	ldd	r15, Y+5	; 0x05
    281a:	0c 81       	ldd	r16, Y+4	; 0x04
    281c:	1b 81       	ldd	r17, Y+3	; 0x03
    281e:	aa 81       	ldd	r26, Y+2	; 0x02
    2820:	b9 81       	ldd	r27, Y+1	; 0x01
    2822:	ce 0f       	add	r28, r30
    2824:	d1 1d       	adc	r29, r1
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	ed 01       	movw	r28, r26
    2832:	08 95       	ret

00002834 <_exit>:
    2834:	f8 94       	cli

00002836 <__stop_program>:
    2836:	ff cf       	rjmp	.-2      	; 0x2836 <__stop_program>
